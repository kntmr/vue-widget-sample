import axios from 'axios'

const debug = process.env.NODE_ENV !== 'production'

const api = {
  get: (url) => {
    if (debug) {
      return Promise.resolve({ data: mock })
    }
    console.log('>> ' + url)
    return axios.get(url)
  }
}

export default {
  getItems: (query) => api.get(`https://qiita.com/api/v2/items?query=${query}`).then(resp => {
    return Promise.resolve(resp.data)
  })
}

const mock = [
  {
    "rendered_body": "<p>これは2017年11月15日に開催したPHPerイベント<a href=\"https://yyphp.connpass.com/event/70011/\" rel=\"nofollow noopener\" target=\"_blank\">YYPHP#15</a>のイベントレポートです。</p>\n\n<p><a href=\"https://yyphp.connpass.com/\" rel=\"nofollow noopener\" target=\"_blank\">YYPHP</a>は一言で「PHPerの部室」です。PHPについて、雑に、ゆるく、ワイワイ話し合う集いです。毎回お題を決めずに雑談を出発点にいろいろなことを突発的にやります。集まった人でコードリーディングをすることもあれば、一緒に開発ツールを触ってみたり、フレームワークについての情報交換をすることもあります。開催は<strong>毎週</strong>水曜19:00に高田馬場にて。</p>\n\n<h2>\n<span id=\"参加者\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E5%8A%A0%E8%80%85\"><i class=\"fa fa-link\"></i></a>参加者</h2>\n\n<ul>\n<li>9名</li>\n<li>PHP歴の分布\n\n<ul>\n<li>10年〜: 2名</li>\n<li>3年: 1名</li>\n<li>1年半: 1名</li>\n<li>1年未満: 4名</li>\n<li>4日: 1名</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"人生相談phperはどういうエンジニアなのか\" class=\"fragment\"></span><a href=\"#%E4%BA%BA%E7%94%9F%E7%9B%B8%E8%AB%87phper%E3%81%AF%E3%81%A9%E3%81%86%E3%81%84%E3%81%86%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%AA%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>人生相談、PHPerはどういうエンジニアなのか</h2>\n\n<ul>\n<li>勉強法がよくわからない。</li>\n<li>どうなりたいか分からない。</li>\n<li>転職するとき実績が大事。</li>\n<li>GitHubのアカウント大事。</li>\n</ul>\n\n<h2>\n<span id=\"フロントエンド以外のエンジニアもやってみたい\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E4%BB%A5%E5%A4%96%E3%81%AE%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%82%82%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>フロントエンド以外のエンジニアもやってみたい</h2>\n\n<ul>\n<li>Blade</li>\n<li>Vue使いたい <a href=\"https://jp.vuejs.org/index.html\" rel=\"nofollow noopener\" target=\"_blank\">Vue.js</a>\n</li>\n<li>いつフレームワークを使うべきか？\n\n<ul>\n<li>WordPressのプラグインはカスタマイズが必要になると大変。</li>\n</ul>\n</li>\n<li>EC-Cube</li>\n<li><a href=\"https://ja.wordpress.org/plugins/woocommerce/\" rel=\"nofollow noopener\" target=\"_blank\">WooCommerce — WordPress プラグイン</a></li>\n<li>タスク管理アプリとかをフロントからサーバサイドまで作ってみては？\n\n<ul>\n<li>俺できるくね？ってなったら転職してみるとか。</li>\n</ul>\n</li>\n<li>バックエンドは覚えることが多い\n\n<ul>\n<li>業務知識、SQL、データベースなどいろいろ覚えることある。</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"プログラムの裏で何が起こっているのか\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%81%AE%E8%A3%8F%E3%81%A7%E4%BD%95%E3%81%8C%E8%B5%B7%E3%81%93%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>プログラムの裏で何が起こっているのか？</h2>\n\n<ul>\n<li>言語の下のレイヤーで何が起こっているのか分かっていないと心配。</li>\n<li>そこをどう学んでいくか？\n\n<ul>\n<li>フレームワークのソースコードを読むのが手っ取り早い</li>\n<li>読めなくてもにらめっこしていれば何となく分かる</li>\n<li>変更してみる</li>\n<li>本を読む</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"restful-apiってどうやって設計していくのか\" class=\"fragment\"></span><a href=\"#restful-api%E3%81%A3%E3%81%A6%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E8%A8%AD%E8%A8%88%E3%81%97%E3%81%A6%E3%81%84%E3%81%8F%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>RESTful APIってどうやって設計していくのか？</h2>\n\n<ul>\n<li><a href=\"https://qiita.com/busyoumono99/items/9b5ffd35dd521bafce47\" id=\"reference-56b1a2ddd7c52b5c5dcd\">WebAPIについての説明 - Qiita</a></li>\n<li>考えるのは難しい</li>\n<li>GraphQL <a href=\"http://graphql.org/learn/\" rel=\"nofollow noopener\" target=\"_blank\">Introduction to GraphQL | GraphQL</a>\n</li>\n</ul>\n\n<h2>\n<span id=\"goとphp\" class=\"fragment\"></span><a href=\"#go%E3%81%A8php\"><i class=\"fa fa-link\"></i></a>GoとPHP</h2>\n\n<ul>\n<li>Goは早い\n\n<ul>\n<li>コンパイルすると機械語になる</li>\n<li>スクリプト言語と比べて30〜100倍くらい違う</li>\n</ul>\n</li>\n<li>PHPerの学び方\n\n<ul>\n<li>呼び方の違い: class → struct </li>\n<li>参照<code>&amp;</code>がある</li>\n<li>\n<a href=\"https://qiita.com/suin/items/22662f43b6a6e8728798\" id=\"reference-ce55876a4e470d66de62\">動的言語だけやってた僕が、38日間Go言語を書いて学んだこと - Qiita</a>も参考になるかも</li>\n</ul>\n</li>\n<li>ミドルウェアを作る向け\n\n<ul>\n<li>HTTPサーバとか</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"docker\" class=\"fragment\"></span><a href=\"#docker\"><i class=\"fa fa-link\"></i></a>Docker</h2>\n\n<ul>\n<li>本番と開発環境のDockerイメージを同じにするか、ビルドするか</li>\n<li>Docker For Mac</li>\n<li>WindowsはVagrant+Dockerを使わないといけない</li>\n<li>Windows10ProはDocker For Windowsが使える</li>\n</ul>\n\n<h2>\n<span id=\"その他の雑談\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E9%9B%91%E8%AB%87\"><i class=\"fa fa-link\"></i></a>その他の雑談</h2>\n\n<ul>\n<li>\n<a href=\"https://kapeli.com/dash\" rel=\"nofollow noopener\" target=\"_blank\">Dash for macOS - API Documentation Browser, Snippet Manager - Kapeli</a>\n\n<ul>\n<li>ローカルでPHPやフレームワークのドキュメントを見れる。 </li>\n</ul>\n</li>\n<li>ウェブ系はMacが多いのか？\n\n<ul>\n<li>MacはUnixなのでLinuxと似ている</li>\n<li>これがウェブ開発者にとってはウケが良いのでは</li>\n</ul>\n</li>\n<li><a href=\"http://c16e.com/1511101558/\" rel=\"nofollow noopener\" target=\"_blank\">Slackで簡単に「日報」ならぬ「分報」をチームで実現する3ステップ〜Problemが10分で解決するチャットを作ろう | | Craftsman Software Inc.</a></li>\n<li><a href=\"https://c9.io/\" rel=\"nofollow noopener\" target=\"_blank\">Cloud9 - Your development environment, in the cloud</a></li>\n<li><a href=\"https://qiita.com/shunsuke227ono/items/94dd6e707d34a1da2617\" id=\"reference-aacca0cfa252d966d7a6\">意外ととっつきやすいOSS開発参加方法まとめ - Qiita</a></li>\n</ul>\n\n<h2>\n<span id=\"参加者の感想今回参加してよかったことは何ですか\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E5%8A%A0%E8%80%85%E3%81%AE%E6%84%9F%E6%83%B3%E4%BB%8A%E5%9B%9E%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%A6%E3%82%88%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%A7%E3%81%99%E3%81%8B\"><i class=\"fa fa-link\"></i></a>参加者の感想「今回参加してよかったことは何ですか？」</h2>\n\n<ul>\n<li>勉強法などわかる！</li>\n<li>柔らかい雰囲気で知識を吸収できる</li>\n<li>phpの知識や勉強方法など、普段では得られない情報が得られた</li>\n<li>最新情報の仕入れ方のノウハウを知った</li>\n<li>言語等のリファレンスビューアーDash、OS等の学習方法、GraphQL等知らなかったことを色々知れた。</li>\n<li>皆さん優しくてホッとしました(≧▽≦)</li>\n</ul>\n\n<h3>\n<span id=\"改善してほしいことフィードバック\" class=\"fragment\"></span><a href=\"#%E6%94%B9%E5%96%84%E3%81%97%E3%81%A6%E3%81%BB%E3%81%97%E3%81%84%E3%81%93%E3%81%A8%E3%83%95%E3%82%A3%E3%83%BC%E3%83%89%E3%83%90%E3%83%83%E3%82%AF\"><i class=\"fa fa-link\"></i></a>改善してほしいこと、フィードバック</h3>\n\n<ul>\n<li>もっと話が聞きたいと思ったので、もう少し時間が長かったら嬉しいです。</li>\n<li>１テーマが少し長いかもなーと思いました。けど僕は基本雑談しにきてるので、正直そんなに問題はないです^^</li>\n<li>もくもく会にして、つまづいたところとか分からないところを都度質問出来る、みたいな会があっても面白いかも知れないです^^</li>\n<li>個人的に遠くて遅い時間なのが…</li>\n</ul>\n\n<h2>\n<span id=\"yyphpは毎週やってます\" class=\"fragment\"></span><a href=\"#yyphp%E3%81%AF%E6%AF%8E%E9%80%B1%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BE%E3%81%99\"><i class=\"fa fa-link\"></i></a>YYPHPは毎週やってます</h2>\n\n<p>PHPについてワイワイ話したい方は、<a href=\"https://yyphp.connpass.com/\" rel=\"nofollow noopener\" target=\"_blank\">YYPHPのイベント情報</a>をチェックしてみて下さい。</p>\n\n<p>以上、YYPHPのレポートでした。次回もワイワイやっていきたいと思います！ では、また来週！</p>\n",
    "body": "\nこれは2017年11月15日に開催したPHPerイベント[YYPHP#15]のイベントレポートです。\n\n[YYPHP]は一言で「PHPerの部室」です。PHPについて、雑に、ゆるく、ワイワイ話し合う集いです。毎回お題を決めずに雑談を出発点にいろいろなことを突発的にやります。集まった人でコードリーディングをすることもあれば、一緒に開発ツールを触ってみたり、フレームワークについての情報交換をすることもあります。開催は**毎週**水曜19:00に高田馬場にて。\n\n[YYPHP#15]: https://yyphp.connpass.com/event/70011/\n[YYPHP]: https://yyphp.connpass.com/\n\n## 参加者\n\n* 9名\n* PHP歴の分布\n    * 10年〜: 2名\n    * 3年: 1名\n    * 1年半: 1名\n    * 1年未満: 4名\n    * 4日: 1名\n\n## 人生相談、PHPerはどういうエンジニアなのか\n\n* 勉強法がよくわからない。\n* どうなりたいか分からない。\n* 転職するとき実績が大事。\n* GitHubのアカウント大事。\n\n## フロントエンド以外のエンジニアもやってみたい\n\n* Blade\n* Vue使いたい [Vue.js](https://jp.vuejs.org/index.html)\n* いつフレームワークを使うべきか？\n    * WordPressのプラグインはカスタマイズが必要になると大変。\n* EC-Cube\n* [WooCommerce — WordPress プラグイン](https://ja.wordpress.org/plugins/woocommerce/)\n* タスク管理アプリとかをフロントからサーバサイドまで作ってみては？\n    * 俺できるくね？ってなったら転職してみるとか。\n* バックエンドは覚えることが多い\n    * 業務知識、SQL、データベースなどいろいろ覚えることある。\n\n## プログラムの裏で何が起こっているのか？\n\n* 言語の下のレイヤーで何が起こっているのか分かっていないと心配。\n* そこをどう学んでいくか？\n    * フレームワークのソースコードを読むのが手っ取り早い\n    * 読めなくてもにらめっこしていれば何となく分かる\n    * 変更してみる\n    * 本を読む\n\n## RESTful APIってどうやって設計していくのか？\n\n* [WebAPIについての説明 - Qiita](https://qiita.com/busyoumono99/items/9b5ffd35dd521bafce47)\n* 考えるのは難しい\n* GraphQL [Introduction to GraphQL | GraphQL](http://graphql.org/learn/)\n\n## GoとPHP\n\n* Goは早い\n    * コンパイルすると機械語になる\n    * スクリプト言語と比べて30〜100倍くらい違う\n* PHPerの学び方\n    * 呼び方の違い: class → struct \n    * 参照`&`がある\n    * [動的言語だけやってた僕が、38日間Go言語を書いて学んだこと - Qiita](https://qiita.com/suin/items/22662f43b6a6e8728798)も参考になるかも\n* ミドルウェアを作る向け\n    * HTTPサーバとか\n\n## Docker\n\n* 本番と開発環境のDockerイメージを同じにするか、ビルドするか\n* Docker For Mac\n* WindowsはVagrant+Dockerを使わないといけない\n* Windows10ProはDocker For Windowsが使える\n\n## その他の雑談\n\n* [Dash for macOS - API Documentation Browser, Snippet Manager - Kapeli](https://kapeli.com/dash)\n    * ローカルでPHPやフレームワークのドキュメントを見れる。 \n* ウェブ系はMacが多いのか？\n    * MacはUnixなのでLinuxと似ている\n    * これがウェブ開発者にとってはウケが良いのでは\n* [Slackで簡単に「日報」ならぬ「分報」をチームで実現する3ステップ〜Problemが10分で解決するチャットを作ろう | | Craftsman Software Inc.](http://c16e.com/1511101558/)\n* [Cloud9 - Your development environment, in the cloud](https://c9.io/)\n* [意外ととっつきやすいOSS開発参加方法まとめ - Qiita](https://qiita.com/shunsuke227ono/items/94dd6e707d34a1da2617)\n\n\n## 参加者の感想「今回参加してよかったことは何ですか？」\n\n* 勉強法などわかる！\n* 柔らかい雰囲気で知識を吸収できる\n* phpの知識や勉強方法など、普段では得られない情報が得られた\n* 最新情報の仕入れ方のノウハウを知った\n* 言語等のリファレンスビューアーDash、OS等の学習方法、GraphQL等知らなかったことを色々知れた。\n* 皆さん優しくてホッとしました(≧▽≦)\n\n### 改善してほしいこと、フィードバック\n\n* もっと話が聞きたいと思ったので、もう少し時間が長かったら嬉しいです。\n* １テーマが少し長いかもなーと思いました。けど僕は基本雑談しにきてるので、正直そんなに問題はないです^^\n* もくもく会にして、つまづいたところとか分からないところを都度質問出来る、みたいな会があっても面白いかも知れないです^^\n* 個人的に遠くて遅い時間なのが…\n\n## YYPHPは毎週やってます\n\nPHPについてワイワイ話したい方は、[YYPHPのイベント情報](https://yyphp.connpass.com/)をチェックしてみて下さい。\n\n以上、YYPHPのレポートでした。次回もワイワイやっていきたいと思います！ では、また来週！\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-15T22:01:34+09:00",
    "group": null,
    "id": "6e034b0f3522e08fec39",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "PHP",
        "versions": []
      },
      {
        "name": "rest",
        "versions": []
      },
      {
        "name": "docker",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "YYPHP",
        "versions": []
      }
    ],
    "title": "YYPHP#15イベントレポート「人生相談、バックエンド、プログラムの裏で巻き起こっていること、GoとPHP、RESTful、Docker」",
    "updated_at": "2017-11-15T22:01:34+09:00",
    "url": "https://qiita.com/suin/items/6e034b0f3522e08fec39",
    "user": {
      "description": "Qiita2万コントリビューション／『実践ドメイン駆動設計』書籍邦訳レビュア／分報Slack考案／YYPHP主催／CodeIQマガジン執筆／38日間Goの執筆／株式会社クラフトマンソフトウェア創設／Web自動テスト「ShouldBee」の開発／PHP／DDD／Scala／Docker／OOP／Go",
      "facebook_id": "suinyeze",
      "followees_count": 117,
      "followers_count": 845,
      "github_login_name": "suin",
      "id": "suin",
      "items_count": 695,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "ShouldBee",
      "permanent_id": 889,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/889/profile-images/1473682133",
      "twitter_screen_name": "suin",
      "website_url": "http://suin.io"
    }
  },
  {
    "rendered_body": "<p><strong>※Vue.js初心者です。あしからず。</strong><br>\nこんな記事をゆっくり更新しています。<br>\n<a href=\"https://qiita.com/moriwm77/items/432c33aa188419b89708\" id=\"reference-71fc77884604979cc3a4\">Vue.js初心者の僕がつまづいたところメモ</a><br>\nいつか誰かのお役にたてるようにがんばっていきます。</p>\n\n<h1>\n<span id=\"親コンポーネントから子コンポーネントにdataを渡す\" class=\"fragment\"></span><a href=\"#%E8%A6%AA%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%8B%E3%82%89%E5%AD%90%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%ABdata%E3%82%92%E6%B8%A1%E3%81%99\"><i class=\"fa fa-link\"></i></a>親コンポーネントから子コンポーネントにdataを渡す。</h1>\n\n<p>こんな構成でブログの新規投稿画面(Editor)を作成しました。<br>\nGithubっぽいマークダウンで入力して、RailsAPIにテキストを送信します。<br>\nそれにあたり、コンポーネント分割の練習をしてみました。</p>\n\n<h2>\n<span id=\"実装物\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A3%85%E7%89%A9\"><i class=\"fa fa-link\"></i></a>実装物</h2>\n\n<p><a href=\"https://camo.qiitausercontent.com/14d89a8edbbb9bcaa47f07e02b91b65df18a787d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3137363330302f65396230653364612d323661382d353262392d666466332d6334663535366364393861362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/14d89a8edbbb9bcaa47f07e02b91b65df18a787d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3137363330302f65396230653364612d323661382d353262392d666466332d6334663535366364393861362e706e67\" alt=\"component_vue.png\" title=\"component_vue.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/176300/e9b0e3da-26a8-52b9-fdf3-c4f556cd98a6.png\"></a></p>\n\n<h1>\n<span id=\"結論こんなコードになりました\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E8%AB%96%E3%81%93%E3%82%93%E3%81%AA%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AB%E3%81%AA%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F\"><i class=\"fa fa-link\"></i></a>結論:こんなコードになりました。</h1>\n\n<p>※コードは重要なところ以外は省略しています！</p>\n\n<h3>\n<span id=\"親コンポーネント\" class=\"fragment\"></span><a href=\"#%E8%A6%AA%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>親コンポーネント</h3>\n\n<p>親コンポーネントEditorから子コンポーネントSubmitButtonを呼び出しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">Editor.vue</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"o\">&lt;</span><span class=\"nx\">template</span><span class=\"o\">&gt;</span>\n  <span class=\"c\">&lt;!--</span> <span class=\"nx\">省略</span> <span class=\"o\">--&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">SubmitButton</span> <span class=\"o\">:</span><span class=\"nx\">input</span><span class=\"o\">=</span><span class=\"s2\">\"input\"</span><span class=\"o\">&gt;&lt;</span><span class=\"err\">/SubmitButton&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"err\">/template&gt;</span>\n\n<span class=\"o\">&lt;</span><span class=\"nx\">script</span><span class=\"o\">&gt;</span>\n\n<span class=\"kr\">import</span> <span class=\"nx\">SubmitButton</span> <span class=\"nx\">from</span> <span class=\"s2\">\"@components/parts/buttons/SubmitButton\"</span>\n\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">\"Editor\"</span>\n  <span class=\"nx\">data</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"nx\">input</span><span class=\"o\">:</span> <span class=\"s2\">\"\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"o\">&lt;</span><span class=\"err\">/script&gt;</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">SubmitButton.vue</span></div>\n<div class=\"highlight\"><pre><span></span>\n<span class=\"o\">&lt;</span><span class=\"nx\">template</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">id</span><span class=\"o\">=</span><span class=\"s2\">\"submit\"</span> <span class=\"nx\">v</span><span class=\"o\">-</span><span class=\"nx\">on</span><span class=\"o\">:</span><span class=\"nx\">click</span><span class=\"o\">=</span><span class=\"s2\">\"addFeed\"</span><span class=\"o\">&gt;</span><span class=\"nx\">Submit</span><span class=\"o\">&lt;</span><span class=\"err\">/div&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"err\">/template&gt;</span>\n\n<span class=\"o\">&lt;</span><span class=\"nx\">script</span><span class=\"o\">&gt;</span>\n  <span class=\"kr\">import</span> <span class=\"nx\">axios</span> <span class=\"nx\">from</span> <span class=\"s2\">\"axios\"</span>\n\n    <span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n      <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">'SubmitButton'</span><span class=\"p\">,</span>\n      <span class=\"nx\">props</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">'input'</span><span class=\"p\">],</span>\n      <span class=\"nx\">methods</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">addFeed</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"kd\">let</span> <span class=\"nx\">_this</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n\n          <span class=\"nx\">axios</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s2\">\"http://localhost:3000/feeds\"</span><span class=\"p\">,</span>\n            <span class=\"p\">{</span>\n              <span class=\"nx\">feed</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"nx\">text</span><span class=\"o\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">input</span>\n              <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n          <span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">_this</span><span class=\"p\">.</span><span class=\"nx\">$router</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">({</span> <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"s2\">\"/\"</span><span class=\"p\">})</span>\n          <span class=\"p\">})</span>\n          <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"o\">&lt;</span><span class=\"err\">/script&gt;</span>\n\n</pre></div>\n</div>\n\n<h1>\n<span id=\"ポイント\" class=\"fragment\"></span><a href=\"#%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>ポイント</h1>\n\n<h2>\n<span id=\"親側でv-bind-子側でpropsそしたらthisでとれる\" class=\"fragment\"></span><a href=\"#%E8%A6%AA%E5%81%B4%E3%81%A7v-bind-%E5%AD%90%E5%81%B4%E3%81%A7props%E3%81%9D%E3%81%97%E3%81%9F%E3%82%89this%E3%81%A7%E3%81%A8%E3%82%8C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>親側でv-bind, 子側でprops、そしたらthisでとれる。</h2>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">Feed.vue</span></div>\n<div class=\"highlight\"><pre><span></span> &lt;SubmitButton :input=\"input\"&gt;&lt;/SubmitButton&gt;\n</pre></div>\n</div>\n\n<p>親コンポーネントで子コンポーネントを呼び出しているところで<br>\nv-bindして親コンポーネントとdataであるinputを渡してあげる。<br>\n(<strong>:input=\"input\"</strong>の部分)</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">SubmitButton</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">'SubmitButton'</span><span class=\"p\">,</span>\n  <span class=\"nx\">props</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">'input'</span><span class=\"p\">],</span>\n  <span class=\"nx\">methods</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">addFeed</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">input</span> <span class=\"c1\">//this.inputでアクセスできる！ﾜｯｼｮｲヽ(ﾟ∀ﾟ)ノﾜｯｼｮｲ</span>\n\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>子コンポーネントでpropsを記述すると、<br>\nthis.inputで親のdataにアクセスできるようになってる！</p>\n\n<h1>\n<span id=\"あとがき\" class=\"fragment\"></span><a href=\"#%E3%81%82%E3%81%A8%E3%81%8C%E3%81%8D\"><i class=\"fa fa-link\"></i></a>あとがき</h1>\n\n<p>データバインディングがどうとか、v-bindの挙動だとか細かい話しは正直わかっていません。また随時お勉強次第書き足していきます！</p>\n\n<h1>\n<span id=\"おまけ-全コード2コンポーネント分\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%81%BE%E3%81%91-%E5%85%A8%E3%82%B3%E3%83%BC%E3%83%892%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E5%88%86\"><i class=\"fa fa-link\"></i></a>おまけ: 全コード(2コンポーネント分)</h1>\n\n<p>マークダウンエディタでブログ投稿画面を作成しています。</p>\n\n<p>Vueのことはまだまだわかっていませんが、コンポーネント化という思想はとても好きです。JSが圧倒的に追いやすい。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">Feed.vue</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"o\">&lt;</span><span class=\"nx\">template</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">id</span><span class=\"o\">=</span><span class=\"s2\">\"feed\"</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">id</span><span class=\"o\">=</span><span class=\"s2\">\"markdown-display\"</span> <span class=\"nx\">v</span><span class=\"o\">-</span><span class=\"nx\">html</span><span class=\"o\">=</span><span class=\"s2\">\"compiledMarkdown\"</span><span class=\"o\">&gt;&lt;</span><span class=\"err\">/div&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"err\">/div&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"err\">/template&gt;</span>\n\n<span class=\"o\">&lt;</span><span class=\"nx\">script</span><span class=\"o\">&gt;</span>\n<span class=\"p\">;(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">renderer</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">marked</span><span class=\"p\">.</span><span class=\"nx\">Renderer</span><span class=\"p\">()</span>\n  <span class=\"nx\">renderer</span><span class=\"p\">.</span><span class=\"nx\">code</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">,</span> <span class=\"nx\">language</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'&lt;pre'</span><span class=\"o\">+</span><span class=\"s1\">'&gt;&lt;code class=\"hljs\"&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">hljs</span><span class=\"p\">.</span><span class=\"nx\">highlightAuto</span><span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">).</span><span class=\"nx\">value</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/code&gt;&lt;/pre&gt;'</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 参考サイト: http://phiary.me/marked-js-highlight-js, https://qiita.com/59naga/items/7d46155715416561aa60</span>\n   <span class=\"p\">};</span>\n\n  <span class=\"nx\">marked</span><span class=\"p\">.</span><span class=\"nx\">setOptions</span><span class=\"p\">({</span>\n    <span class=\"nx\">renderer</span><span class=\"o\">:</span> <span class=\"nx\">renderer</span><span class=\"p\">,</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">})();</span>\n\n<span class=\"kr\">import</span> <span class=\"nx\">axios</span> <span class=\"nx\">from</span> <span class=\"s1\">'axios'</span>\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">'Markdown'</span><span class=\"p\">,</span>\n  <span class=\"nx\">data</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"nx\">feed</span><span class=\"o\">:</span> <span class=\"s2\">\"\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">created</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">axios</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:3000/feeds/'</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$route</span><span class=\"p\">.</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">response</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">feed</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">text</span>\n    <span class=\"p\">})</span>\n    <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">e</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">errors</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span>\n    <span class=\"p\">})</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">computed</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">compiledMarkdown</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">marked</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">feed</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">sanitize</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">})</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"o\">&lt;</span><span class=\"err\">/script&gt;</span>\n\n<span class=\"o\">&lt;</span><span class=\"nx\">style</span> <span class=\"nx\">scoped</span><span class=\"o\">&gt;</span>\n<span class=\"err\">#</span><span class=\"nx\">feed</span> <span class=\"p\">{</span>\n  <span class=\"nx\">padding</span><span class=\"o\">:</span> <span class=\"mi\">20</span><span class=\"nx\">px</span> <span class=\"mi\">80</span><span class=\"nx\">px</span><span class=\"p\">;</span>\n  <span class=\"nx\">text</span><span class=\"o\">-</span><span class=\"nx\">align</span><span class=\"o\">:</span> <span class=\"nx\">left</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"o\">&lt;</span><span class=\"err\">/style&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">SubmitButton.vue</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"o\">&lt;</span><span class=\"nx\">template</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">id</span><span class=\"o\">=</span><span class=\"s2\">\"submit\"</span> <span class=\"nx\">v</span><span class=\"o\">-</span><span class=\"nx\">on</span><span class=\"o\">:</span><span class=\"nx\">click</span><span class=\"o\">=</span><span class=\"s2\">\"addFeed\"</span><span class=\"o\">&gt;</span><span class=\"nx\">Submit</span><span class=\"o\">&lt;</span><span class=\"err\">/div&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"err\">/template&gt;</span>\n\n<span class=\"o\">&lt;</span><span class=\"nx\">script</span><span class=\"o\">&gt;</span>\n\n<span class=\"kr\">import</span> <span class=\"nx\">axios</span> <span class=\"nx\">from</span> <span class=\"s2\">\"axios\"</span>\n\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">'SubmitButton'</span><span class=\"p\">,</span>\n  <span class=\"nx\">props</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">'input'</span><span class=\"p\">],</span>\n  <span class=\"nx\">computed</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">compiledMarkdown</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">marked</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">input</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">sanitize</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">})</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">methods</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">addFeed</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kd\">let</span> <span class=\"nx\">_this</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n\n      <span class=\"nx\">axios</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s2\">\"http://localhost:3000/feeds\"</span><span class=\"p\">,</span>\n        <span class=\"p\">{</span>\n          <span class=\"nx\">feed</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">text</span><span class=\"o\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">input</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">_this</span><span class=\"p\">.</span><span class=\"nx\">$router</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">({</span> <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"s2\">\"/\"</span><span class=\"p\">})</span>\n      <span class=\"p\">})</span>\n      <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"o\">&lt;</span><span class=\"err\">/script&gt;</span>\n\n\n<span class=\"o\">&lt;</span><span class=\"nx\">style</span> <span class=\"nx\">scoped</span><span class=\"o\">&gt;</span>\n  <span class=\"err\">#</span><span class=\"nx\">submit</span> <span class=\"p\">{</span>\n    <span class=\"nx\">position</span><span class=\"o\">:</span> <span class=\"nx\">fixed</span><span class=\"p\">;</span>\n    <span class=\"nx\">bottom</span><span class=\"o\">:</span> <span class=\"mi\">20</span><span class=\"nx\">px</span><span class=\"p\">;</span>\n    <span class=\"nx\">right</span><span class=\"o\">:</span> <span class=\"mi\">30</span><span class=\"nx\">px</span><span class=\"p\">;</span>\n    <span class=\"nx\">display</span><span class=\"o\">:</span> <span class=\"nx\">flex</span><span class=\"p\">;</span>\n    <span class=\"nx\">align</span><span class=\"o\">-</span><span class=\"nx\">items</span><span class=\"o\">:</span> <span class=\"nx\">center</span><span class=\"p\">;</span>\n    <span class=\"nx\">justify</span><span class=\"o\">-</span><span class=\"nx\">content</span><span class=\"o\">:</span> <span class=\"nx\">center</span><span class=\"p\">;</span>\n    <span class=\"nx\">width</span><span class=\"o\">:</span> <span class=\"mi\">100</span><span class=\"nx\">px</span><span class=\"p\">;</span>\n    <span class=\"nx\">text</span><span class=\"o\">-</span><span class=\"nx\">align</span><span class=\"o\">:</span> <span class=\"nx\">center</span><span class=\"p\">;</span>\n    <span class=\"nx\">box</span><span class=\"o\">-</span><span class=\"nx\">shadow</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"mi\">2</span><span class=\"nx\">px</span> <span class=\"mi\">5</span><span class=\"nx\">px</span> <span class=\"nx\">rgba</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mf\">0.26</span><span class=\"p\">);</span>\n    <span class=\"nx\">height</span><span class=\"o\">:</span> <span class=\"mi\">40</span><span class=\"nx\">px</span><span class=\"p\">;</span>\n    <span class=\"nx\">cursor</span><span class=\"o\">:</span> <span class=\"nx\">pointer</span><span class=\"p\">;</span>\n    <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"err\">#</span><span class=\"nx\">fff</span><span class=\"p\">;</span>\n    <span class=\"nx\">background</span><span class=\"o\">:</span> <span class=\"err\">#</span><span class=\"mi\">706</span><span class=\"nx\">D7F</span><span class=\"p\">;</span>\n    <span class=\"nx\">border</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"nx\">px</span> <span class=\"nx\">solid</span> <span class=\"nx\">transparent</span><span class=\"p\">;</span>\n    <span class=\"nx\">transition</span><span class=\"o\">:</span> <span class=\"nx\">all</span> <span class=\"p\">.</span><span class=\"mi\">3</span><span class=\"nx\">s</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"err\">#</span><span class=\"nx\">submit</span><span class=\"o\">:</span><span class=\"nx\">hover</span> <span class=\"p\">{</span>\n    <span class=\"nx\">background</span><span class=\"o\">:</span> <span class=\"err\">#</span><span class=\"nx\">fff</span><span class=\"p\">;</span>\n    <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"err\">#</span><span class=\"mi\">706</span><span class=\"nx\">D7F</span><span class=\"p\">;</span>\n    <span class=\"nx\">border</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"nx\">px</span> <span class=\"nx\">solid</span> <span class=\"err\">#</span><span class=\"nx\">D1D9E5</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"o\">&lt;</span><span class=\"err\">/style&gt;</span>\n\n</pre></div>\n</div>\n",
    "body": "\n**※Vue.js初心者です。あしからず。**\nこんな記事をゆっくり更新しています。\n[Vue.js初心者の僕がつまづいたところメモ](https://qiita.com/moriwm77/items/432c33aa188419b89708)\nいつか誰かのお役にたてるようにがんばっていきます。\n\n# 親コンポーネントから子コンポーネントにdataを渡す。\n\nこんな構成でブログの新規投稿画面(Editor)を作成しました。\nGithubっぽいマークダウンで入力して、RailsAPIにテキストを送信します。\nそれにあたり、コンポーネント分割の練習をしてみました。\n\n\n## 実装物\n![component_vue.png](https://qiita-image-store.s3.amazonaws.com/0/176300/e9b0e3da-26a8-52b9-fdf3-c4f556cd98a6.png \"component_vue.png\")\n\n\n# 結論:こんなコードになりました。\n※コードは重要なところ以外は省略しています！\n\n### 親コンポーネント\n親コンポーネントEditorから子コンポーネントSubmitButtonを呼び出しています。\n\n``` js:Editor.vue\n<template>\n  <!-- 省略 -->\n  <SubmitButton :input=\"input\"></SubmitButton>\n</template>\n\n<script>\n\nimport SubmitButton from \"@components/parts/buttons/SubmitButton\"\n\nexport default {\n  name: \"Editor\"\n  data () {\n    return {\n      input: \"\"\n    }\n  }\n}\n\n</script>\n\n```\n\n\n\n\n``` js:SubmitButton.vue\n\n<template>\n  <div id=\"submit\" v-on:click=\"addFeed\">Submit</div>\n</template>\n\n<script>\n  import axios from \"axios\"\n\n\texport default {\n\t  name: 'SubmitButton',\n\t  props: ['input'],\n\t  methods: {\n\t    addFeed(e) {\n\t      let _this = this;\n\t\n\t      axios.post(\"http://localhost:3000/feeds\",\n\t        {\n\t          feed: {\n\t            text: this.input\n\t          }\n\t        }\n\t      ).then(function(res) {\n\t        _this.$router.push({ path: \"/\"})\n\t      })\n\t      e.preventDefault();\n\t    }\n\t  }\n\t}\n</script>\n\n```\n\n\n# ポイント\n## 親側でv-bind, 子側でprops、そしたらthisでとれる。\n\n``` vue:Feed.vue\n <SubmitButton :input=\"input\"></SubmitButton>\n```\n\n親コンポーネントで子コンポーネントを呼び出しているところで\nv-bindして親コンポーネントとdataであるinputを渡してあげる。\n(**:input=\"input\"**の部分)\n\n``` js:SubmitButton\nexport default {\n  name: 'SubmitButton',\n  props: ['input'],\n  methods: {\n    addFeed(e) {\n      this.input //this.inputでアクセスできる！ﾜｯｼｮｲヽ(ﾟ∀ﾟ)ノﾜｯｼｮｲ\n\n    }\n  }\n}\n```\n子コンポーネントでpropsを記述すると、\nthis.inputで親のdataにアクセスできるようになってる！\n\n# あとがき\nデータバインディングがどうとか、v-bindの挙動だとか細かい話しは正直わかっていません。また随時お勉強次第書き足していきます！\n\n# おまけ: 全コード(2コンポーネント分)\n\nマークダウンエディタでブログ投稿画面を作成しています。\n\nVueのことはまだまだわかっていませんが、コンポーネント化という思想はとても好きです。JSが圧倒的に追いやすい。\n\n``` js:Feed.vue\n<template>\n  <div id=\"feed\">\n    <div id=\"markdown-display\" v-html=\"compiledMarkdown\"></div>\n  </div>\n</template>\n\n<script>\n;(function() {\n  var renderer = new marked.Renderer()\n  renderer.code = function(code, language) {\n    return '<pre'+'><code class=\"hljs\">' + hljs.highlightAuto(code).value + '</code></pre>';\n    // 参考サイト: http://phiary.me/marked-js-highlight-js, https://qiita.com/59naga/items/7d46155715416561aa60\n   };\n\n  marked.setOptions({\n    renderer: renderer,\n  });\n})();\n\nimport axios from 'axios'\nexport default {\n  name: 'Markdown',\n  data () {\n    return {\n      feed: \"\"\n    }\n  },\n  created() {\n    axios.get('http://localhost:3000/feeds/' + this.$route.params.id)\n    .then(response => {\n      this.feed = response.data.text\n    })\n    .catch(e => {\n      this.errors.push(e)\n    })\n  },\n  computed: {\n    compiledMarkdown: function() {\n      return marked(this.feed, { sanitize: true })\n    }\n  }\n}\n</script>\n\n<style scoped>\n#feed {\n  padding: 20px 80px;\n  text-align: left;\n}\n</style>\n```\n\n\n``` js:SubmitButton.vue\n<template>\n  <div id=\"submit\" v-on:click=\"addFeed\">Submit</div>\n</template>\n\n<script>\n\nimport axios from \"axios\"\n\nexport default {\n  name: 'SubmitButton',\n  props: ['input'],\n  computed: {\n    compiledMarkdown: function() {\n      return marked(this.input, { sanitize: true })\n    }\n  },\n  methods: {\n    addFeed(e) {\n      let _this = this;\n      console.log(this);\n\n      axios.post(\"http://localhost:3000/feeds\",\n        {\n          feed: {\n            text: this.input\n          }\n        }\n      ).then(function(res) {\n        _this.$router.push({ path: \"/\"})\n      })\n      e.preventDefault();\n    }\n  }\n}\n</script>\n\n\n<style scoped>\n  #submit {\n    position: fixed;\n    bottom: 20px;\n    right: 30px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100px;\n    text-align: center;\n    box-shadow: 0 2px 5px rgba(0,0,0,0.26);\n    height: 40px;\n    cursor: pointer;\n    color: #fff;\n    background: #706D7F;\n    border: 1px solid transparent;\n    transition: all .3s;\n  }\n\n  #submit:hover {\n    background: #fff;\n    color: #706D7F;\n    border: 1px solid #D1D9E5;\n  }\n</style>\n\n```\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-15T17:28:33+09:00",
    "group": null,
    "id": "e430331f810e212a1a6b",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "vue.js2",
        "versions": []
      }
    ],
    "title": "Vue.js 2系で親コンポーネントから子コンポーネントにデータを受け渡す。",
    "updated_at": "2017-11-16T10:40:54+09:00",
    "url": "https://qiita.com/moriwm77/items/e430331f810e212a1a6b",
    "user": {
      "description": "学びと表現をもっともっと楽しくしたい新米Webエンジニア",
      "facebook_id": "",
      "followees_count": 12,
      "followers_count": 1,
      "github_login_name": null,
      "id": "moriwm77",
      "items_count": 7,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 176300,
      "profile_image_url": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=50",
      "twitter_screen_name": null,
      "website_url": ""
    }
  },
  {
    "rendered_body": "\n<h2>\n<span id=\"概要\" class=\"fragment\"></span><a href=\"#%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>概要</h2>\n\n<p>VeeValidateで、入れ子のフォームを作る方法を解説します。</p>\n\n<p>せっかちな方は以下のVeeValidate公式ドキュメントを読むのが早いです。<br>\n<a href=\"http://vee-validate.logaretm.com/examples.html#event-bus-example\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://vee-validate.logaretm.com/examples.html#event-bus-example</a></p>\n\n<h2>\n<span id=\"warning-注意-warning\" class=\"fragment\"></span><a href=\"#warning-%E6%B3%A8%E6%84%8F-warning\"><i class=\"fa fa-link\"></i></a><img alt=\":warning:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/26a0-fe0f.png\" title=\":warning:\" width=\"20\"> 注意 <img alt=\":warning:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/26a0-fe0f.png\" title=\":warning:\" width=\"20\">\n</h2>\n\n<p>※2017/11/13追記</p>\n\n<p>下記サンプルコードは、子コンポーネントのフィールドに正常な値を入力しても、即時にバリデーションエラーが解消されないという問題があります。</p>\n\n<p>EventBusパターンによる解決を試みましたが、なかなか難しいです。</p>\n\n<p>ややdirty hackなきらいはありますが、 <a href=\"https://jp.vuejs.org/v2/api/index.html#provide-inject\" rel=\"nofollow noopener\" target=\"_blank\">inject</a> を使って親の <code>$validator</code> を子コンポーネントに注入すれば、本記事で提示している問題は解消されます。</p>\n\n<p>参考: <a href=\"https://github.com/baianat/vee-validate/issues/631\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/baianat/vee-validate/issues/631</a></p>\n\n<p>この場合、MemberFormとOptionFormにそれぞれ <code>inject: ['$validator'],</code> を追加するだけです。</p>\n\n<h2>\n<span id=\"サンプルコード\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>サンプルコード</h2>\n\n<p>あなたが通販サイトを作っていて、そのECサイトの購入フォームでは、以下の仕様に基づいて入力を要求するとします。</p>\n\n<ul>\n<li>必須項目（会員情報）\n\n<ul>\n<li>氏名</li>\n<li>メールアドレス</li>\n<li>電話番号</li>\n<li>住所</li>\n</ul>\n</li>\n<li>選択項目\n\n<ul>\n<li>配送先住所（会員の住所と、配送先が異なる場合のみ使用）</li>\n</ul>\n</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/844731ccf0e8f15e252fdf81f693f9f27e9b98fb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f33333435302f34656664643665322d663536382d313339392d613133662d3962363362383033396330642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"252\" alt=\"Screen Shot 2017-11-12 at 0.18.24.png\" src=\"https://camo.qiitausercontent.com/844731ccf0e8f15e252fdf81f693f9f27e9b98fb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f33333435302f34656664643665322d663536382d313339392d613133662d3962363362383033396330642e706e67\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/33450/4efdd6e2-f568-1399-a13f-9b63b8039c0d.png\"></a></p>\n\n<p>「Ship to different address」にチェックを入れると、別の住所の入力欄が表示されるようになっています。</p>\n\n<p>未入力の状態で送信ボタンを押すと、バリデーションエラーが表示されます。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/0b4027abc5320501f4cc5b6cb8023a9f490ab830/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f33333435302f66393163316436302d643664322d646661662d356432342d6164646566316533613938342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"369\" alt=\"Screen Shot 2017-11-12 at 0.39.45.png\" src=\"https://camo.qiitausercontent.com/0b4027abc5320501f4cc5b6cb8023a9f490ab830/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f33333435302f66393163316436302d643664322d646661662d356432342d6164646566316533613938342e706e67\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/33450/f91c1d60-d6d2-dfaf-5d24-addef1e3a984.png\"></a></p>\n\n<p>このサンプルコードの基本的な構成は、<a href=\"https://github.com/vuejs/vue-cli\" rel=\"nofollow noopener\" target=\"_blank\">vue-cli</a>で<code>vue init webpack</code>したものです。また、本記事で紹介したコードは<a href=\"https://github.com/ryo-utsunomiya/vee-validate-nested-form\" rel=\"nofollow noopener\" target=\"_blank\">GitHub</a>でも公開しています。</p>\n\n<p>また、バリデーションのために<a href=\"https://github.com/baianat/vee-validate\" rel=\"nofollow noopener\" target=\"_blank\">vee-validate</a>を導入しています。</p>\n\n<p>EntryFormコンポーネントのコードは以下のようになっています。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">action</span><span class=\"o\">=</span><span class=\"s\">\"\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">\"name\"</span><span class=\"p\">&gt;</span>Name<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">input</span>\n        <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text\"</span>\n        <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"name\"</span>\n        <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"name\"</span>\n        <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"name\"</span>\n        <span class=\"na\">v-validate</span><span class=\"o\">=</span><span class=\"s\">\"'required'\"</span>\n      <span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">\"email\"</span><span class=\"p\">&gt;</span>Email<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">input</span>\n        <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"email\"</span>\n        <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"email\"</span>\n        <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"email\"</span>\n        <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"email\"</span>\n        <span class=\"na\">v-validate</span><span class=\"o\">=</span><span class=\"s\">\"'required|email'\"</span>\n      <span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">\"tel\"</span><span class=\"p\">&gt;</span>Tel<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">input</span>\n        <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"tel\"</span>\n        <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"tel\"</span>\n        <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"tel\"</span>\n        <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"tel\"</span>\n        <span class=\"na\">v-validate</span><span class=\"o\">=</span><span class=\"s\">\"'required'\"</span>\n      <span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">\"address\"</span><span class=\"p\">&gt;</span>Address<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">input</span>\n        <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text\"</span>\n        <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"address\"</span>\n        <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"address\"</span>\n        <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"address\"</span>\n        <span class=\"na\">v-validate</span><span class=\"o\">=</span><span class=\"s\">\"'required'\"</span>\n      <span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">\"shipToDifferentAddress\"</span><span class=\"p\">&gt;</span>Ship to different address<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">input</span>\n        <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"checkbox\"</span>\n        <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"shipToDifferentAddress\"</span>\n        <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"shipToDifferentAddress\"</span>\n        <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"shipToDifferentAddress\"</span>\n      <span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">v-show</span><span class=\"o\">=</span><span class=\"s\">\"shipToDifferentAddress\"</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">\"shippingAddress\"</span><span class=\"p\">&gt;</span>Shipping Address<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text\"</span>\n             <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"shippingAddress\"</span>\n             <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"shippingAddress\"</span>\n             <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"shippingAddress\"</span>\n             <span class=\"na\">v-validate</span><span class=\"o\">=</span><span class=\"s\">\"'required'\"</span>\n      <span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">v-show</span><span class=\"o\">=</span><span class=\"s\">\"errors.any()\"</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">v-for</span><span class=\"o\">=</span><span class=\"s\">\"error in errors.collect()\"</span><span class=\"p\">&gt;</span>{{ error }}<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">\"submit\"</span> <span class=\"err\">@</span><span class=\"na\">click</span><span class=\"err\">.</span><span class=\"na\">prevent</span><span class=\"o\">=</span><span class=\"s\">\"doValidation\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"cm\">/* eslint-disable no-console */</span>\n\n  <span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">'entry-form'</span><span class=\"p\">,</span>\n    <span class=\"nx\">data</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n        <span class=\"nx\">email</span><span class=\"o\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n        <span class=\"nx\">tel</span><span class=\"o\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n        <span class=\"nx\">address</span><span class=\"o\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n        <span class=\"nx\">shipToDifferentAddress</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n        <span class=\"nx\">shippingAddress</span><span class=\"o\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n      <span class=\"p\">};</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">methods</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">doValidation</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$validator</span><span class=\"p\">.</span><span class=\"nx\">validateAll</span><span class=\"p\">();</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">errors</span><span class=\"p\">.</span><span class=\"nx\">any</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n          <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'cancel submission'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n          <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'do submission'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre></div></div>\n\n<p>ここでは、簡略化のためにスタイルの制御などを省いていますが、実際のアプリケーションではさらに複雑な表現が必要とされることもあるでしょう。その場合、コードは肥大化していき、保守性は低下していきます。</p>\n\n<h3>\n<span id=\"リファクタリングとそれによって生じる問題\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%A8%E3%81%9D%E3%82%8C%E3%81%AB%E3%82%88%E3%81%A3%E3%81%A6%E7%94%9F%E3%81%98%E3%82%8B%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>リファクタリングと、それによって生じる問題</h3>\n\n<p>保守性向上のため、入力フォームを会員情報と配送オプションに分割してみましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">action</span><span class=\"o\">=</span><span class=\"s\">\"\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">member-form</span> <span class=\"na\">:member</span><span class=\"o\">=</span><span class=\"s\">\"member\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">member-form</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">option-form</span> <span class=\"na\">:option</span><span class=\"o\">=</span><span class=\"s\">\"option\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">option-form</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">v-show</span><span class=\"o\">=</span><span class=\"s\">\"errors.any()\"</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">v-for</span><span class=\"o\">=</span><span class=\"s\">\"error in errors.collect()\"</span><span class=\"p\">&gt;</span>{{ error }}<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">\"submit\"</span> <span class=\"err\">@</span><span class=\"na\">click</span><span class=\"err\">.</span><span class=\"na\">prevent</span><span class=\"o\">=</span><span class=\"s\">\"submit\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"cm\">/* eslint-disable no-console */</span>\n  <span class=\"kr\">import</span> <span class=\"nx\">MemberForm</span> <span class=\"nx\">from</span> <span class=\"s1\">'./MemberForm'</span><span class=\"p\">;</span>\n  <span class=\"kr\">import</span> <span class=\"nx\">OptionForm</span> <span class=\"nx\">from</span> <span class=\"s1\">'./OptionForm'</span><span class=\"p\">;</span>\n\n  <span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">'entry-form'</span><span class=\"p\">,</span>\n    <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">MemberForm</span><span class=\"p\">,</span>\n      <span class=\"nx\">OptionForm</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">data</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"nx\">member</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n          <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n          <span class=\"nx\">email</span><span class=\"o\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n          <span class=\"nx\">tel</span><span class=\"o\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n          <span class=\"nx\">address</span><span class=\"o\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"nx\">option</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n          <span class=\"nx\">shipToDifferentAddress</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n          <span class=\"nx\">shippingAddress</span><span class=\"o\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n      <span class=\"p\">};</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">methods</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">submit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$validator</span><span class=\"p\">.</span><span class=\"nx\">validateAll</span><span class=\"p\">();</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">errors</span><span class=\"p\">.</span><span class=\"nx\">any</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n          <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'cancel submission'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n          <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'do submission'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">\"name\"</span><span class=\"p\">&gt;</span>Name<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">input</span>\n        <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text\"</span>\n        <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"name\"</span>\n        <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"name\"</span>\n        <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"member.name\"</span>\n        <span class=\"na\">v-validate</span><span class=\"o\">=</span><span class=\"s\">\"'required'\"</span>\n      <span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">\"email\"</span><span class=\"p\">&gt;</span>Email<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">input</span>\n        <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"email\"</span>\n        <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"email\"</span>\n        <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"email\"</span>\n        <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"member.email\"</span>\n        <span class=\"na\">v-validate</span><span class=\"o\">=</span><span class=\"s\">\"'required|email'\"</span>\n      <span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">\"tel\"</span><span class=\"p\">&gt;</span>Tel<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">input</span>\n        <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"tel\"</span>\n        <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"tel\"</span>\n        <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"tel\"</span>\n        <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"member.tel\"</span>\n        <span class=\"na\">v-validate</span><span class=\"o\">=</span><span class=\"s\">\"'required'\"</span>\n      <span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">\"address\"</span><span class=\"p\">&gt;</span>Address<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">input</span>\n        <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text\"</span>\n        <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"address\"</span>\n        <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"address\"</span>\n        <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"member.address\"</span>\n        <span class=\"na\">v-validate</span><span class=\"o\">=</span><span class=\"s\">\"'required'\"</span>\n      <span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">'member-form'</span><span class=\"p\">,</span>\n    <span class=\"nx\">props</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"s1\">'member'</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">\"shipToDifferentAddress\"</span><span class=\"p\">&gt;</span>Ship to different address<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">input</span>\n        <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"checkbox\"</span>\n        <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"shipToDifferentAddress\"</span>\n        <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"option.shipToDifferentAddress\"</span>\n        <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"shipToDifferentAddress\"</span>\n      <span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">v-show</span><span class=\"o\">=</span><span class=\"s\">\"option.shipToDifferentAddress\"</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">\"shippingAddress\"</span><span class=\"p\">&gt;</span>Shipping Address<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">input</span>\n        <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text\"</span>\n        <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"shippingAddress\"</span>\n        <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"shippingAddress\"</span>\n        <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"option.shippingAddress\"</span>\n        <span class=\"na\">v-validate</span><span class=\"o\">=</span><span class=\"s\">\"'required'\"</span>\n      <span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">'option-form'</span><span class=\"p\">,</span>\n    <span class=\"nx\">props</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"s1\">'option'</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre></div></div>\n\n<p>コード量は増えましたが、コンポーネントが細かく分かれて見通しは良くなったと思います。しかし、このフォームには、バリデーションが動作しないという重大な問題があります！</p>\n\n<p>VeeValidateのバリデーションはコンポーネント単位で実行されます。そのため、送信前の一括バリデーションのような処理を実装しようとすると、子コンポーネントのバリデータを何らかの手段で実行する必要があります。</p>\n\n<h3>\n<span id=\"eventbusパターン\" class=\"fragment\"></span><a href=\"#eventbus%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3\"><i class=\"fa fa-link\"></i></a>EventBusパターン</h3>\n\n<p>Vue.jsがコンポーネント間通信の方法として用意しているのが、<a href=\"https://jp.vuejs.org/v2/guide/events.html\" rel=\"nofollow noopener\" target=\"_blank\">イベントシステム</a>です。これを活用することで、コンポーネントをまたがったバリデーションを実装することができます。この手法は、冒頭で記述したVeeValidateのドキュメントにも紹介されています。<br>\n<a href=\"http://vee-validate.logaretm.com/examples.html#event-bus-example\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://vee-validate.logaretm.com/examples.html#event-bus-example</a></p>\n\n<p>まず、イベントを伝達するバス(EventBus)として、Vueインスタンスを用意します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// EventBus.js</span>\n<span class=\"kr\">import</span> <span class=\"nx\">Vue</span> <span class=\"nx\">from</span> <span class=\"s1\">'vue'</span><span class=\"p\">;</span>\n\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">();</span>\n</pre></div></div>\n\n<p>次に、このイベントバスに<code>validate</code>イベントを発生させるコードを、バリデーションの呼び出し側に追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"diff\"><div class=\"highlight\"><pre><span></span><span class=\"gh\">diff --git a/src/components/EntryForm.vue b/src/components/EntryForm.vue</span>\n<span class=\"gh\">index db33dda..0dec669 100644</span>\n<span class=\"gd\">--- a/src/components/EntryForm.vue</span>\n<span class=\"gi\">+++ b/src/components/EntryForm.vue</span>\n<span class=\"gu\">@@ -10,6 +10,7 @@</span>\n &lt;/template&gt;\n &lt;script&gt;\n   /* eslint-disable no-console */\n<span class=\"gi\">+  import EventBus from '../EventBus';</span>\n   import MemberForm from './MemberForm';\n   import OptionForm from './OptionForm';\n\n<span class=\"gu\">@@ -35,7 +36,10 @@</span>\n     },\n     methods: {\n       submit() {\n<span class=\"gi\">+        this.errors.clear();</span>\n         this.$validator.validateAll();\n<span class=\"gi\">+        EventBus.$emit('validate', this.errors);</span>\n<span class=\"gi\">+</span>\n         if (this.errors.any()) {\n           console.log('cancel submission');\n         } else {\n</pre></div></div>\n\n<p>最後に、<code>validate</code>イベントに反応するコードを実装します。こちらは、コードの重複を避けるため<a href=\"https://jp.vuejs.org/v2/guide/mixins.html\" rel=\"nofollow noopener\" target=\"_blank\">mixin</a>で実装すると良いでしょう。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// mixins/NestedValidator.js</span>\n<span class=\"kr\">import</span> <span class=\"nx\">EventBus</span> <span class=\"nx\">from</span> <span class=\"s1\">'../EventBus'</span><span class=\"p\">;</span>\n\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"nx\">mounted</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">EventBus</span><span class=\"p\">.</span><span class=\"nx\">$on</span><span class=\"p\">(</span><span class=\"s1\">'validate'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">errorBag</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$validator</span><span class=\"p\">.</span><span class=\"nx\">validateAll</span><span class=\"p\">();</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">errors</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">errorBag</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">};</span>\n</pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"diff\"><div class=\"highlight\"><pre><span></span><span class=\"gh\">diff --git a/src/components/MemberForm.vue b/src/components/MemberForm.vue</span>\n<span class=\"gh\">index 392f9e2..fed96a5 100644</span>\n<span class=\"gd\">--- a/src/components/MemberForm.vue</span>\n<span class=\"gi\">+++ b/src/components/MemberForm.vue</span>\n<span class=\"gu\">@@ -43,8 +43,11 @@</span>\n   &lt;/div&gt;\n &lt;/template&gt;\n &lt;script&gt;\n<span class=\"gi\">+  import NestedValidator from '../mixins/NestedValidator';</span>\n<span class=\"gi\">+</span>\n   export default {\n     name: 'member-form',\n<span class=\"gi\">+    mixins: [NestedValidator],</span>\n     props: [\n       'member',\n     ],\n</pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"diff\"><div class=\"highlight\"><pre><span></span><span class=\"gh\">diff --git a/src/components/OptionForm.vue b/src/components/OptionForm.vue</span>\n<span class=\"gh\">index da440a7..9f530d5 100644</span>\n<span class=\"gd\">--- a/src/components/OptionForm.vue</span>\n<span class=\"gi\">+++ b/src/components/OptionForm.vue</span>\n<span class=\"gu\">@@ -9,7 +9,7 @@</span>\n         id=\"shipToDifferentAddress\"\n       &gt;\n     &lt;/div&gt;\n<span class=\"gd\">-    &lt;div v-show=\"option.shipToDifferentAddress\"&gt;</span>\n<span class=\"gi\">+    &lt;div v-if=\"option.shipToDifferentAddress\"&gt;</span>\n       &lt;label for=\"shippingAddress\"&gt;Shipping Address&lt;/label&gt;\n       &lt;input\n         type=\"text\"\n<span class=\"gu\">@@ -22,8 +22,11 @@</span>\n   &lt;/div&gt;\n &lt;/template&gt;\n &lt;script&gt;\n<span class=\"gi\">+  import NestedValidator from '../mixins/NestedValidator';</span>\n<span class=\"gi\">+</span>\n   export default {\n     name: 'option-form',\n<span class=\"gi\">+    mixins: [NestedValidator],</span>\n     props: [\n       'option',\n     ],\n</pre></div></div>\n\n<p>これで、従来と同様、バリデーションエラーが表示されるようになります！</p>\n\n<h2>\n<span id=\"別の設計方針\" class=\"fragment\"></span><a href=\"#%E5%88%A5%E3%81%AE%E8%A8%AD%E8%A8%88%E6%96%B9%E9%87%9D\"><i class=\"fa fa-link\"></i></a>別の設計方針</h2>\n\n<p>ここまで、親コンポーネントのバリデーション実行に合わせて、子コンポーネントのバリデーションを実行する、という設計で実装しました。</p>\n\n<p>より柔軟な設計としては、以下のような方針も考えられます。</p>\n\n<ul>\n<li>親コンポーネントは、1つ以上のバリデータを持つ</li>\n<li>子コンポーネントは、任意のタイミングで自身のバリデータを親コンポーネントのバリデータに追加・削除できる</li>\n</ul>\n\n<p>この方針の場合、以下のような実装になります。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// EntryForm.vue</span>\n    <span class=\"c1\">// バリデータのコレクションを用意し、バリデータの追加・削除イベントに対応するイベントハンドラを定義</span>\n    <span class=\"nx\">created</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">validators</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$validator</span><span class=\"p\">];</span>\n      <span class=\"nx\">EventBus</span><span class=\"p\">.</span><span class=\"nx\">$on</span><span class=\"p\">(</span><span class=\"s1\">'add-validator'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">validator</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kr\">const</span> <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">validators</span><span class=\"p\">.</span><span class=\"nx\">findIndex</span><span class=\"p\">(</span><span class=\"nx\">v</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">v</span> <span class=\"o\">===</span> <span class=\"nx\">validator</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">index</span> <span class=\"o\">===</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">validators</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">validator</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">});</span>\n      <span class=\"nx\">EventBus</span><span class=\"p\">.</span><span class=\"nx\">$on</span><span class=\"p\">(</span><span class=\"s1\">'remove-validator'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">validator</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kr\">const</span> <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">validators</span><span class=\"p\">.</span><span class=\"nx\">findIndex</span><span class=\"p\">(</span><span class=\"nx\">v</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">v</span> <span class=\"o\">===</span> <span class=\"nx\">validator</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">index</span> <span class=\"o\">!==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">validators</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">(</span><span class=\"nx\">index</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">},</span>\n\n    <span class=\"nx\">methods</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 全てのバリデーションを実行するメソッド</span>\n      <span class=\"nx\">validateAll</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">errors</span><span class=\"p\">.</span><span class=\"nx\">clear</span><span class=\"p\">();</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">validators</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"nx\">validator</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n          <span class=\"nx\">validator</span><span class=\"p\">.</span><span class=\"nx\">validateAll</span><span class=\"p\">();</span>\n          <span class=\"nx\">validator</span><span class=\"p\">.</span><span class=\"nx\">errors</span><span class=\"p\">.</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">errors</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n          <span class=\"p\">});</span>\n        <span class=\"p\">});</span>\n      <span class=\"p\">},</span>\n</pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// mixins/NestedValidator</span>\n  <span class=\"nx\">created</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// EntryForm.created() より後に実行するために、$nextTick()で1テンポ遅らせる</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$nextTick</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">EventBus</span><span class=\"p\">.</span><span class=\"nx\">$emit</span><span class=\"p\">(</span><span class=\"s1\">'add-validator'</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$validator</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">},</span>\n  <span class=\"c1\">// v-if でコンポーネントが消去されたときにバリデータを取り除く</span>\n  <span class=\"nx\">beforeDestroy</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">EventBus</span><span class=\"p\">.</span><span class=\"nx\">$emit</span><span class=\"p\">(</span><span class=\"s1\">'remove-validator'</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$validator</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span>\n</pre></div></div>\n\n<p>VeeValidate自身は入れ子のフォームに対応する機能を持ちませんが、Vueのイベントを活用することで、入れ子のフォームでもバリデーションを機能させることができます。</p>\n",
    "body": "## 概要\n\nVeeValidateで、入れ子のフォームを作る方法を解説します。\n\nせっかちな方は以下のVeeValidate公式ドキュメントを読むのが早いです。\nhttp://vee-validate.logaretm.com/examples.html#event-bus-example\n\n## :warning: 注意 :warning: \n\n※2017/11/13追記\n\n下記サンプルコードは、子コンポーネントのフィールドに正常な値を入力しても、即時にバリデーションエラーが解消されないという問題があります。\n\nEventBusパターンによる解決を試みましたが、なかなか難しいです。\n\nややdirty hackなきらいはありますが、 [inject](https://jp.vuejs.org/v2/api/index.html#provide-inject) を使って親の `$validator` を子コンポーネントに注入すれば、本記事で提示している問題は解消されます。\n\n参考: https://github.com/baianat/vee-validate/issues/631\n\nこの場合、MemberFormとOptionFormにそれぞれ `inject: ['$validator'],` を追加するだけです。\n\n## サンプルコード\n\nあなたが通販サイトを作っていて、そのECサイトの購入フォームでは、以下の仕様に基づいて入力を要求するとします。\n\n- 必須項目（会員情報）\n    - 氏名\n    - メールアドレス\n    - 電話番号\n    - 住所\n- 選択項目\n    - 配送先住所（会員の住所と、配送先が異なる場合のみ使用）\n\n<img width=\"252\" alt=\"Screen Shot 2017-11-12 at 0.18.24.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/33450/4efdd6e2-f568-1399-a13f-9b63b8039c0d.png\">\n\n「Ship to different address」にチェックを入れると、別の住所の入力欄が表示されるようになっています。\n\n未入力の状態で送信ボタンを押すと、バリデーションエラーが表示されます。\n\n<img width=\"369\" alt=\"Screen Shot 2017-11-12 at 0.39.45.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/33450/f91c1d60-d6d2-dfaf-5d24-addef1e3a984.png\">\n\nこのサンプルコードの基本的な構成は、[vue-cli](https://github.com/vuejs/vue-cli)で`vue init webpack`したものです。また、本記事で紹介したコードは[GitHub](https://github.com/ryo-utsunomiya/vee-validate-nested-form)でも公開しています。\n\nまた、バリデーションのために[vee-validate](https://github.com/baianat/vee-validate)を導入しています。\n\nEntryFormコンポーネントのコードは以下のようになっています。\n\n```html\n<template>\n  <form action=\"\">\n    <div>\n      <label for=\"name\">Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        id=\"name\"\n        v-model=\"name\"\n        v-validate=\"'required'\"\n      >\n    </div>\n    <div>\n      <label for=\"email\">Email</label>\n      <input\n        type=\"email\"\n        name=\"email\"\n        id=\"email\"\n        v-model=\"email\"\n        v-validate=\"'required|email'\"\n      >\n    </div>\n    <div>\n      <label for=\"tel\">Tel</label>\n      <input\n        type=\"tel\"\n        name=\"tel\"\n        id=\"tel\"\n        v-model=\"tel\"\n        v-validate=\"'required'\"\n      >\n    </div>\n    <div>\n      <label for=\"address\">Address</label>\n      <input\n        type=\"text\"\n        name=\"address\"\n        id=\"address\"\n        v-model=\"address\"\n        v-validate=\"'required'\"\n      >\n    </div>\n    <div>\n      <label for=\"shipToDifferentAddress\">Ship to different address</label>\n      <input\n        type=\"checkbox\"\n        name=\"shipToDifferentAddress\"\n        v-model=\"shipToDifferentAddress\"\n        id=\"shipToDifferentAddress\"\n      >\n    </div>\n    <div v-show=\"shipToDifferentAddress\">\n      <label for=\"shippingAddress\">Shipping Address</label>\n      <input type=\"text\"\n             name=\"shippingAddress\"\n             id=\"shippingAddress\"\n             v-model=\"shippingAddress\"\n             v-validate=\"'required'\"\n      >\n    </div>\n    <div v-show=\"errors.any()\">\n      <p v-for=\"error in errors.collect()\">{{ error }}</p>\n    </div>\n    <input type=\"submit\" value=\"submit\" @click.prevent=\"doValidation\">\n  </form>\n</template>\n<script>\n  /* eslint-disable no-console */\n\n  export default {\n    name: 'entry-form',\n    data() {\n      return {\n        name: '',\n        email: '',\n        tel: '',\n        address: '',\n        shipToDifferentAddress: false,\n        shippingAddress: '',\n      };\n    },\n    methods: {\n      doValidation() {\n        this.$validator.validateAll();\n        if (this.errors.any()) {\n          console.log('cancel submission');\n        } else {\n          console.log('do submission');\n        }\n      },\n    },\n  };\n</script>\n```\n\nここでは、簡略化のためにスタイルの制御などを省いていますが、実際のアプリケーションではさらに複雑な表現が必要とされることもあるでしょう。その場合、コードは肥大化していき、保守性は低下していきます。\n\n### リファクタリングと、それによって生じる問題\n\n保守性向上のため、入力フォームを会員情報と配送オプションに分割してみましょう。\n\n```html\n<template>\n  <form action=\"\">\n    <member-form :member=\"member\"></member-form>\n    <option-form :option=\"option\"></option-form>\n    <div v-show=\"errors.any()\">\n      <p v-for=\"error in errors.collect()\">{{ error }}</p>\n    </div>\n    <input type=\"submit\" value=\"submit\" @click.prevent=\"submit\">\n  </form>\n</template>\n<script>\n  /* eslint-disable no-console */\n  import MemberForm from './MemberForm';\n  import OptionForm from './OptionForm';\n\n  export default {\n    name: 'entry-form',\n    components: {\n      MemberForm,\n      OptionForm,\n    },\n    data() {\n      return {\n        member: {\n          name: '',\n          email: '',\n          tel: '',\n          address: '',\n        },\n        option: {\n          shipToDifferentAddress: false,\n          shippingAddress: '',\n        },\n      };\n    },\n    methods: {\n      submit() {\n        this.$validator.validateAll();\n        if (this.errors.any()) {\n          console.log('cancel submission');\n        } else {\n          console.log('do submission');\n        }\n      },\n    },\n  };\n</script>\n```\n\n```html\n<template>\n  <div>\n    <div>\n      <label for=\"name\">Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        id=\"name\"\n        v-model=\"member.name\"\n        v-validate=\"'required'\"\n      >\n    </div>\n    <div>\n      <label for=\"email\">Email</label>\n      <input\n        type=\"email\"\n        name=\"email\"\n        id=\"email\"\n        v-model=\"member.email\"\n        v-validate=\"'required|email'\"\n      >\n    </div>\n    <div>\n      <label for=\"tel\">Tel</label>\n      <input\n        type=\"tel\"\n        name=\"tel\"\n        id=\"tel\"\n        v-model=\"member.tel\"\n        v-validate=\"'required'\"\n      >\n    </div>\n    <div>\n      <label for=\"address\">Address</label>\n      <input\n        type=\"text\"\n        name=\"address\"\n        id=\"address\"\n        v-model=\"member.address\"\n        v-validate=\"'required'\"\n      >\n    </div>\n  </div>\n</template>\n<script>\n  export default {\n    name: 'member-form',\n    props: [\n      'member',\n    ],\n  };\n</script>\n```\n\n```html\n<template>\n  <div>\n    <div>\n      <label for=\"shipToDifferentAddress\">Ship to different address</label>\n      <input\n        type=\"checkbox\"\n        name=\"shipToDifferentAddress\"\n        v-model=\"option.shipToDifferentAddress\"\n        id=\"shipToDifferentAddress\"\n      >\n    </div>\n    <div v-show=\"option.shipToDifferentAddress\">\n      <label for=\"shippingAddress\">Shipping Address</label>\n      <input\n        type=\"text\"\n        name=\"shippingAddress\"\n        id=\"shippingAddress\"\n        v-model=\"option.shippingAddress\"\n        v-validate=\"'required'\"\n      >\n    </div>\n  </div>\n</template>\n<script>\n  export default {\n    name: 'option-form',\n    props: [\n      'option',\n    ],\n  };\n</script>\n```\n\nコード量は増えましたが、コンポーネントが細かく分かれて見通しは良くなったと思います。しかし、このフォームには、バリデーションが動作しないという重大な問題があります！\n\nVeeValidateのバリデーションはコンポーネント単位で実行されます。そのため、送信前の一括バリデーションのような処理を実装しようとすると、子コンポーネントのバリデータを何らかの手段で実行する必要があります。\n\n### EventBusパターン\n\nVue.jsがコンポーネント間通信の方法として用意しているのが、[イベントシステム](https://jp.vuejs.org/v2/guide/events.html)です。これを活用することで、コンポーネントをまたがったバリデーションを実装することができます。この手法は、冒頭で記述したVeeValidateのドキュメントにも紹介されています。\nhttp://vee-validate.logaretm.com/examples.html#event-bus-example\n\nまず、イベントを伝達するバス(EventBus)として、Vueインスタンスを用意します。\n\n```js\n// EventBus.js\nimport Vue from 'vue';\n\nexport default new Vue();\n```\n\n次に、このイベントバスに`validate`イベントを発生させるコードを、バリデーションの呼び出し側に追加します。\n\n```diff\ndiff --git a/src/components/EntryForm.vue b/src/components/EntryForm.vue\nindex db33dda..0dec669 100644\n--- a/src/components/EntryForm.vue\n+++ b/src/components/EntryForm.vue\n@@ -10,6 +10,7 @@\n </template>\n <script>\n   /* eslint-disable no-console */\n+  import EventBus from '../EventBus';\n   import MemberForm from './MemberForm';\n   import OptionForm from './OptionForm';\n\n@@ -35,7 +36,10 @@\n     },\n     methods: {\n       submit() {\n+        this.errors.clear();\n         this.$validator.validateAll();\n+        EventBus.$emit('validate', this.errors);\n+\n         if (this.errors.any()) {\n           console.log('cancel submission');\n         } else {\n```\n\n最後に、`validate`イベントに反応するコードを実装します。こちらは、コードの重複を避けるため[mixin](https://jp.vuejs.org/v2/guide/mixins.html)で実装すると良いでしょう。\n\n```js\n// mixins/NestedValidator.js\nimport EventBus from '../EventBus';\n\nexport default {\n  mounted() {\n    EventBus.$on('validate', (errorBag) => {\n      this.$validator.validateAll();\n      this.errors.items.forEach((error) => {\n        errorBag.add(error);\n      });\n    });\n  },\n};\n```\n\n```diff\ndiff --git a/src/components/MemberForm.vue b/src/components/MemberForm.vue\nindex 392f9e2..fed96a5 100644\n--- a/src/components/MemberForm.vue\n+++ b/src/components/MemberForm.vue\n@@ -43,8 +43,11 @@\n   </div>\n </template>\n <script>\n+  import NestedValidator from '../mixins/NestedValidator';\n+\n   export default {\n     name: 'member-form',\n+    mixins: [NestedValidator],\n     props: [\n       'member',\n     ],\n```\n\n```diff\ndiff --git a/src/components/OptionForm.vue b/src/components/OptionForm.vue\nindex da440a7..9f530d5 100644\n--- a/src/components/OptionForm.vue\n+++ b/src/components/OptionForm.vue\n@@ -9,7 +9,7 @@\n         id=\"shipToDifferentAddress\"\n       >\n     </div>\n-    <div v-show=\"option.shipToDifferentAddress\">\n+    <div v-if=\"option.shipToDifferentAddress\">\n       <label for=\"shippingAddress\">Shipping Address</label>\n       <input\n         type=\"text\"\n@@ -22,8 +22,11 @@\n   </div>\n </template>\n <script>\n+  import NestedValidator from '../mixins/NestedValidator';\n+\n   export default {\n     name: 'option-form',\n+    mixins: [NestedValidator],\n     props: [\n       'option',\n     ],\n```\n\nこれで、従来と同様、バリデーションエラーが表示されるようになります！\n\n## 別の設計方針\n\nここまで、親コンポーネントのバリデーション実行に合わせて、子コンポーネントのバリデーションを実行する、という設計で実装しました。\n\nより柔軟な設計としては、以下のような方針も考えられます。\n\n- 親コンポーネントは、1つ以上のバリデータを持つ\n- 子コンポーネントは、任意のタイミングで自身のバリデータを親コンポーネントのバリデータに追加・削除できる\n\nこの方針の場合、以下のような実装になります。\n\n```js\n// EntryForm.vue\n    // バリデータのコレクションを用意し、バリデータの追加・削除イベントに対応するイベントハンドラを定義\n    created() {\n      this.validators = [this.$validator];\n      EventBus.$on('add-validator', (validator) => {\n        const index = this.validators.findIndex(v => v === validator);\n        if (index === -1) {\n          this.validators.push(validator);\n        }\n      });\n      EventBus.$on('remove-validator', (validator) => {\n        const index = this.validators.findIndex(v => v === validator);\n        if (index !== -1) {\n          this.validators.splice(index, 1);\n        }\n      });\n    },\n\n    methods: {\n      // 全てのバリデーションを実行するメソッド\n      validateAll() {\n        this.errors.clear();\n        this.validators.forEach((validator) => {\n          validator.validateAll();\n          validator.errors.items.forEach((error) => {\n            this.errors.add(error);\n          });\n        });\n      },\n```\n\n```js\n// mixins/NestedValidator\n  created() {\n    // EntryForm.created() より後に実行するために、$nextTick()で1テンポ遅らせる\n    this.$nextTick(() => {\n      EventBus.$emit('add-validator', this.$validator);\n    });\n  },\n  // v-if でコンポーネントが消去されたときにバリデータを取り除く\n  beforeDestroy() {\n    EventBus.$emit('remove-validator', this.$validator);\n  },\n```\n\nVeeValidate自身は入れ子のフォームに対応する機能を持ちませんが、Vueのイベントを活用することで、入れ子のフォームでもバリデーションを機能させることができます。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-12T02:09:46+09:00",
    "group": null,
    "id": "29c04bd2c7be353ef672",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "JavaScript",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "VeeValidate",
        "versions": []
      }
    ],
    "title": "[Vue.js] VeeValidateで入れ子のフォームを作る",
    "updated_at": "2017-11-13T20:46:01+09:00",
    "url": "https://qiita.com/ryo511/items/29c04bd2c7be353ef672",
    "user": {
      "description": "Software Engineer",
      "facebook_id": "",
      "followees_count": 7,
      "followers_count": 8,
      "github_login_name": "ryo-utsunomiya",
      "id": "ryo511",
      "items_count": 21,
      "linkedin_id": "",
      "location": "Tokyo",
      "name": "Ryo Utsunomiya",
      "organization": "ikyu",
      "permanent_id": 33450,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/33450/profile-images/1473686130",
      "twitter_screen_name": "ryo511",
      "website_url": "https://ryo511.info/"
    }
  },
  {
    "rendered_body": "<p>Vue.jsでthree.jsを使ってみるときに色々躓いたので書き方をまとめてみました。</p>\n\n<h1>\n<span id=\"準備\" class=\"fragment\"></span><a href=\"#%E6%BA%96%E5%82%99\"><i class=\"fa fa-link\"></i></a>準備</h1>\n\n<ol>\n<li><code>vue init webpack-simple three-vue-sample</code></li>\n<li>とりあえず設定はenterで</li>\n<li><code>npm i &amp;&amp; npm i -D three</code></li>\n<li>\n<code>src</code>の下に<code>Sample.vue</code>を作成</li>\n</ol>\n\n<h1>\n<span id=\"コード\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>コード</h1>\n\n<p>箱を回転させるサンプルを作成。</p>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">src/App.vue</span></div>\n<div class=\"highlight\"><pre><span></span>&lt;template&gt;\n  &lt;sample&gt;&lt;/sample&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Sample from \"./Sample.vue\";\n\nexport default {\n  name: 'app',\n  components: { Sample },\n}\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">src/Sample.vue</span></div>\n<div class=\"highlight\"><pre><span></span>&lt;template&gt;\n  &lt;div ref=\"stage\"&gt;&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  import * as THREE from 'three';\n\n  export default {\n\n    name: 'sample',\n\n    data () {\n      // === scene ===\n      const scene = new THREE.Scene ();\n\n      // === renderer ===\n      const renderer = new THREE.WebGLRenderer ();\n      renderer.setSize( window.innerWidth, window.innerHeight );\n\n      // === camera ===\n      const camera = new THREE.PerspectiveCamera (75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      camera.position.z = 5;\n\n      // === light ===\n      const light = new THREE.DirectionalLight(0xffffff);\n      light.position.set(0, 0, 10);\n\n      // === model ===\n      const geometry = new THREE.BoxGeometry (1, 1, 1);\n      const material = new THREE.MeshStandardMaterial ({ color: 0x00ff00 });\n      const cube = new THREE.Mesh (geometry, material);\n\n      return {\n        scene: scene,\n        renderer: renderer,\n        camera: camera,\n        light: light,\n        cube: cube\n      }\n    },\n\n    created () {\n      // === sceneにmodel,light, cameraを追加 ===\n      this.scene.add( this.camera );\n      this.scene.add( this.light);\n      this.scene.add( this.cube );\n    },\n\n    mounted () {\n      // === DOMを追加, animate ===\n      this.$refs.stage.appendChild(this.renderer.domElement);\n      this.animate();\n    },\n\n    methods: {\n\n      animate () {\n        requestAnimationFrame( this.animate );\n\n        this.cube.rotation.x += 0.05;\n        this.cube.rotation.y += 0.05;\n\n        this.renderer.render(this.scene, this.camera);\n      }\n\n    }\n  }\n&lt;/script&gt;\n\n&lt;style&gt;&lt;/style&gt;\n</pre></div>\n</div>\n\n<h1>\n<span id=\"解説\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E8%AA%AC\"><i class=\"fa fa-link\"></i></a>解説</h1>\n\n<ol>\n<li>data()で各種変数の初期化\n\n<ul>\n<li>mixin, componentを利用して分割することも可能、今回は割愛。</li>\n</ul>\n</li>\n<li>created()でsceneに取り込む\n\n<ul>\n<li>双方向バインディングを適用した状態で取り込みたかったため、data()内で取り込まずに、created()で組み立てた。</li>\n</ul>\n</li>\n<li>mounted()でrendererをDOMに埋め込み、animate()を実行\n\n<ul>\n<li>$refsはmounted以降でないと利用できないため、DOMへの埋め込みは最後になる。</li>\n</ul>\n</li>\n<li>methods.animate()でアニメーションを行う。</li>\n</ol>\n\n<h1>\n<span id=\"回転速度をvuejsで制御\" class=\"fragment\"></span><a href=\"#%E5%9B%9E%E8%BB%A2%E9%80%9F%E5%BA%A6%E3%82%92vuejs%E3%81%A7%E5%88%B6%E5%BE%A1\"><i class=\"fa fa-link\"></i></a>回転速度をvue.jsで制御</h1>\n\n<p>templateを少し変更し、回転速度(speed)をvueのデータバインディング配下にする。</p>\n\n<div class=\"code-frame\" data-lang=\"vue\">\n<div class=\"code-lang\"><span class=\"bold\">model.vue</span></div>\n<div class=\"highlight\"><pre><span></span>&lt;template&gt;\n  &lt;div&gt;\n\n    &lt;div class=\"controller\"&gt;\n      &lt;!-- .numberをつけておくことで、valueを自動的に数値に変換してくれる --&gt;\n      &lt;input v-model.number=\"speed\" type=\"number\"&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"stage\"&gt;\n      &lt;div ref=\"stage\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  import * as THREE from 'three';\n\n  export default {\n\n    name: 'model',\n\n    data () {\n\n      ...\n\n      return {\n        scene: scene,\n        renderer: renderer,\n        camera: camera,\n        light: light,\n        cube: cube,\n\n        speed: 0.05 // データバインディングできるようにする\n      }\n    },\n\n    ...\n\n    methods: {\n\n      animate () {\n        requestAnimationFrame( this.animate );\n\n        this.cube.rotation.x += this.rotate; // computed.rotate\n        this.cube.rotation.y += this.rotate;\n\n        this.renderer.render(this.scene, this.camera);\n      }\n\n    },\n\n    computed: {\n\n      rotate () {\n        // inputに何も入力されていないときに''で認識されてしまうため、回避\n        if (this.speed === '') {\n          return 0;\n        } else {\n          return this.speed;\n        }\n      }\n\n  }\n&lt;/script&gt;\n\n...\n</pre></div>\n</div>\n\n<p>フォームの値を変更することで回転速度が変化させることができる。</p>\n",
    "body": "Vue.jsでthree.jsを使ってみるときに色々躓いたので書き方をまとめてみました。\n\n# 準備\n1. `vue init webpack-simple three-vue-sample`\n2. とりあえず設定はenterで\n3. `npm i && npm i -D three`\n4. `src`の下に`Sample.vue`を作成\n\n# コード\n箱を回転させるサンプルを作成。\n\n``` src/App.vue\n<template>\n  <sample></sample>\n</template>\n\n<script>\nimport Sample from \"./Sample.vue\";\n\nexport default {\n  name: 'app',\n  components: { Sample },\n}\n</script>\n\n<style></style>\n```\n\n\n``` src/Sample.vue\n<template>\n  <div ref=\"stage\"></div>\n</template>\n\n<script>\n  import * as THREE from 'three';\n\n  export default {\n\n    name: 'sample',\n\n    data () {\n      // === scene ===\n      const scene = new THREE.Scene ();\n\n      // === renderer ===\n      const renderer = new THREE.WebGLRenderer ();\n      renderer.setSize( window.innerWidth, window.innerHeight );\n\n      // === camera ===\n      const camera = new THREE.PerspectiveCamera (75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      camera.position.z = 5;\n\n      // === light ===\n      const light = new THREE.DirectionalLight(0xffffff);\n      light.position.set(0, 0, 10);\n\n      // === model ===\n      const geometry = new THREE.BoxGeometry (1, 1, 1);\n      const material = new THREE.MeshStandardMaterial ({ color: 0x00ff00 });\n      const cube = new THREE.Mesh (geometry, material);\n\n      return {\n        scene: scene,\n        renderer: renderer,\n        camera: camera,\n        light: light,\n        cube: cube\n      }\n    },\n\n    created () {\n      // === sceneにmodel,light, cameraを追加 ===\n      this.scene.add( this.camera );\n      this.scene.add( this.light);\n      this.scene.add( this.cube );\n    },\n\n    mounted () {\n      // === DOMを追加, animate ===\n      this.$refs.stage.appendChild(this.renderer.domElement);\n      this.animate();\n    },\n\n    methods: {\n      \n      animate () {\n        requestAnimationFrame( this.animate );\n\n        this.cube.rotation.x += 0.05;\n        this.cube.rotation.y += 0.05;\n\n        this.renderer.render(this.scene, this.camera);\n      }\n\n    }\n  }\n</script>\n\n<style></style>\n```\n\n# 解説\n1. data()で各種変数の初期化\n - mixin, componentを利用して分割することも可能、今回は割愛。\n2. created()でsceneに取り込む\n - 双方向バインディングを適用した状態で取り込みたかったため、data()内で取り込まずに、created()で組み立てた。\n3. mounted()でrendererをDOMに埋め込み、animate()を実行\n - $refsはmounted以降でないと利用できないため、DOMへの埋め込みは最後になる。\n4. methods.animate()でアニメーションを行う。\n\n# 回転速度をvue.jsで制御\ntemplateを少し変更し、回転速度(speed)をvueのデータバインディング配下にする。\n\n``` model.vue\n<template>\n  <div>\n\n    <div class=\"controller\">\n      <!-- .numberをつけておくことで、valueを自動的に数値に変換してくれる -->\n      <input v-model.number=\"speed\" type=\"number\">\n    </div>\n\n    <div class=\"stage\">\n      <div ref=\"stage\"></div>\n    </div>\n\n  </div>\n</template>\n\n<script>\n  import * as THREE from 'three';\n\n  export default {\n\n    name: 'model',\n\n    data () {\n\n      ...\n\n      return {\n        scene: scene,\n        renderer: renderer,\n        camera: camera,\n        light: light,\n        cube: cube,\n\n        speed: 0.05 // データバインディングできるようにする\n      }\n    },\n\n    ...\n   \n    methods: {\n\n      animate () {\n        requestAnimationFrame( this.animate );\n\n        this.cube.rotation.x += this.rotate; // computed.rotate\n        this.cube.rotation.y += this.rotate;\n\n        this.renderer.render(this.scene, this.camera);\n      }\n\n    },\n\n    computed: {\n\n      rotate () {\n        // inputに何も入力されていないときに''で認識されてしまうため、回避\n        if (this.speed === '') {\n          return 0;\n        } else {\n          return this.speed;\n        }\n      }\n\n  }\n</script>\n\n...\n```\n\nフォームの値を変更することで回転速度が変化させることができる。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-10T15:23:00+09:00",
    "group": null,
    "id": "1c8ba182699b3646b363",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "three.js",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      }
    ],
    "title": "Vue.jsでthree.jsを使ってみる",
    "updated_at": "2017-11-13T14:29:15+09:00",
    "url": "https://qiita.com/kokorau/items/1c8ba182699b3646b363",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 0,
      "followers_count": 0,
      "github_login_name": null,
      "id": "kokorau",
      "items_count": 4,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 147523,
      "profile_image_url": "https://secure.gravatar.com/avatar/e1d79796bfabc012047ca5cbe2f59f78",
      "twitter_screen_name": null,
      "website_url": null
    }
  },
  {
    "rendered_body": "<p>Vue.jsのフォームバリデーションであるVeeValidateで、日付のバリデーションをする手順を書いていく。</p>\n\n<p>VeeValidate : <a href=\"http://vee-validate.logaretm.com/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://vee-validate.logaretm.com/</a></p>\n\n<h1>\n<span id=\"momentjsを入れる\" class=\"fragment\"></span><a href=\"#momentjs%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>moment.jsを入れる</h1>\n\n<p>VeeValidateの日付処理にはmoment.jsが必要なためインストールする。</p>\n\n<p>moment.js : <a href=\"https://momentjs.com/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://momentjs.com/</a></p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ npm install moment --save\n</pre></div></div>\n\n<p>インストールしたら、以下のようにして設定。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">app.js</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nx\">Vue</span> <span class=\"nx\">from</span> <span class=\"s1\">'vue'</span><span class=\"p\">;</span>\n<span class=\"kr\">import</span> <span class=\"nx\">moment</span> <span class=\"nx\">from</span> <span class=\"s1\">'moment'</span><span class=\"p\">;</span>\n<span class=\"kr\">import</span> <span class=\"nx\">VeeValidate</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">Validator</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">'vee-validate'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">Validator</span><span class=\"p\">.</span><span class=\"nx\">installDateTimeValidators</span><span class=\"p\">(</span><span class=\"nx\">moment</span><span class=\"p\">);</span>\n<span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">VeeValidate</span><span class=\"p\">);</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"日付のバリデーションをする\" class=\"fragment\"></span><a href=\"#%E6%97%A5%E4%BB%98%E3%81%AE%E3%83%90%E3%83%AA%E3%83%87%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>日付のバリデーションをする</h1>\n\n<p>日付のバリデーションには<code>date_format</code>を使用する。</p>\n\n<div class=\"code-frame\" data-lang=\"html+jinja\">\n<div class=\"code-lang\"><span class=\"bold\">DateValidation.vue</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">input</span>\n            <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text\"</span>\n            <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"date\"</span>\n            <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"date\"</span>\n            <span class=\"na\">v-validate</span><span class=\"o\">=</span><span class=\"s\">\"'required|date_format:YYYY-MM-DD HH:mm:ss'\"</span>\n        <span class=\"p\">/&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n\n<p>特に日付フォーマットは<a href=\"http://momentjs.com/docs/#/parsing/string-format/\" rel=\"nofollow noopener\" target=\"_blank\">moment.jsのドキュメント</a>に沿って書く必要があり、DDがddになっていたり、ssがSSになっていると動かないので注意する。</p>\n",
    "body": "Vue.jsのフォームバリデーションであるVeeValidateで、日付のバリデーションをする手順を書いていく。\n\nVeeValidate : http://vee-validate.logaretm.com/\n\n# moment.jsを入れる\nVeeValidateの日付処理にはmoment.jsが必要なためインストールする。\n\nmoment.js : https://momentjs.com/\n\n```\n$ npm install moment --save\n```\n\nインストールしたら、以下のようにして設定。\n\n```app.js\nimport Vue from 'vue';\nimport moment from 'moment';\nimport VeeValidate, { Validator } from 'vee-validate';\n\nValidator.installDateTimeValidators(moment);\nVue.use(VeeValidate);\n```\n\n# 日付のバリデーションをする\n日付のバリデーションには`date_format`を使用する。\n\n```html+jinja:DateValidation.vue\n<template>\n    <div>\n        <input\n            type=\"text\"\n            name=\"date\"\n            v-model=\"date\"\n            v-validate=\"'required|date_format:YYYY-MM-DD HH:mm:ss'\"\n        />\n    </div>\n</template>\n```\n\n特に日付フォーマットは[moment.jsのドキュメント](http://momentjs.com/docs/#/parsing/string-format/)に沿って書く必要があり、DDがddになっていたり、ssがSSになっていると動かないので注意する。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-09T20:56:53+09:00",
    "group": null,
    "id": "10ce130c0e7e38b77b47",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "JavaScript",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      }
    ],
    "title": "VeeValidateで日付のバリデーションをする",
    "updated_at": "2017-11-09T20:56:53+09:00",
    "url": "https://qiita.com/sinpey_g2/items/10ce130c0e7e38b77b47",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 8,
      "followers_count": 5,
      "github_login_name": null,
      "id": "sinpey_g2",
      "items_count": 5,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 176572,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/176572/profile-images/1501130212",
      "twitter_screen_name": null,
      "website_url": null
    }
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>Vue.jsでいい感じのUIを作ろうと思い、<br>\nVue.js 2 + ElementUIでできるフィルタリングを試してみました</p>\n\n<h1>\n<span id=\"こんな感じ\" class=\"fragment\"></span><a href=\"#%E3%81%93%E3%82%93%E3%81%AA%E6%84%9F%E3%81%98\"><i class=\"fa fa-link\"></i></a>こんな感じ</h1>\n\n<p>タイピングに応じて検索結果が切り替わるのが個人的に好きです</p>\n\n<blockquote class=\"twitter-tweet\">\n<p>Vue.js 2 + ElementUI でフィルタリング <a href=\"https://t.co/74GQlH4swP\" rel=\"nofollow noopener\" target=\"_blank\">https://t.co/74GQlH4swP</a> <a href=\"https://twitter.com/YouTube?ref_src=twsrc%5Etfw\" rel=\"nofollow noopener\" target=\"_blank\">@YouTube</a>さんから</p>— Yuxio@冬仕様 (@YuxioArts) <a href=\"https://twitter.com/YuxioArts/status/928459816560771072?ref_src=twsrc%5Etfw\" rel=\"nofollow noopener\" target=\"_blank\">2017年11月9日</a>\n</blockquote>\n\n\n\n<h1>\n<span id=\"ソースコード\" class=\"fragment\"></span><a href=\"#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>ソースコード</h1>\n\n<p>Codepenにあります<br>\n<a href=\"https://codepen.io/YuxioArts/pen/PObrvq\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://codepen.io/YuxioArts/pen/PObrvq</a></p>\n\n<p>元はこちら<br>\n<a href=\"https://codepen.io/chanonroy/pen/RKxJwo\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://codepen.io/chanonroy/pen/RKxJwo</a></p>\n\n<p>そんなに差異はない</p>\n",
    "body": "#はじめに\n\nVue.jsでいい感じのUIを作ろうと思い、\nVue.js 2 + ElementUIでできるフィルタリングを試してみました\n\n#こんな感じ\n\nタイピングに応じて検索結果が切り替わるのが個人的に好きです\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Vue.js 2 + ElementUI でフィルタリング <a href=\"https://t.co/74GQlH4swP\">https://t.co/74GQlH4swP</a> <a href=\"https://twitter.com/YouTube?ref_src=twsrc%5Etfw\">@YouTube</a>さんから</p>&mdash; Yuxio@冬仕様 (@YuxioArts) <a href=\"https://twitter.com/YuxioArts/status/928459816560771072?ref_src=twsrc%5Etfw\">2017年11月9日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n\n#ソースコード\n\nCodepenにあります\nhttps://codepen.io/YuxioArts/pen/PObrvq\n\n元はこちら\nhttps://codepen.io/chanonroy/pen/RKxJwo\n\nそんなに差異はない\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-09T12:15:02+09:00",
    "group": null,
    "id": "ac82f543b2bd65cfab76",
    "likes_count": 1,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "ElementUI",
        "versions": []
      }
    ],
    "title": "Vue.js 2 + ElementUI でお手軽にフィルタリングを実装",
    "updated_at": "2017-11-09T12:15:02+09:00",
    "url": "https://qiita.com/yuxio/items/ac82f543b2bd65cfab76",
    "user": {
      "description": "趣味でWEB開発をしています。",
      "facebook_id": "",
      "followees_count": 7,
      "followers_count": 15,
      "github_login_name": null,
      "id": "yuxio",
      "items_count": 15,
      "linkedin_id": "",
      "location": "Tokyo Japan",
      "name": "",
      "organization": "",
      "permanent_id": 177776,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/177776/profile-images/1500812464",
      "twitter_screen_name": "YuxioArts",
      "website_url": ""
    }
  },
  {
    "rendered_body": "<p>Vue.jsでプラグインを作ってみたくなったので、それの作り方を調べました。（Vue.js 2.0以上です）</p>\n\n<p>本記事では、カスタムディレクティブを与えた要素にイベント付与するところが参考になるかと思います。</p>\n\n<p>以下の仕様を満たすプラグインを作るやり方を示していきます。</p>\n\n<ul>\n<li>v-qiita-clickというカスタムディレクティブをプロジェクト全体で利用できる</li>\n<li>そのディレクティグを与えた要素をクリックすると console.log('qiita!!')と出力される。</li>\n</ul>\n\n<p><a href=\"https://jp.vuejs.org/v2/guide/custom-directive.html\" rel=\"nofollow noopener\" target=\"_blank\">参考: カスタムディレクティブとは</a></p>\n\n<p>versionについては、この記事の執筆時のlatestのversionを想定しています。</p>\n\n<h1>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順</h1>\n\n<p>プロジェクトの作成 ~ プラグインの利用までを示します。</p>\n\n<h2>\n<span id=\"プロジェクトの作成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクトの作成</h2>\n\n<p>vue-cliを使うと簡単なので、利用しましょう。</p>\n\n<p><a href=\"https://github.com/vuejs/vue-cli\" rel=\"nofollow noopener\" target=\"_blank\">vue-cli</a></p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ npm install -g vue-cli\n$ vue init webpack my-project # my-projectの部分は自分のプロジェクト名\n</pre></div></div>\n\n<p>以降、このプロジェクト名をmy-projectとして扱います。</p>\n\n<h2>\n<span id=\"プラグインとなるファイルの作成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%A8%E3%81%AA%E3%82%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>プラグインとなるファイルの作成</h2>\n\n<p>次にプロジェクトのrootに移動します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ cd my-project\n</pre></div></div>\n\n<p><code>src</code> というフォルダがありますが、こちらはプロジェクトのソースコードです。</p>\n\n<p>src以下に、今回のプラグインの実装を持つファイルを作成します。<br>\nファイル名は、 <code>qiita-click.js</code> としましょう。</p>\n\n<p>src以下の構成は以下のようになったと思います。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>src\n - main.js\n - qiita-click.js\n - assets/\n - App.vue\n</pre></div></div>\n\n<p>では、 <code>qiita-click.js</code> にプラグインの記述をしていきます。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">const</span> <span class=\"nx\">VueQiitaClick</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">install</span> <span class=\"p\">(</span><span class=\"nx\">Vue</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">directive</span><span class=\"p\">(</span><span class=\"s1\">'qiita-click'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"nx\">bind</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">'click'</span><span class=\"p\">,</span> <span class=\"nx\">click</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">)</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"kr\">const</span> <span class=\"nx\">click</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'qiita!!'</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"nx\">VueQiitaClick</span>\n</pre></div></div>\n\n<p>これで、プラグインを利用できる状況になりました。</p>\n\n<h2>\n<span id=\"プラグインの利用\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%AE%E5%88%A9%E7%94%A8\"><i class=\"fa fa-link\"></i></a>プラグインの利用</h2>\n\n<p>先ほど作成した、プラグインを利用する方法ですが、</p>\n\n<p><code>main.js</code><br>\nで <code>qiita-click.js</code> を読み込み、 useというグローバルメソッドで呼び出します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nx\">VueUIDraggable</span> <span class=\"nx\">from</span> <span class=\"s1\">'./qiita-click'</span>\n\n<span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">VueQiitaClick</span><span class=\"p\">)</span>\n\n</pre></div></div>\n\n<p>あとは、 <code>.vue</code> のほうで利用する方法です。以下のように <code>v-qiita-click</code> をdivタグ等任意のタグに追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>&lt;div v-qiita-click&gt;divテスト&lt;/div&gt;\n</pre></div></div>\n\n<p>これを実行してみると、 「divテスト」 という要素をクリックすると、console上で意図した出力が確認できると思います。</p>\n\n<h1>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n\n<p><a href=\"https://jp.vuejs.org/v2/guide/plugins.html\" rel=\"nofollow noopener\" target=\"_blank\">Vue plugin</a></p>\n",
    "body": "Vue.jsでプラグインを作ってみたくなったので、それの作り方を調べました。（Vue.js 2.0以上です）\n\n本記事では、カスタムディレクティブを与えた要素にイベント付与するところが参考になるかと思います。\n\n以下の仕様を満たすプラグインを作るやり方を示していきます。\n\n- v-qiita-clickというカスタムディレクティブをプロジェクト全体で利用できる\n- そのディレクティグを与えた要素をクリックすると console.log('qiita!!')と出力される。\n\n[参考: カスタムディレクティブとは](https://jp.vuejs.org/v2/guide/custom-directive.html)\n\nversionについては、この記事の執筆時のlatestのversionを想定しています。\n\n# 手順\n\nプロジェクトの作成 ~ プラグインの利用までを示します。\n\n## プロジェクトの作成\n\nvue-cliを使うと簡単なので、利用しましょう。\n\n[vue-cli](https://github.com/vuejs/vue-cli)\n\n```\n$ npm install -g vue-cli\n$ vue init webpack my-project # my-projectの部分は自分のプロジェクト名\n```\n\n以降、このプロジェクト名をmy-projectとして扱います。\n\n## プラグインとなるファイルの作成\n\n次にプロジェクトのrootに移動します。\n\n```\n$ cd my-project\n```\n\n`src` というフォルダがありますが、こちらはプロジェクトのソースコードです。\n\nsrc以下に、今回のプラグインの実装を持つファイルを作成します。\nファイル名は、 `qiita-click.js` としましょう。\n\nsrc以下の構成は以下のようになったと思います。\n\n```\nsrc\n - main.js\n - qiita-click.js\n - assets/\n - App.vue\n```\n\nでは、 `qiita-click.js` にプラグインの記述をしていきます。\n\n```js\nconst VueQiitaClick = {\n  install (Vue, options) {\n    Vue.directive('qiita-click', {\n      bind: (el) => {\n        el.addEventListener('click', click, false)\n      }\n    })\n\n    const click = () => {\n      console.log('qiita!!')\n    }\n  }\n}\n\nexport default VueQiitaClick\n```\n\nこれで、プラグインを利用できる状況になりました。\n\n## プラグインの利用\n\n先ほど作成した、プラグインを利用する方法ですが、\n\n`main.js`\nで `qiita-click.js` を読み込み、 useというグローバルメソッドで呼び出します。\n\n```js\nimport VueUIDraggable from './qiita-click'\n\nVue.use(VueQiitaClick)\n\n```\n\n\nあとは、 `.vue` のほうで利用する方法です。以下のように `v-qiita-click` をdivタグ等任意のタグに追加します。\n\n```\n<div v-qiita-click>divテスト</div>\n```\n\n\nこれを実行してみると、 「divテスト」 という要素をクリックすると、console上で意図した出力が確認できると思います。\n\n# 参考\n\n[Vue plugin](https://jp.vuejs.org/v2/guide/plugins.html)\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-08T17:59:58+09:00",
    "group": null,
    "id": "261ece93f9a8a7ca53cb",
    "likes_count": 3,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "vue",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      }
    ],
    "title": "Vue.jsで自作のプラグインを作ってみる",
    "updated_at": "2017-11-08T18:06:27+09:00",
    "url": "https://qiita.com/peg_73_/items/261ece93f9a8a7ca53cb",
    "user": {
      "description": "好きなプログラマーはBrad Fitzpatrickです\r\n最近作ってるものは以下。\r\nhttps://egusahiroaki.github.io/markdownTableGenerator/#/",
      "facebook_id": "",
      "followees_count": 12,
      "followers_count": 10,
      "github_login_name": "egusahiroaki",
      "id": "peg_73_",
      "items_count": 23,
      "linkedin_id": "",
      "location": "Tokyo, japan",
      "name": "eg pub",
      "organization": "",
      "permanent_id": 88357,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/88357/profile-images/1473704396",
      "twitter_screen_name": null,
      "website_url": "https://egusahiroaki.github.io/"
    }
  },
  {
    "rendered_body": "<p>Vue SCSS Bootstrap の開発環境。<br>\nLaravel Mix とかで簡単に構築できてしまうので、理解するためにも、一回自分でちゃんとwebpack設定してみようと思ったらすごく手間取った。<br>\nので、忘れぬようにメモ。</p>\n\n<h1>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h1>\n\n<ul>\n<li>webpackでコンパイル（watchでファイル変更を監視する）</li>\n<li>Vue.jsを使いたい。（単一ファイルコンポーネントを使いたい）</li>\n<li>スタイルはScssで書く</li>\n<li>CSSは別ファイルに書き出したい</li>\n<li>基本的なスタイルはBootstrapを使いたい</li>\n</ul>\n\n<p>という感じのときの webpack.config.js </p>\n\n<h2>\n<span id=\"ファイル構成\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>ファイル構成</h2>\n\n<p><a href=\"https://camo.qiitausercontent.com/e94b82a67805aa19b07d86be09d7d3cb8456db6b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f37333833332f66643062353164342d306131372d356236362d386163642d6565393062323135323535612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"210\" alt=\"スクリーンショット 2017-11-08 17.32.54.png\" src=\"https://camo.qiitausercontent.com/e94b82a67805aa19b07d86be09d7d3cb8456db6b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f37333833332f66643062353164342d306131372d356236362d386163642d6565393062323135323535612e706e67\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/73833/fd0b51d4-0a17-5b66-8acd-ee90b215255a.png\"></a><br>\n↓中身<br>\n<a href=\"https://camo.qiitausercontent.com/b6387056436e4643a8d069c31cab53b274e589f9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f37333833332f34653765303435642d356266662d356562612d666336642d3761333039306536366263302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"215\" alt=\"スクリーンショット 2017-11-08 17.30.58.png\" src=\"https://camo.qiitausercontent.com/b6387056436e4643a8d069c31cab53b274e589f9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f37333833332f34653765303435642d356266662d356562612d666336642d3761333039306536366263302e706e67\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/73833/4e7e045d-5bff-5eba-fc6d-7a3090e66bc0.png\"></a></p>\n\n<h2>\n<span id=\"準備\" class=\"fragment\"></span><a href=\"#%E6%BA%96%E5%82%99\"><i class=\"fa fa-link\"></i></a>準備</h2>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">index.html</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">\"utf-8\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">http-equiv</span><span class=\"o\">=</span><span class=\"s\">\"X-UA-Compatible\"</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">\"IE=edge\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>webpack test<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"css/style.css\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">main</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"app\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"container\"</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"row\"</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"col-md-12\"</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">&lt;</span><span class=\"nt\">test</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">test</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">main</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"js/bundle.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n\n</pre></div>\n</div>\n\n<h2>\n<span id=\"npmのインストール\" class=\"fragment\"></span><a href=\"#npm%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>npmのインストール</h2>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n\n<span class=\"err\">//</span>\n  <span class=\"nt\">\"scripts\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"test\"</span><span class=\"p\">:</span> <span class=\"s2\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"dev\"</span><span class=\"p\">:</span> <span class=\"s2\">\"webpack\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"watch:js\"</span><span class=\"p\">:</span> <span class=\"s2\">\"watch 'npm run dev' src/js/\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"watch:css\"</span><span class=\"p\">:</span> <span class=\"s2\">\"watch 'npm run dev' src/scss/\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"watch\"</span><span class=\"p\">:</span> <span class=\"s2\">\"npm run watch:js &amp; npm run watch:css\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"dependencies\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"bootstrap-sass\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^3.3.7\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"vue\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^2.5.3\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"devDependencies\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"css-loader\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^0.28.7\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"extract-text-webpack-plugin\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^3.0.2\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"node-sass\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^4.6.0\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"sass-loader\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^6.0.6\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"style-loader\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^0.19.0\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"vue-loader\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^13.0.4\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"vue-template-compiler\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^2.4.2\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"watch\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^1.0.2\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"webpack\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^3.8.1\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>package.json  はこんな感じでした。<br>\nひょっとしたら、いらないパッケージもあるかも？？<br>\n（scriptsのあたりは、おそらくもっとスマートな方法があると思います）</p>\n\n<h2>\n<span id=\"設定\" class=\"fragment\"></span><a href=\"#%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>設定</h2>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">webpack.config.js</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"kd\">var</span> <span class=\"nx\">ExtractTextPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'extract-text-webpack-plugin'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">entry</span><span class=\"o\">:</span> <span class=\"s1\">'./src/js/app.js'</span><span class=\"p\">,</span> <span class=\"c1\">// jsファイル読み込み先</span>\n  <span class=\"nx\">output</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"nx\">__dirname</span><span class=\"p\">,</span>\n    <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">'./public/js/bundle.js'</span>　 <span class=\"c1\">// jsファイル出力先</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">resolve</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">alias</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">vue</span><span class=\"o\">:</span> <span class=\"s1\">'vue/dist/vue.esm.js'</span>\n　　　　　　　　<span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">module</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">rules</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.vue$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s1\">'vue-loader'</span><span class=\"p\">,</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.scss$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">use</span><span class=\"o\">:</span> <span class=\"nx\">ExtractTextPlugin</span><span class=\"p\">.</span><span class=\"nx\">extract</span><span class=\"p\">({</span>\n          <span class=\"nx\">fallback</span><span class=\"o\">:</span> <span class=\"s1\">'style-loader'</span><span class=\"p\">,</span>\n          <span class=\"nx\">use</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">'css-loader'</span><span class=\"p\">,</span> <span class=\"s1\">'sass-loader'</span><span class=\"p\">]</span>\n        <span class=\"p\">})</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">devtool</span><span class=\"o\">:</span> <span class=\"s1\">'source-map'</span><span class=\"p\">,</span>\n  <span class=\"nx\">plugins</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"k\">new</span> <span class=\"nx\">ExtractTextPlugin</span><span class=\"p\">(</span><span class=\"s1\">'./public/css/style.css'</span><span class=\"p\">)</span> <span class=\"c1\">// CSSファイル出力先</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"bootstrapをつかう\" class=\"fragment\"></span><a href=\"#bootstrap%E3%82%92%E3%81%A4%E3%81%8B%E3%81%86\"><i class=\"fa fa-link\"></i></a>Bootstrapをつかう</h2>\n\n<div class=\"code-frame\" data-lang=\"scss\">\n<div class=\"code-lang\"><span class=\"bold\">style.scss</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"nv\">$icon-font-path</span><span class=\"o\">:</span> <span class=\"s2\">\"bootstrap-sass/assets/fonts/bootstrap/\"</span><span class=\"p\">;</span>\n<span class=\"k\">@import</span> <span class=\"s2\">\"~bootstrap-sass/assets/stylesheets/bootstrap-sprockets\"</span><span class=\"p\">;</span>\n<span class=\"k\">@import</span> <span class=\"s2\">\"~bootstrap-sass/assets/stylesheets/bootstrap\"</span><span class=\"p\">;</span>\n\n<span class=\"nt\">div</span><span class=\"p\">{</span>\n    <span class=\"nt\">h1</span><span class=\"p\">{</span>\n        <span class=\"c1\">//何か書く</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h2>\n<span id=\"vueコンポーネント\" class=\"fragment\"></span><a href=\"#vue%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>Vueコンポーネント</h2>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.js</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nx\">Vue</span> <span class=\"nx\">from</span> <span class=\"s1\">'vue'</span><span class=\"p\">;</span>\n<span class=\"kr\">import</span> <span class=\"nx\">test</span> <span class=\"nx\">from</span> <span class=\"s1\">'./components/Test.vue'</span><span class=\"p\">;</span>  <span class=\"c1\">//コンポーネントファイル</span>\n\n<span class=\"c1\">//スタイル</span>\n<span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'../scss/style.scss'</span><span class=\"p\">);</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n    <span class=\"nx\">el</span><span class=\"o\">:</span> <span class=\"s1\">'#app'</span><span class=\"p\">,</span>\n    <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"test\"</span><span class=\"o\">:</span> <span class=\"nx\">test</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">});</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"Vue.js\">\n<div class=\"code-lang\"><span class=\"bold\">Test.vue</span></div>\n<div class=\"highlight\"><pre><span></span>&lt;template lang=\"html\"&gt;\n  &lt;div&gt;\n    &lt;h1&gt;webpack&lt;/h1&gt;\n    &lt;h2&gt;のテストだよ&lt;/h2&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n}\n&lt;/script&gt;\n\n&lt;style lang=\"scss\"&gt;\n\n&lt;/style&gt;\n</pre></div>\n</div>\n\n<h2>\n<span id=\"ビルドコンパイル\" class=\"fragment\"></span><a href=\"#%E3%83%93%E3%83%AB%E3%83%89%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB\"><i class=\"fa fa-link\"></i></a>ビルド（コンパイル）</h2>\n\n<p><code>$ npm run dev</code></p>\n\n<p>監視するとき<br>\n<code>$ npm run watch</code></p>\n\n<p>で、なんとか出来たみたい。</p>\n",
    "body": "Vue SCSS Bootstrap の開発環境。\nLaravel Mix とかで簡単に構築できてしまうので、理解するためにも、一回自分でちゃんとwebpack設定してみようと思ったらすごく手間取った。\nので、忘れぬようにメモ。\n\n# やりたいこと\n\n- webpackでコンパイル（watchでファイル変更を監視する）\n- Vue.jsを使いたい。（単一ファイルコンポーネントを使いたい）\n- スタイルはScssで書く\n- CSSは別ファイルに書き出したい\n- 基本的なスタイルはBootstrapを使いたい\n\nという感じのときの webpack.config.js \n\n## ファイル構成\n<img width=\"210\" alt=\"スクリーンショット 2017-11-08 17.32.54.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/73833/fd0b51d4-0a17-5b66-8acd-ee90b215255a.png\">\n↓中身\n<img width=\"215\" alt=\"スクリーンショット 2017-11-08 17.30.58.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/73833/4e7e045d-5bff-5eba-fc6d-7a3090e66bc0.png\">\n\n## 準備\n```html:index.html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <title>webpack test</title>\n  <link rel=\"stylesheet\" href=\"css/style.css\">\n</head>\n<body>\n  <main id=\"app\">\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <test></test>\n        </div>\n      </div>\n    </div>\n  </main>\n  <script src=\"js/bundle.js\"></script>\n</body>\n</html>\n\n```\n\n## npmのインストール\n\n```json:package.json\n{\n\n//\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"dev\": \"webpack\",\n    \"watch:js\": \"watch 'npm run dev' src/js/\",\n    \"watch:css\": \"watch 'npm run dev' src/scss/\",\n    \"watch\": \"npm run watch:js & npm run watch:css\"\n  },\n  \"dependencies\": {\n    \"bootstrap-sass\": \"^3.3.7\",\n    \"vue\": \"^2.5.3\"\n  },\n  \"devDependencies\": {\n    \"css-loader\": \"^0.28.7\",\n    \"extract-text-webpack-plugin\": \"^3.0.2\",\n    \"node-sass\": \"^4.6.0\",\n    \"sass-loader\": \"^6.0.6\",\n    \"style-loader\": \"^0.19.0\",\n    \"vue-loader\": \"^13.0.4\",\n    \"vue-template-compiler\": \"^2.4.2\",\n    \"watch\": \"^1.0.2\",\n    \"webpack\": \"^3.8.1\"\n  }\n}\n```\npackage.json  はこんな感じでした。\nひょっとしたら、いらないパッケージもあるかも？？\n（scriptsのあたりは、おそらくもっとスマートな方法があると思います）\n\n\n## 設定\n\n```js:webpack.config.js\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/js/app.js', // jsファイル読み込み先\n  output: {\n    path: __dirname,\n    filename: './public/js/bundle.js'　 // jsファイル出力先\n  },\n  resolve: {\n    alias: {\n      vue: 'vue/dist/vue.esm.js'\n　　　　　　　　}\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n      },\n      {\n        test: /\\.scss$/,\n        use: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use: ['css-loader', 'sass-loader']\n        })\n      }\n    ]\n  },\n  devtool: 'source-map',\n  plugins: [\n    new ExtractTextPlugin('./public/css/style.css') // CSSファイル出力先\n  ]\n};\n```\n\n## Bootstrapをつかう\n\n```scss:style.scss\n$icon-font-path: \"bootstrap-sass/assets/fonts/bootstrap/\";\n@import \"~bootstrap-sass/assets/stylesheets/bootstrap-sprockets\";\n@import \"~bootstrap-sass/assets/stylesheets/bootstrap\";\n\ndiv{\n    h1{\n        //何か書く\n    }\n}\n\n```\n\n## Vueコンポーネント\n\n```js:app.js\nimport Vue from 'vue';\nimport test from './components/Test.vue';  //コンポーネントファイル\n\n//スタイル\nrequire('../scss/style.scss');\n\nconst app = new Vue({\n    el: '#app',\n    components: {\n    \"test\": test,\n  },\n});\n\n```\n\n```Vue.js:Test.vue\n<template lang=\"html\">\n  <div>\n    <h1>webpack</h1>\n    <h2>のテストだよ</h2>\n  </div>\n</template>\n\n<script>\nexport default {\n}\n</script>\n\n<style lang=\"scss\">\n\n</style>\n```\n\n## ビルド（コンパイル）\n`$ npm run dev`\n\n監視するとき\n`$ npm run watch`\n\n\nで、なんとか出来たみたい。\n\n\n\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-08T17:45:02+09:00",
    "group": null,
    "id": "1cf18c7c85ba8daa8b38",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Sass",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "webpack",
        "versions": []
      }
    ],
    "title": "webpackでVueファイルとSCSS＋ExtractTextPluginをビルドする",
    "updated_at": "2017-11-08T17:46:50+09:00",
    "url": "https://qiita.com/shin1kt/items/1cf18c7c85ba8daa8b38",
    "user": {
      "description": "web,php,html,css,javascript",
      "facebook_id": "katacom.jp",
      "followees_count": 4,
      "followers_count": 5,
      "github_login_name": "shin1kt",
      "id": "shin1kt",
      "items_count": 23,
      "linkedin_id": "",
      "location": "niigata,japan",
      "name": "",
      "organization": "katacom",
      "permanent_id": 73833,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/73833/profile-images/1473699640",
      "twitter_screen_name": "kt_shin1",
      "website_url": "http://www.katacom.jp/a/"
    }
  },
  {
    "rendered_body": "<p>Vue.jsとRailsを組み合わせている時、Rubyの世界からJSの世界に値を楽に渡したいと思ったことはありませんか？<br>\n私はあります。</p>\n\n<p>そこでWeb APIを経由せずにデータを渡す方法をいくつか試してみたので、まとめてみました。<br>\n※ 以下、vue-cliで生成されたファイルで試しています。</p>\n\n<h2>\n<span id=\"共通\" class=\"fragment\"></span><a href=\"#%E5%85%B1%E9%80%9A\"><i class=\"fa fa-link\"></i></a>共通</h2>\n\n<p>App.vueは共通のものを使用します。<br>\nこのコンポーネントの<code>props</code>に情報が渡れることを目的とします。<br>\n追加したのは<code>props</code>と<code>&lt;div&gt;{{ arg1 }}&lt;/div&gt;</code>だけです。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">src/App.vue</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"app\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>{{ arg1 }}<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"./assets/logo.png\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">HelloWorld</span><span class=\"p\">/&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"kr\">import</span> <span class=\"nx\">HelloWorld</span> <span class=\"nx\">from</span> <span class=\"s1\">'./components/HelloWorld'</span>\n\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">'app'</span><span class=\"p\">,</span>\n  <span class=\"nx\">props</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">arg1</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"nb\">String</span><span class=\"p\">,</span> <span class=\"nx\">required</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">HelloWorld</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n<span class=\"p\">#</span><span class=\"nn\">app</span> <span class=\"p\">{</span>\n  <span class=\"k\">font-family</span><span class=\"p\">:</span> <span class=\"s1\">'Avenir'</span><span class=\"p\">,</span> <span class=\"n\">Helvetica</span><span class=\"p\">,</span> <span class=\"n\">Arial</span><span class=\"p\">,</span> <span class=\"kc\">sans-serif</span><span class=\"p\">;</span>\n  <span class=\"kp\">-webkit-</span><span class=\"n\">font-smoothing</span><span class=\"p\">:</span> <span class=\"n\">antialiased</span><span class=\"p\">;</span>\n  <span class=\"kp\">-moz-</span><span class=\"n\">osx-font-smoothing</span><span class=\"p\">:</span> <span class=\"n\">grayscale</span><span class=\"p\">;</span>\n  <span class=\"k\">text-align</span><span class=\"p\">:</span> <span class=\"kc\">center</span><span class=\"p\">;</span>\n  <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"mh\">#2c3e50</span><span class=\"p\">;</span>\n  <span class=\"k\">margin-top</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"同じ変数名で渡す\" class=\"fragment\"></span><a href=\"#%E5%90%8C%E3%81%98%E5%A4%89%E6%95%B0%E5%90%8D%E3%81%A7%E6%B8%A1%E3%81%99\"><i class=\"fa fa-link\"></i></a>同じ変数名で渡す</h2>\n\n<p><code>src/main.js</code>が読み込まれる前に変数を<code>index.html</code>で定義する</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">index.html</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">\"utf-8\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>test<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"app\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">arg1</span> <span class=\"o\">=</span> <span class=\"s1\">'arg1'</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n    <span class=\"c\">&lt;!-- built files will be auto injected --&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">src/main.js</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nx\">Vue</span> <span class=\"nx\">from</span> <span class=\"s1\">'vue'</span>\n<span class=\"kr\">import</span> <span class=\"nx\">App</span> <span class=\"nx\">from</span> <span class=\"s1\">'./App'</span>\n\n<span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">productionTip</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">arg1</span> <span class=\"o\">===</span> <span class=\"s1\">'undefined'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">'Not found arg1'</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n  <span class=\"nx\">el</span><span class=\"o\">:</span> <span class=\"s1\">'#app'</span><span class=\"p\">,</span>\n  <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"sb\">`&lt;App arg1=\"</span><span class=\"si\">${</span><span class=\"nx\">arg1</span><span class=\"si\">}</span><span class=\"sb\">\"/&gt;`</span><span class=\"p\">,</span>\n  <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">App</span> <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"appをindexhtmlで書く\" class=\"fragment\"></span><a href=\"#app%E3%82%92indexhtml%E3%81%A7%E6%9B%B8%E3%81%8F\"><i class=\"fa fa-link\"></i></a>Appをindex.htmlで書く</h2>\n\n<p>Vueインスタンスではtemplateを書かずに<code>index.html</code>で書く</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">index.html</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">\"utf-8\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>test<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"app\"</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">App</span> <span class=\"na\">arg1</span><span class=\"o\">=</span><span class=\"s\">\"arg1\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">App</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"c\">&lt;!-- built files will be auto injected --&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">src/main.js</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nx\">Vue</span> <span class=\"nx\">from</span> <span class=\"s1\">'vue'</span>\n<span class=\"kr\">import</span> <span class=\"nx\">App</span> <span class=\"nx\">from</span> <span class=\"s1\">'./App'</span>\n\n<span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">productionTip</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n\n<span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n  <span class=\"nx\">el</span><span class=\"o\">:</span> <span class=\"s1\">'#app'</span><span class=\"p\">,</span>\n  <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">App</span> <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"rootで受け取る\" class=\"fragment\"></span><a href=\"#root%E3%81%A7%E5%8F%97%E3%81%91%E5%8F%96%E3%82%8B\"><i class=\"fa fa-link\"></i></a>Rootで受け取る</h2>\n\n<p>mountするelementにarg1を書いて、renderが呼ばれたときに取得し、propsで渡す</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">index.html</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">\"utf-8\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>test<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"app\"</span> <span class=\"na\">arg1</span><span class=\"o\">=</span><span class=\"s\">\"arg1\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"c\">&lt;!-- built files will be auto injected --&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">src/main.js</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nx\">Vue</span> <span class=\"nx\">from</span> <span class=\"s1\">'vue'</span>\n<span class=\"kr\">import</span> <span class=\"nx\">App</span> <span class=\"nx\">from</span> <span class=\"s1\">'./App'</span>\n\n<span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">productionTip</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n\n<span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n  <span class=\"nx\">el</span><span class=\"o\">:</span> <span class=\"s1\">'#app'</span><span class=\"p\">,</span>\n  <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"s1\">'&lt;App/&gt;'</span><span class=\"p\">,</span>\n  <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">App</span> <span class=\"p\">},</span>\n  <span class=\"nx\">render</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">createElement</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">arg1</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$el</span><span class=\"p\">.</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">'arg1'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">'App'</span><span class=\"p\">,</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">props</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n          <span class=\"nx\">arg1</span><span class=\"o\">:</span> <span class=\"nx\">arg1</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">})</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h1>\n\n<p>思いついたものの列挙なので、もっと良い手段やそもそもこんなことしないでいいよというものがあれば教えていただけると嬉しいです</p>\n",
    "body": "\nVue.jsとRailsを組み合わせている時、Rubyの世界からJSの世界に値を楽に渡したいと思ったことはありませんか？\n私はあります。\n\nそこでWeb APIを経由せずにデータを渡す方法をいくつか試してみたので、まとめてみました。\n※ 以下、vue-cliで生成されたファイルで試しています。\n\n## 共通\nApp.vueは共通のものを使用します。\nこのコンポーネントの`props`に情報が渡れることを目的とします。\n追加したのは`props`と`<div>{{ arg1 }}</div>`だけです。\n\n```html:src/App.vue\n<template>\n  <div id=\"app\">\n    <div>{{ arg1 }}</div>\n    <img src=\"./assets/logo.png\">\n    <HelloWorld/>\n  </div>\n</template>\n\n<script>\nimport HelloWorld from './components/HelloWorld'\n\nexport default {\n  name: 'app',\n  props: {\n    arg1: { type: String, required: true }\n  },\n  components: {\n    HelloWorld\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n```\n\n## 同じ変数名で渡す\n`src/main.js`が読み込まれる前に変数を`index.html`で定義する\n\n```index.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>test</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script>\n      var arg1 = 'arg1'\n    </script>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n```\n\n```src/main.js\nimport Vue from 'vue'\nimport App from './App'\n\nVue.config.productionTip = false\n\nif (typeof arg1 === 'undefined') {\n  throw new Error('Not found arg1')\n}\n\nnew Vue({\n  el: '#app',\n  template: `<App arg1=\"${arg1}\"/>`,\n  components: { App }\n})\n```\n\n## Appをindex.htmlで書く\nVueインスタンスではtemplateを書かずに`index.html`で書く\n\n```index.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>test</title>\n  </head>\n  <body>\n    <div id=\"app\">\n      <App arg1=\"arg1\"></App>\n    </div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n```\n\n``` src/main.js\nimport Vue from 'vue'\nimport App from './App'\n\nVue.config.productionTip = false\n\nnew Vue({\n  el: '#app',\n  components: { App }\n})\n```\n\n## Rootで受け取る\nmountするelementにarg1を書いて、renderが呼ばれたときに取得し、propsで渡す\n\n```index.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>test</title>\n  </head>\n  <body>\n    <div id=\"app\" arg1=\"arg1\"></div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n```\n\n```src/main.js\nimport Vue from 'vue'\nimport App from './App'\n\nVue.config.productionTip = false\n\nnew Vue({\n  el: '#app',\n  template: '<App/>',\n  components: { App },\n  render: function(createElement) {\n    const arg1 = this.$el.getAttribute('arg1')\n    return createElement('App',\n      {\n        props: {\n          arg1: arg1\n        }\n      })\n  }\n})\n```\n\n# 最後に\n思いついたものの列挙なので、もっと良い手段やそもそもこんなことしないでいいよというものがあれば教えていただけると嬉しいです\n",
    "coediting": false,
    "comments_count": 2,
    "created_at": "2017-11-08T16:26:59+09:00",
    "group": null,
    "id": "3f125ededf66723ce3d6",
    "likes_count": 5,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "JavaScript",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      }
    ],
    "title": "Vue.jsの外から情報を渡したい",
    "updated_at": "2017-11-08T17:52:36+09:00",
    "url": "https://qiita.com/rinsyan0518/items/3f125ededf66723ce3d6",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 0,
      "github_login_name": "rinsyan0518",
      "id": "rinsyan0518",
      "items_count": 5,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 51292,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/51292/profile-images/1491140659",
      "twitter_screen_name": "rinsyan0518",
      "website_url": ""
    }
  },
  {
    "rendered_body": "<p>いろいろ最初に組み込まれて手順が減ってきていて、最近はこのぐらいで終わるようです。<br>\nvue事態のインストールなどは、他を参考ください。</p>\n\n<ul>\n<li>プロジェクトの構築(設定はすべてデフォルト)<br>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ vue init webpack vue-pug-sass\n</pre></div></div>\n\n<p>設定はすべてデフォルトでOKなのでエンターキーを連打で！</p>\n\n<ul>\n<li>npmのインストール<br>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ cd vue-pug-sass\n$ npm install\n$ npm install pug-html-loader --save-dev\n$ npm install node-sass --save-dev\n$ npm install sass-loader --save-dev\n</pre></div></div>\n\n<p>追加するモジュールはこの3つだけでOK!あとは書くだけで利用出来ます。</p>\n\n<ul>\n<li>初期コンポーネントの置き換え</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"vue\"><div class=\"highlight\"><pre><span></span>&lt;template lang=\"pug\"&gt;\n.hello\n  h1 {{ msg }}\n  h2 Essential Links\n  ul\n    li\n      a(href='https://vuejs.org', target='_blank') Core Docs\n    li\n      a(href='https://forum.vuejs.org', target='_blank') Forum\n    li\n      a(href='https://chat.vuejs.org', target='_blank') Community Chat\n    li\n      a(href='https://twitter.com/vuejs', target='_blank') Twitter\n    br\n    li\n      a(href='http://vuejs-templates.github.io/webpack/', target='_blank') Docs for This Template\n  h2 Ecosystem\n  ul\n    li\n      a(href='http://router.vuejs.org/', target='_blank') vue-router\n    li\n      a(href='http://vuex.vuejs.org/', target='_blank') vuex\n    li\n      a(href='http://vue-loader.vuejs.org/', target='_blank') vue-loader\n    li\n      a(href='https://github.com/vuejs/awesome-vue', target='_blank') awesome-vue\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'HelloWorld',\n  data () {\n    return {\n      msg: 'Welcome to Your Vue.js App'\n    }\n  }\n}\n&lt;/script&gt;\n\n&lt;style lang=\"scss\"&gt;\n$msg-color: #42b983;\n\nh1, h2 {\n  font-weight: normal;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\n\na {\n  color: $msg-color;\n}\n&lt;/style&gt;\n</pre></div></div>\n\n<p>./src/components/HelloWorld.vue をpugとsassで書いた物です。<br>\nsassは変数を使って正しくコンパイルされているか確認しています。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ npm run dev\n</pre></div></div>\n\n<p>デフォルトのページがpugとsassで書かれていてもしっかりと動いているのを確認してください。</p>\n",
    "body": "いろいろ最初に組み込まれて手順が減ってきていて、最近はこのぐらいで終わるようです。\nvue事態のインストールなどは、他を参考ください。\n\n* プロジェクトの構築(設定はすべてデフォルト)  \n\n```\n$ vue init webpack vue-pug-sass\n```  \n\n設定はすべてデフォルトでOKなのでエンターキーを連打で！\n\n* npmのインストール  \n\n```\n$ cd vue-pug-sass\n$ npm install\n$ npm install pug-html-loader --save-dev\n$ npm install node-sass --save-dev\n$ npm install sass-loader --save-dev\n```\n\n追加するモジュールはこの3つだけでOK!あとは書くだけで利用出来ます。\n\n* 初期コンポーネントの置き換え\n\n```vue\n<template lang=\"pug\">\n.hello\n  h1 {{ msg }}\n  h2 Essential Links\n  ul\n    li\n      a(href='https://vuejs.org', target='_blank') Core Docs\n    li\n      a(href='https://forum.vuejs.org', target='_blank') Forum\n    li\n      a(href='https://chat.vuejs.org', target='_blank') Community Chat\n    li\n      a(href='https://twitter.com/vuejs', target='_blank') Twitter\n    br\n    li\n      a(href='http://vuejs-templates.github.io/webpack/', target='_blank') Docs for This Template\n  h2 Ecosystem\n  ul\n    li\n      a(href='http://router.vuejs.org/', target='_blank') vue-router\n    li\n      a(href='http://vuex.vuejs.org/', target='_blank') vuex\n    li\n      a(href='http://vue-loader.vuejs.org/', target='_blank') vue-loader\n    li\n      a(href='https://github.com/vuejs/awesome-vue', target='_blank') awesome-vue\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  data () {\n    return {\n      msg: 'Welcome to Your Vue.js App'\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n$msg-color: #42b983;\n\nh1, h2 {\n  font-weight: normal;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\n\na {\n  color: $msg-color;\n}\n</style>\n``` \n\n./src/components/HelloWorld.vue をpugとsassで書いた物です。\nsassは変数を使って正しくコンパイルされているか確認しています。\n\n```\n$ npm run dev\n```\n\nデフォルトのページがpugとsassで書かれていてもしっかりと動いているのを確認してください。\n",
    "coediting": false,
    "comments_count": 2,
    "created_at": "2017-11-08T08:23:37+09:00",
    "group": null,
    "id": "4218be62a94291086f0e",
    "likes_count": 2,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Sass",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "pug",
        "versions": []
      }
    ],
    "title": "vue-cli 2.9.1 でのpug + sass環境構築",
    "updated_at": "2017-11-14T16:06:50+09:00",
    "url": "https://qiita.com/myamada/items/4218be62a94291086f0e",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 0,
      "followers_count": 1,
      "github_login_name": null,
      "id": "myamada",
      "items_count": 4,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 43801,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/43801/profile-images/1473689654",
      "twitter_screen_name": null,
      "website_url": null
    }
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h1>\n\n<p>Vue.jsのv-modelにバインドされるデータをオブジェクトの配列にする</p>\n\n<p>例えば、</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n  <span class=\"nx\">el</span><span class=\"o\">:</span> <span class=\"s1\">'#app'</span><span class=\"p\">,</span>\n  <span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">vals</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">\"a\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">\"b\"</span><span class=\"p\">},</span>\n    <span class=\"p\">],</span>\n    <span class=\"nx\">checkedVal</span><span class=\"o\">:</span> <span class=\"p\">[]</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</pre></div></div>\n\n<p>のようなデータを以下の通りバインディングしたとき、</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">v-for</span><span class=\"o\">=</span><span class=\"s\">\"val in vals\"</span><span class=\"p\">&gt;</span>\n  {{ val.name }}\n  <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"checkbox\"</span> <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"checkedVal\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n</pre></div></div>\n\n<p>チェックボックスにチェックをつけると <code>checkedVal</code> には <code>vals</code> の要素オブジェクトまるごとを入れたいという感じ。</p>\n\n<p>jsfiddle書いたのでそちらを見たほうが早いかもしれない<br>\n<a href=\"https://jsfiddle.net/seihmd/kaghf0xd/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://jsfiddle.net/seihmd/kaghf0xd/</a></p>\n\n<h1>\n<span id=\"やりかた\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%8B%E3%81%9F\"><i class=\"fa fa-link\"></i></a>やりかた</h1>\n\n<p>v-modelをつけたタグに <code>v-bind:value=\"val\"</code> をつければいい。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"checkbox\"</span> <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"checkedVal\"</span> <span class=\"na\">v-bind:value</span><span class=\"o\">=</span><span class=\"s\">\"val\"</span><span class=\"p\">&gt;</span>\n</pre></div></div>\n\n<p>実際の動作はfiddleのほうで。</p>\n\n<h1>\n<span id=\"初期値を設定したいとき\" class=\"fragment\"></span><a href=\"#%E5%88%9D%E6%9C%9F%E5%80%A4%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%9F%E3%81%84%E3%81%A8%E3%81%8D\"><i class=\"fa fa-link\"></i></a>初期値を設定したいとき</h1>\n\n<p>v-modelにバインドする配列（上記jsで言えば<code>checkedVal</code>）に値を設定しておけばチェックボックスをtrueにしておくこともできるが、オブジェクトの場合は各プロパティの値が同じであれば同一とみなされるようだ。</p>\n\n<p>こう書くと対応する対応するチェックボックスがtrueの状態でレンダリングされる。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">vals</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">\"a\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">\"b\"</span><span class=\"p\">},</span>\n    <span class=\"p\">],</span>\n    <span class=\"nx\">checkedVal</span><span class=\"o\">:</span> <span class=\"p\">[{</span><span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">\"a\"</span><span class=\"p\">}]</span>\n  <span class=\"p\">}</span>\n</pre></div></div>\n\n<p>比較のパフォーマンスは落ちるだろうし、どのような値のプロパティでも比較できるわけはないので、オブジェクトまるごとを使うのはシンプルな構造の場合にとどめておいたほうがいいと思う。</p>\n\n<h1>\n<span id=\"一部のプロパティだけ渡したい\" class=\"fragment\"></span><a href=\"#%E4%B8%80%E9%83%A8%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%A0%E3%81%91%E6%B8%A1%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>一部のプロパティだけ渡したい</h1>\n\n<p>オブジェクトまるごとではなく一部のプロパティだけを渡したい場合はvalueで指定してやればok</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"checkbox\"</span> <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"checkedVal\"</span> <span class=\"na\">v-bind:value</span><span class=\"o\">=</span><span class=\"s\">\"{id: val.id, name: val.name}\"</span><span class=\"p\">&gt;</span>\n</pre></div></div>\n\n<p><a href=\"https://jsfiddle.net/seihmd/emcbempx/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://jsfiddle.net/seihmd/emcbempx/</a></p>\n",
    "body": "# やりたいこと\nVue.jsのv-modelにバインドされるデータをオブジェクトの配列にする\n\n例えば、\n\n```js\nnew Vue({\n  el: '#app',\n  data: {\n  \tvals: [\n\t\t{id: 1, name: \"a\"},\n\t\t{id: 2, name: \"b\"},\n\t],\n    checkedVal: []\n  }\n});\n```\nのようなデータを以下の通りバインディングしたとき、\n\n```html\n<p v-for=\"val in vals\">\n  {{ val.name }}\n  <input type=\"checkbox\" v-model=\"checkedVal\">\n</p>\n```\nチェックボックスにチェックをつけると ```checkedVal``` には ```vals``` の要素オブジェクトまるごとを入れたいという感じ。\n\njsfiddle書いたのでそちらを見たほうが早いかもしれない\nhttps://jsfiddle.net/seihmd/kaghf0xd/\n\n# やりかた\n\nv-modelをつけたタグに ```v-bind:value=\"val\"``` をつければいい。\n\n```html\n<input type=\"checkbox\" v-model=\"checkedVal\" v-bind:value=\"val\">\n```\n実際の動作はfiddleのほうで。\n\n# 初期値を設定したいとき\n\nv-modelにバインドする配列（上記jsで言えば``` checkedVal ```）に値を設定しておけばチェックボックスをtrueにしておくこともできるが、オブジェクトの場合は各プロパティの値が同じであれば同一とみなされるようだ。\n\nこう書くと対応する対応するチェックボックスがtrueの状態でレンダリングされる。\n\n```js\ndata: {\n\tvals: [\n\t\t{id: 1, name: \"a\"},\n\t\t{id: 2, name: \"b\"},\n\t],\n    checkedVal: [{id: 1, name: \"a\"}]\n  }\n```\n\n比較のパフォーマンスは落ちるだろうし、どのような値のプロパティでも比較できるわけはないので、オブジェクトまるごとを使うのはシンプルな構造の場合にとどめておいたほうがいいと思う。\n\n# 一部のプロパティだけ渡したい\n\nオブジェクトまるごとではなく一部のプロパティだけを渡したい場合はvalueで指定してやればok\n\n```html\n<input type=\"checkbox\" v-model=\"checkedVal\" v-bind:value=\"{id: val.id, name: val.name}\">\n```\n\nhttps://jsfiddle.net/seihmd/emcbempx/\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-06T22:02:44+09:00",
    "group": null,
    "id": "e4b2dfbdaba423fde6a7",
    "likes_count": 2,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "JavaScript",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      }
    ],
    "title": "Vue.jsのv-modelにオブジェクトの配列をバインドする",
    "updated_at": "2017-11-06T22:02:44+09:00",
    "url": "https://qiita.com/seihmd/items/e4b2dfbdaba423fde6a7",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 34,
      "followers_count": 15,
      "github_login_name": "seihmd",
      "id": "seihmd",
      "items_count": 31,
      "linkedin_id": "",
      "location": "Tokyo, Japan",
      "name": "",
      "organization": "ヴォーカーズ",
      "permanent_id": 51303,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/51303/profile-images/1486306587",
      "twitter_screen_name": "seihmd",
      "website_url": ""
    }
  },
  {
    "rendered_body": "<p>サーバサイドを Go で WebAPI として独立して作り、フロントは Vue.js で SPA チックに作り、Static な成果物（HTML/CSS/JS）を Go バイナリに内包して Heroku で動かすメモです。</p>\n\n<p>サンプルのソースコードはこちらです。</p>\n\n<ul>\n<li><a href=\"https://github.com/zaru/go-vuejs-heroku\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/zaru/go-vuejs-heroku</a></li>\n</ul>\n\n<h2>\n<span id=\"前提条件\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6\"><i class=\"fa fa-link\"></i></a>前提条件</h2>\n\n<ul>\n<li>Go 1.9+\n\n<ul>\n<li>パッケージ管理: dep</li>\n<li>DBマイグレーション: pressly/goose</li>\n</ul>\n</li>\n<li>Vue.js 2.5+\n\n<ul>\n<li>vue-cli</li>\n<li>ビルドツール: webpack</li>\n</ul>\n</li>\n<li>Heroku\n\n<ul>\n<li>PostgreSQL</li>\n<li>Redis</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"デプロイの動作フロー\" class=\"fragment\"></span><a href=\"#%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%AE%E5%8B%95%E4%BD%9C%E3%83%95%E3%83%AD%E3%83%BC\"><i class=\"fa fa-link\"></i></a>デプロイの動作フロー</h3>\n\n<ul>\n<li>git push heroku master で Heroku にデプロイ</li>\n<li>デプロイ\n\n<ul>\n<li>dep で必要パッケージをインストール</li>\n<li>npm で必要パッケージをインストール</li>\n<li>Vue.js を webpack でビルド</li>\n<li>Go アプリをビルド</li>\n<li>マイグレーションコマンドをビルド</li>\n<li>マイグレーションコマンドを実行</li>\n</ul>\n</li>\n<li>デプロイ完了</li>\n</ul>\n\n<h2>\n<span id=\"go\" class=\"fragment\"></span><a href=\"#go\"><i class=\"fa fa-link\"></i></a>Go</h2>\n\n<h3>\n<span id=\"初期設定\" class=\"fragment\"></span><a href=\"#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>初期設定</h3>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>cd $GOPATH/your-name\nmkdir go-vuejs-heroku\ncd go-vuejs-heroku\n</pre></div></div>\n\n<h3>\n<span id=\"dep-パッケージ管理\" class=\"fragment\"></span><a href=\"#dep-%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E7%AE%A1%E7%90%86\"><i class=\"fa fa-link\"></i></a>dep パッケージ管理</h3>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>dep init\ndep ensure\n</pre></div></div>\n\n<h4>\n<span id=\"heroku-でコマンドビルド\" class=\"fragment\"></span><a href=\"#heroku-%E3%81%A7%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%93%E3%83%AB%E3%83%89\"><i class=\"fa fa-link\"></i></a>Heroku でコマンドビルド</h4>\n\n<p><code>pressly/goose</code> のマイグレーションコマンドをデプロイ時に実行できるように、アプリのバイナリとは別にコマンドをビルドできる Heroku 用の設定を <code>Gopkg.toml</code> に追記します。</p>\n\n<div class=\"code-frame\" data-lang=\"toml\">\n<div class=\"code-lang\"><span class=\"bold\">Gopkg.toml</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">[</span><span class=\"n\">metadata</span><span class=\"p\">.</span><span class=\"n\">heroku</span><span class=\"p\">]</span>\n  <span class=\"n\">root-package</span> <span class=\"o\">=</span> <span class=\"s\">\"github.com/zaru/go-vuejs-heroku\"</span>\n  <span class=\"n\">go-version</span> <span class=\"o\">=</span> <span class=\"s\">\"go1.9.1\"</span>\n  <span class=\"n\">install</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s\">\".\"</span><span class=\"p\">,</span> <span class=\"s\">\"./cmd/...\"</span> <span class=\"p\">]</span>\n  <span class=\"n\">ensure</span> <span class=\"o\">=</span> <span class=\"s\">\"true\"</span>\n</pre></div>\n</div>\n\n<p>ポイントは <code>install = [ \".\", \"./cmd/...\" ]</code> です。これは Heroku の環境変数である <code>GO_INSTALL_PACKAGE_SPEC</code> と同じ役割になります。 dep 以外の glide などのパッケージ管理の場合はこちらの環境変数を修正します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>heroku config:set GO_INSTALL_PACKAGE_SPEC=\". ./cmd/... \"\n</pre></div></div>\n\n<h4>\n<span id=\"goose-コマンドスクリプトを配置\" class=\"fragment\"></span><a href=\"#goose-%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E9%85%8D%E7%BD%AE\"><i class=\"fa fa-link\"></i></a>goose コマンドスクリプトを配置</h4>\n\n<p>上記で設定したコマンドのスクリプト <code>cmd/goose/main.go</code> に下記コードを配置します。これは<a href=\"https://github.com/pressly/goose/blob/master/cmd/goose/main.go\" rel=\"nofollow noopener\" target=\"_blank\">公式で用意されているサンプルコード</a>です。</p>\n\n<div class=\"code-frame\" data-lang=\"go\">\n<div class=\"code-lang\"><span class=\"bold\">cmd/goose/main.go</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"kn\">package</span> <span class=\"nx\">main</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">\"database/sql\"</span>\n    <span class=\"s\">\"flag\"</span>\n    <span class=\"s\">\"log\"</span>\n    <span class=\"s\">\"os\"</span>\n\n    <span class=\"nx\">_</span> <span class=\"s\">\"github.com/lib/pq\"</span>\n    <span class=\"s\">\"github.com/pressly/goose\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">var</span> <span class=\"p\">(</span>\n    <span class=\"nx\">flags</span> <span class=\"p\">=</span> <span class=\"nx\">flag</span><span class=\"p\">.</span><span class=\"nx\">NewFlagSet</span><span class=\"p\">(</span><span class=\"s\">\"goose\"</span><span class=\"p\">,</span> <span class=\"nx\">flag</span><span class=\"p\">.</span><span class=\"nx\">ExitOnError</span><span class=\"p\">)</span>\n    <span class=\"nx\">dir</span>   <span class=\"p\">=</span> <span class=\"nx\">flags</span><span class=\"p\">.</span><span class=\"nx\">String</span><span class=\"p\">(</span><span class=\"s\">\"dir\"</span><span class=\"p\">,</span> <span class=\"s\">\".\"</span><span class=\"p\">,</span> <span class=\"s\">\"directory with migration files\"</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">flags</span><span class=\"p\">.</span><span class=\"nx\">Usage</span> <span class=\"p\">=</span> <span class=\"nx\">usage</span>\n    <span class=\"nx\">flags</span><span class=\"p\">.</span><span class=\"nx\">Parse</span><span class=\"p\">(</span><span class=\"nx\">os</span><span class=\"p\">.</span><span class=\"nx\">Args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n\n    <span class=\"nx\">args</span> <span class=\"o\">:=</span> <span class=\"nx\">flags</span><span class=\"p\">.</span><span class=\"nx\">Args</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">\"create\"</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">goose</span><span class=\"p\">.</span><span class=\"nx\">Run</span><span class=\"p\">(</span><span class=\"s\">\"create\"</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"nx\">dir</span><span class=\"p\">,</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span><span class=\"o\">...</span><span class=\"p\">);</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n            <span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">Fatalf</span><span class=\"p\">(</span><span class=\"s\">\"goose run: %v\"</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">&lt;</span> <span class=\"mi\">3</span> <span class=\"p\">{</span>\n        <span class=\"nx\">flags</span><span class=\"p\">.</span><span class=\"nx\">Usage</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">\"-h\"</span> <span class=\"o\">||</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">\"--help\"</span> <span class=\"p\">{</span>\n        <span class=\"nx\">flags</span><span class=\"p\">.</span><span class=\"nx\">Usage</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">driver</span><span class=\"p\">,</span> <span class=\"nx\">dbstring</span><span class=\"p\">,</span> <span class=\"nx\">command</span> <span class=\"o\">:=</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n\n    <span class=\"k\">switch</span> <span class=\"nx\">driver</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"s\">\"postgres\"</span><span class=\"p\">,</span> <span class=\"s\">\"mysql\"</span><span class=\"p\">,</span> <span class=\"s\">\"sqlite3\"</span><span class=\"p\">,</span> <span class=\"s\">\"redshift\"</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">goose</span><span class=\"p\">.</span><span class=\"nx\">SetDialect</span><span class=\"p\">(</span><span class=\"nx\">driver</span><span class=\"p\">);</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n            <span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">Fatal</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"k\">default</span><span class=\"p\">:</span>\n        <span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">Fatalf</span><span class=\"p\">(</span><span class=\"s\">\"%q driver not supported\\n\"</span><span class=\"p\">,</span> <span class=\"nx\">driver</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">switch</span> <span class=\"nx\">dbstring</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"s\">\"\"</span><span class=\"p\">:</span>\n        <span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">Fatalf</span><span class=\"p\">(</span><span class=\"s\">\"-dbstring=%q not supported\\n\"</span><span class=\"p\">,</span> <span class=\"nx\">dbstring</span><span class=\"p\">)</span>\n    <span class=\"k\">default</span><span class=\"p\">:</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"nx\">driver</span> <span class=\"o\">==</span> <span class=\"s\">\"redshift\"</span> <span class=\"p\">{</span>\n        <span class=\"nx\">driver</span> <span class=\"p\">=</span> <span class=\"s\">\"postgres\"</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">db</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">sql</span><span class=\"p\">.</span><span class=\"nx\">Open</span><span class=\"p\">(</span><span class=\"nx\">driver</span><span class=\"p\">,</span> <span class=\"nx\">dbstring</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n        <span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">Fatalf</span><span class=\"p\">(</span><span class=\"s\">\"-dbstring=%q: %v\\n\"</span><span class=\"p\">,</span> <span class=\"nx\">dbstring</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">arguments</span> <span class=\"o\">:=</span> <span class=\"p\">[]</span><span class=\"kt\">string</span><span class=\"p\">{}</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">&gt;</span> <span class=\"mi\">3</span> <span class=\"p\">{</span>\n        <span class=\"nx\">arguments</span> <span class=\"p\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"nx\">arguments</span><span class=\"p\">,</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:]</span><span class=\"o\">...</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">goose</span><span class=\"p\">.</span><span class=\"nx\">Run</span><span class=\"p\">(</span><span class=\"nx\">command</span><span class=\"p\">,</span> <span class=\"nx\">db</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"nx\">dir</span><span class=\"p\">,</span> <span class=\"nx\">arguments</span><span class=\"o\">...</span><span class=\"p\">);</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n        <span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">Fatalf</span><span class=\"p\">(</span><span class=\"s\">\"goose run: %v\"</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">usage</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">Print</span><span class=\"p\">(</span><span class=\"nx\">usagePrefix</span><span class=\"p\">)</span>\n    <span class=\"nx\">flags</span><span class=\"p\">.</span><span class=\"nx\">PrintDefaults</span><span class=\"p\">()</span>\n    <span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">Print</span><span class=\"p\">(</span><span class=\"nx\">usageCommands</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"p\">(</span>\n    <span class=\"nx\">usagePrefix</span> <span class=\"p\">=</span> <span class=\"s\">`Usage: goose [OPTIONS] DRIVER DBSTRING COMMAND</span>\n<span class=\"s\">Drivers:</span>\n<span class=\"s\">    postgres</span>\n<span class=\"s\">    mysql</span>\n<span class=\"s\">    sqlite3</span>\n<span class=\"s\">    redshift</span>\n<span class=\"s\">Examples:</span>\n<span class=\"s\">    goose sqlite3 ./foo.db status</span>\n<span class=\"s\">    goose sqlite3 ./foo.db create init sql</span>\n<span class=\"s\">    goose sqlite3 ./foo.db create add_some_column sql</span>\n<span class=\"s\">    goose sqlite3 ./foo.db create fetch_user_data go</span>\n<span class=\"s\">    goose sqlite3 ./foo.db up</span>\n<span class=\"s\">    goose postgres \"user=postgres dbname=postgres sslmode=disable\" status</span>\n<span class=\"s\">    goose mysql \"user:password@/dbname?parseTime=true\" status</span>\n<span class=\"s\">    goose redshift \"postgres://user:password@qwerty.us-east-1.redshift.amazonaws.com:5439/db\" status</span>\n<span class=\"s\">Options:</span>\n<span class=\"s\">`</span>\n\n    <span class=\"nx\">usageCommands</span> <span class=\"p\">=</span> <span class=\"s\">`</span>\n<span class=\"s\">Commands:</span>\n<span class=\"s\">    up                   Migrate the DB to the most recent version available</span>\n<span class=\"s\">    up-to VERSION        Migrate the DB to a specific VERSION</span>\n<span class=\"s\">    down                 Roll back the version by 1</span>\n<span class=\"s\">    down-to VERSION      Roll back to a specific VERSION</span>\n<span class=\"s\">    redo                 Re-run the latest migration</span>\n<span class=\"s\">    status               Dump the migration status for the current DB</span>\n<span class=\"s\">    version              Print the current version of the database</span>\n<span class=\"s\">    create NAME [sql|go] Creates new migration file with next version</span>\n<span class=\"s\">`</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n\n<p>これによって dep の <code>Gopkg.lock</code> に <code>pressly/goose</code> が追記されるようになっていると思います。より明示的に指定したい場合は <code>Gopkg.toml</code> で管理しても良いかもしれません。</p>\n\n<div class=\"code-frame\" data-lang=\"toml\">\n<div class=\"code-lang\"><span class=\"bold\">Gopkg.toml</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">[[</span><span class=\"n\">constraint</span><span class=\"p\">]]</span>\n  <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"github.com/pressly/goose\"</span>\n  <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s\">\"2.1.0\"</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"vuejs\" class=\"fragment\"></span><a href=\"#vuejs\"><i class=\"fa fa-link\"></i></a>Vue.js</h2>\n\n<h3>\n<span id=\"初期設定-1\" class=\"fragment\"></span><a href=\"#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A-1\"><i class=\"fa fa-link\"></i></a>初期設定</h3>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>cd $GOPATH/your-name/go-vuejs-heroku\nvue init webpack vue-app\ncd vue-app\nnpm install\n</pre></div></div>\n\n<p>Vue.js は特別なことはないです。 vue-cli を使って webpack なアプリをテンプレを作っています。</p>\n\n<h2>\n<span id=\"heroku\" class=\"fragment\"></span><a href=\"#heroku\"><i class=\"fa fa-link\"></i></a>Heroku</h2>\n\n<p>Heroku にアプリを作成します。そして Go と Node.JS のビルドパックを追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>heroku create go-vuejs-heroku\nheroku buildpacks:add heroku/go --app go-vuejs-heroku\nheroku buildpacks:add heroku/nodejs --app go-vuejs-heroku\n</pre></div></div>\n\n<p>PostgreSQL と Redis のアドオンを追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>heroku addons:create heroku-postgresql:hobby-dev --app go-vuejs-heroku\nheroku addons:create heroku-redis:hobby-dev --app go-vuejs-heroku\n</pre></div></div>\n\n<p>PostgreSQL と Redis の接続情報は環境変数に入っているので、アプリ側が参照するように修正しておきます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>heroku config\n</pre></div></div>\n\n<p>デプロイ時に webpack でビルドできるように <code>NPM_CONFIG_PRODUCTION</code> を false にしておきます。そうしないと <code>devDependencies</code> のパッケージがインストールされません。ついでに Go のバージョン指定もしておきます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>heroku config:set NPM_CONFIG_PRODUCTION=false\nheroku config:set GOVERSION=go1.9\n</pre></div></div>\n\n<h3>\n<span id=\"別ディレクトリの-npm-を動かす\" class=\"fragment\"></span><a href=\"#%E5%88%A5%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AE-npm-%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99\"><i class=\"fa fa-link\"></i></a>別ディレクトリの npm を動かす</h3>\n\n<p>今回のサンプルアプリでは Go アプリの中に Vue.js のアプリを内包するようにしているので、 <code>package.json</code> はサブディレクトリにあります。そうすると Heroku の Node.JS ビルドパックではビルドしてくれません。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>.\n├── Procfile\n├── server.go\n└── vue-app\n    ├── package.json\n</pre></div></div>\n\n<p>そこで、ルートディレクトリにも <code>package.json</code> を配置してビルドコマンドを記述します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>touch package.json\n</pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>.\n├── Procfile\n├── server.go\n├── package.json\n└── vue-app\n    ├── package.json\n</pre></div></div>\n\n<p><code>postinstall</code> で vue-app ディレクトリの中で npm install と npm run build でビルドを実行しています。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"go-vuejs-heroku\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"engines\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"node\"</span><span class=\"p\">:</span> <span class=\"s2\">\"7.10.0\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"npm\"</span><span class=\"p\">:</span> <span class=\"s2\">\"4.2.0\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"scripts\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"postinstall\"</span><span class=\"p\">:</span> <span class=\"s2\">\"npm --prefix ./vue-app install ./vue-app &amp;&amp; cd ./vue-app &amp;&amp; npm run build\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"マイグレーションコマンドを実行\" class=\"fragment\"></span><a href=\"#%E3%83%9E%E3%82%A4%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E5%AE%9F%E8%A1%8C\"><i class=\"fa fa-link\"></i></a>マイグレーションコマンドを実行</h3>\n\n<p><code>Procfile</code> にリリース時に実行するコマンドを指定できます。そこでマイグレーションコマンドを実行指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"Procfile\"><div class=\"highlight\"><pre><span></span>release: goose postgres $DATABASE_URL up\nweb: go-vuejs-heroku\n</pre></div></div>\n\n<p>以上で、Heroku で Go と Vue.js を使った Web アプリケーションを動かすことができるようになりました。</p>\n",
    "body": "サーバサイドを Go で WebAPI として独立して作り、フロントは Vue.js で SPA チックに作り、Static な成果物（HTML/CSS/JS）を Go バイナリに内包して Heroku で動かすメモです。\n\nサンプルのソースコードはこちらです。\n\n- https://github.com/zaru/go-vuejs-heroku\n\n## 前提条件\n\n- Go 1.9+\n  - パッケージ管理: dep\n  - DBマイグレーション: pressly/goose\n- Vue.js 2.5+\n  - vue-cli\n  - ビルドツール: webpack\n- Heroku\n  - PostgreSQL\n  - Redis\n\n### デプロイの動作フロー\n\n- git push heroku master で Heroku にデプロイ\n- デプロイ\n  - dep で必要パッケージをインストール\n  - npm で必要パッケージをインストール\n  - Vue.js を webpack でビルド\n  - Go アプリをビルド\n  - マイグレーションコマンドをビルド\n  - マイグレーションコマンドを実行\n- デプロイ完了\n\n## Go\n\n### 初期設定\n\n```\ncd $GOPATH/your-name\nmkdir go-vuejs-heroku\ncd go-vuejs-heroku\n```\n\n### dep パッケージ管理\n\n```\ndep init\ndep ensure\n```\n\n#### Heroku でコマンドビルド\n\n`pressly/goose` のマイグレーションコマンドをデプロイ時に実行できるように、アプリのバイナリとは別にコマンドをビルドできる Heroku 用の設定を `Gopkg.toml` に追記します。\n\n```toml:Gopkg.toml\n[metadata.heroku]\n  root-package = \"github.com/zaru/go-vuejs-heroku\"\n  go-version = \"go1.9.1\"\n  install = [ \".\", \"./cmd/...\" ]\n  ensure = \"true\"\n```\n\nポイントは `install = [ \".\", \"./cmd/...\" ]` です。これは Heroku の環境変数である `GO_INSTALL_PACKAGE_SPEC` と同じ役割になります。 dep 以外の glide などのパッケージ管理の場合はこちらの環境変数を修正します。\n\n```\nheroku config:set GO_INSTALL_PACKAGE_SPEC=\". ./cmd/... \"\n```\n\n#### goose コマンドスクリプトを配置\n\n上記で設定したコマンドのスクリプト `cmd/goose/main.go` に下記コードを配置します。これは[公式で用意されているサンプルコード](https://github.com/pressly/goose/blob/master/cmd/goose/main.go)です。\n\n```go:cmd/goose/main.go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"flag\"\n\t\"log\"\n\t\"os\"\n\n\t_ \"github.com/lib/pq\"\n\t\"github.com/pressly/goose\"\n)\n\nvar (\n\tflags = flag.NewFlagSet(\"goose\", flag.ExitOnError)\n\tdir   = flags.String(\"dir\", \".\", \"directory with migration files\")\n)\n\nfunc main() {\n\tflags.Usage = usage\n\tflags.Parse(os.Args[1:])\n\n\targs := flags.Args()\n\n\tif len(args) > 1 && args[0] == \"create\" {\n\t\tif err := goose.Run(\"create\", nil, *dir, args[1:]...); err != nil {\n\t\t\tlog.Fatalf(\"goose run: %v\", err)\n\t\t}\n\t\treturn\n\t}\n\n\tif len(args) < 3 {\n\t\tflags.Usage()\n\t\treturn\n\t}\n\n\tif args[0] == \"-h\" || args[0] == \"--help\" {\n\t\tflags.Usage()\n\t\treturn\n\t}\n\n\tdriver, dbstring, command := args[0], args[1], args[2]\n\n\tswitch driver {\n\tcase \"postgres\", \"mysql\", \"sqlite3\", \"redshift\":\n\t\tif err := goose.SetDialect(driver); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\tdefault:\n\t\tlog.Fatalf(\"%q driver not supported\\n\", driver)\n\t}\n\n\tswitch dbstring {\n\tcase \"\":\n\t\tlog.Fatalf(\"-dbstring=%q not supported\\n\", dbstring)\n\tdefault:\n\t}\n\n\tif driver == \"redshift\" {\n\t\tdriver = \"postgres\"\n\t}\n\n\tdb, err := sql.Open(driver, dbstring)\n\tif err != nil {\n\t\tlog.Fatalf(\"-dbstring=%q: %v\\n\", dbstring, err)\n\t}\n\n\targuments := []string{}\n\tif len(args) > 3 {\n\t\targuments = append(arguments, args[3:]...)\n\t}\n\n\tif err := goose.Run(command, db, *dir, arguments...); err != nil {\n\t\tlog.Fatalf(\"goose run: %v\", err)\n\t}\n}\n\nfunc usage() {\n\tlog.Print(usagePrefix)\n\tflags.PrintDefaults()\n\tlog.Print(usageCommands)\n}\n\nvar (\n\tusagePrefix = `Usage: goose [OPTIONS] DRIVER DBSTRING COMMAND\nDrivers:\n    postgres\n    mysql\n    sqlite3\n    redshift\nExamples:\n    goose sqlite3 ./foo.db status\n    goose sqlite3 ./foo.db create init sql\n    goose sqlite3 ./foo.db create add_some_column sql\n    goose sqlite3 ./foo.db create fetch_user_data go\n    goose sqlite3 ./foo.db up\n    goose postgres \"user=postgres dbname=postgres sslmode=disable\" status\n    goose mysql \"user:password@/dbname?parseTime=true\" status\n    goose redshift \"postgres://user:password@qwerty.us-east-1.redshift.amazonaws.com:5439/db\" status\nOptions:\n`\n\n\tusageCommands = `\nCommands:\n    up                   Migrate the DB to the most recent version available\n    up-to VERSION        Migrate the DB to a specific VERSION\n    down                 Roll back the version by 1\n    down-to VERSION      Roll back to a specific VERSION\n    redo                 Re-run the latest migration\n    status               Dump the migration status for the current DB\n    version              Print the current version of the database\n    create NAME [sql|go] Creates new migration file with next version\n`\n)\n```\n\nこれによって dep の `Gopkg.lock` に `pressly/goose` が追記されるようになっていると思います。より明示的に指定したい場合は `Gopkg.toml` で管理しても良いかもしれません。\n\n```toml:Gopkg.toml\n[[constraint]]\n  name = \"github.com/pressly/goose\"\n  version = \"2.1.0\"\n```\n\n## Vue.js\n\n### 初期設定\n\n```\ncd $GOPATH/your-name/go-vuejs-heroku\nvue init webpack vue-app\ncd vue-app\nnpm install\n```\n\nVue.js は特別なことはないです。 vue-cli を使って webpack なアプリをテンプレを作っています。\n\n## Heroku\n\nHeroku にアプリを作成します。そして Go と Node.JS のビルドパックを追加します。\n\n```\nheroku create go-vuejs-heroku\nheroku buildpacks:add heroku/go --app go-vuejs-heroku\nheroku buildpacks:add heroku/nodejs --app go-vuejs-heroku\n```\n\nPostgreSQL と Redis のアドオンを追加します。\n\n```\nheroku addons:create heroku-postgresql:hobby-dev --app go-vuejs-heroku\nheroku addons:create heroku-redis:hobby-dev --app go-vuejs-heroku\n```\n\nPostgreSQL と Redis の接続情報は環境変数に入っているので、アプリ側が参照するように修正しておきます。\n\n```\nheroku config\n```\n\nデプロイ時に webpack でビルドできるように `NPM_CONFIG_PRODUCTION` を false にしておきます。そうしないと `devDependencies` のパッケージがインストールされません。ついでに Go のバージョン指定もしておきます。\n\n```\nheroku config:set NPM_CONFIG_PRODUCTION=false\nheroku config:set GOVERSION=go1.9\n```\n\n### 別ディレクトリの npm を動かす\n\n今回のサンプルアプリでは Go アプリの中に Vue.js のアプリを内包するようにしているので、 `package.json` はサブディレクトリにあります。そうすると Heroku の Node.JS ビルドパックではビルドしてくれません。\n\n```\n.\n├── Procfile\n├── server.go\n└── vue-app\n    ├── package.json\n```\n\nそこで、ルートディレクトリにも `package.json` を配置してビルドコマンドを記述します。\n\n```\ntouch package.json\n```\n\n```\n.\n├── Procfile\n├── server.go\n├── package.json\n└── vue-app\n    ├── package.json\n```\n\n`postinstall` で vue-app ディレクトリの中で npm install と npm run build でビルドを実行しています。\n\n```package.json\n{\n  \"name\": \"go-vuejs-heroku\",\n  \"version\": \"0.0.1\",\n  \"engines\": {\n    \"node\": \"7.10.0\",\n    \"npm\": \"4.2.0\"\n  },\n  \"scripts\": {\n    \"postinstall\": \"npm --prefix ./vue-app install ./vue-app && cd ./vue-app && npm run build\"\n  }\n}\n```\n\n### マイグレーションコマンドを実行\n\n`Procfile` にリリース時に実行するコマンドを指定できます。そこでマイグレーションコマンドを実行指定します。\n\n```Procfile\nrelease: goose postgres $DATABASE_URL up\nweb: go-vuejs-heroku\n```\n\n以上で、Heroku で Go と Vue.js を使った Web アプリケーションを動かすことができるようになりました。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-06T15:45:04+09:00",
    "group": null,
    "id": "a3e15236c25f39fbdcd6",
    "likes_count": 8,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Go",
        "versions": []
      },
      {
        "name": "Heroku",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "webpack",
        "versions": []
      }
    ],
    "title": "Go と Vue.js なアプリを Heroku で動かす",
    "updated_at": "2017-11-06T16:00:21+09:00",
    "url": "https://qiita.com/zaru/items/a3e15236c25f39fbdcd6",
    "user": {
      "description": "zaru / sakuraba\r\nwebpush gem https://rubygems.org/gems/webpush",
      "facebook_id": "zaru.hiroyuki.sakuraba",
      "followees_count": 63,
      "followers_count": 368,
      "github_login_name": "zaru",
      "id": "zaru",
      "items_count": 107,
      "linkedin_id": "",
      "location": "Tokyo, Japan",
      "name": "zaru",
      "organization": "Basic.inc",
      "permanent_id": 2152,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/2152/profile-images/1501661702",
      "twitter_screen_name": "zaru",
      "website_url": "http://tech.basicinc.jp/"
    }
  },
  {
    "rendered_body": "<p>大きく以下の4つの書き方があります（もっとあるかも）</p>\n\n<ol>\n<li><a href=\"#1%E6%96%87%E5%AD%97%E5%88%97\">文字列</a></li>\n<li><a href=\"#2x-template\">X-template</a></li>\n<li><a href=\"#3vue-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88\">.vue コンポーネント</a></li>\n<li><a href=\"#4%E6%8F%8F%E7%94%BB%E9%96%A2%E6%95%B0\">描画関数</a></li>\n</ol>\n\n<h2>\n<span id=\"1文字列\" class=\"fragment\"></span><a href=\"#1%E6%96%87%E5%AD%97%E5%88%97\"><i class=\"fa fa-link\"></i></a>1.文字列</h2>\n\n<p>一番スタンダードな方法と言えるでしょう。<br>\n文字通り文字列で記述します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">component</span><span class=\"p\">(</span><span class=\"s1\">'my-component'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"s1\">'&lt;div&gt;A custom component!&lt;/div&gt;'</span>\n<span class=\"p\">})</span>\n</pre></div></div>\n\n<p>また、tipsですがES6以上なら `` で囲むことによって複数行にまたがって記述することができるので可読性が上がります。<br><br>\nダブルクオート使うメリットもないはずなので、とりあえずこっち使っとくのがよいのではと思います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">component</span><span class=\"p\">(</span><span class=\"s1\">'my-component'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"sb\">`&lt;div&gt;</span>\n<span class=\"sb\">              A custom component!</span>\n<span class=\"sb\">             &lt;/div&gt;`</span>\n<span class=\"p\">})</span>\n</pre></div></div>\n\n<p>そして<a href=\"https://jp.vuejs.org/v2/guide/components.html#DOM-%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E8%A7%A3%E6%9E%90%E3%81%AE%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85\" rel=\"nofollow noopener\" target=\"_blank\">こちらの解説</a>に詳しいんですが、<br>\nいくつかのタグには制約(例えば<code>&lt;ul&gt;</code>タグの直下には<code>li</code>しか表示できない、みたいな)が存在しており、<br>\nそれをエラーとして検出できるのはこの記述方法のみとのことです。<br>\nおかしなDOMを作ることを検知できるのは一つのメリットかもしれません。</p>\n\n<h2>\n<span id=\"2x-template\" class=\"fragment\"></span><a href=\"#2x-template\"><i class=\"fa fa-link\"></i></a>2.X-template</h2>\n\n<p>参照:<a href=\"https://jp.vuejs.org/v2/guide/components.html#x-template\" rel=\"nofollow noopener\" target=\"_blank\">https://jp.vuejs.org/v2/guide/components.html#x-template</a></p>\n\n<p>こんな感じでHTML内に定義して</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/x-template\"</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"my-component\"</span><span class=\"p\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"nx\">A</span> <span class=\"nx\">custom</span> <span class=\"nx\">component</span><span class=\"o\">!&lt;</span><span class=\"err\">/div&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre></div></div>\n\n<p>JSからはID指定で読み込むことができます。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">component</span><span class=\"p\">(</span><span class=\"s1\">'my-component'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"s1\">'#my-component'</span>\n<span class=\"p\">})</span>\n</pre></div></div>\n\n<p>JS内からはID指定するのみなので大分さっぱりします。<br>\nただドキュメントでも言及されている通り、テンプレートの記述がコンポーネントから分離されて<br>\n管理が煩雑になりそうなので、プロダクションで使うには良い選択肢ではなさそうです。</p>\n\n<h2>\n<span id=\"3vue-コンポーネント\" class=\"fragment\"></span><a href=\"#3vue-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>3.<code>.vue</code> コンポーネント</h2>\n\n<p>参考:<a href=\"https://qiita.com/tkhr/items/ac22019c891fe8fa5f91\" id=\"reference-ac57de6123d7d224b1aa\">vue.jsのcomponentをwebpackで.vueにして単一ファイルコンポーネントにする</a></p>\n\n<p><code>.vue</code>の拡張子のファイルを作成し、下記のようにtemplateを記述します。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">my-component.vue</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>A custom component!<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n\n<p>JSからは以下のように読み込めます。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"nx\">from</span> <span class=\"nx\">MyComponent</span> <span class=\"kr\">import</span> <span class=\"s1\">'./my-component.vue'</span><span class=\"p\">;</span>\n\n<span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n  <span class=\"nx\">el</span><span class=\"o\">:</span> <span class=\"s1\">'#example'</span><span class=\"p\">,</span>\n  <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">MyComponent</span> <span class=\"p\">},</span>\n  <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"s1\">'&lt;my-component&gt;'</span>\n<span class=\"p\">})</span>\n</pre></div></div>\n\n<p>メリットについては上記の参考記事にすごくよくまとまっているので、是非ご参照ください。<br>\n個人的にはこの書き方が一番幸せになれそうな予感がしています。</p>\n\n<h2>\n<span id=\"4描画関数\" class=\"fragment\"></span><a href=\"#4%E6%8F%8F%E7%94%BB%E9%96%A2%E6%95%B0\"><i class=\"fa fa-link\"></i></a>4.描画関数</h2>\n\n<p>参照: <a href=\"https://jp.vuejs.org/v2/guide/render-function.html\" rel=\"nofollow noopener\" target=\"_blank\">https://jp.vuejs.org/v2/guide/render-function.html</a><br>\n厳密には<code>templateの書き方</code>ではなく<code>templateを代替するもの</code>という捉え方の方が適切っぽいです。</p>\n\n<p>ドキュメントの例をそのまま拝借します。<br>\n下記のようなHTMLの構成のコンポーネントを作成、また、<code>h*</code>タグ の数字の部分をコンポーネントのpropsのlevelによって決めたいとします。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span> <span class=\"c\">&lt;!-- ここをlevelによって変動させたい --&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"hello-world\"</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"#hello-world\"</span><span class=\"p\">&gt;</span>\n    Hello world!\n  <span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n</pre></div></div>\n\n<p>愚直にtemplateでやろうとすると下記のようになってしまいます</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/x-template\"</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"anchored-heading-template\"</span><span class=\"p\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">h1</span> <span class=\"nx\">v</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"o\">=</span><span class=\"s2\">\"level === 1\"</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">slot</span><span class=\"o\">&gt;&lt;</span><span class=\"err\">/slot&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"err\">/h1&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">h2</span> <span class=\"nx\">v</span><span class=\"o\">-</span><span class=\"k\">else</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"o\">=</span><span class=\"s2\">\"level === 2\"</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">slot</span><span class=\"o\">&gt;&lt;</span><span class=\"err\">/slot&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"err\">/h2&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">h3</span> <span class=\"nx\">v</span><span class=\"o\">-</span><span class=\"k\">else</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"o\">=</span><span class=\"s2\">\"level === 3\"</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">slot</span><span class=\"o\">&gt;&lt;</span><span class=\"err\">/slot&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"err\">/h3&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">h4</span> <span class=\"nx\">v</span><span class=\"o\">-</span><span class=\"k\">else</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"o\">=</span><span class=\"s2\">\"level === 4\"</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">slot</span><span class=\"o\">&gt;&lt;</span><span class=\"err\">/slot&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"err\">/h4&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">h5</span> <span class=\"nx\">v</span><span class=\"o\">-</span><span class=\"k\">else</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"o\">=</span><span class=\"s2\">\"level === 5\"</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">slot</span><span class=\"o\">&gt;&lt;</span><span class=\"err\">/slot&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"err\">/h5&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">h6</span> <span class=\"nx\">v</span><span class=\"o\">-</span><span class=\"k\">else</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"o\">=</span><span class=\"s2\">\"level === 6\"</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">slot</span><span class=\"o\">&gt;&lt;</span><span class=\"err\">/slot&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"err\">/h6&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre></div></div>\n\n<p>いかにも冗長ですね。<br>\nこれをRender関数を使えば以下のように書けます。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">component</span><span class=\"p\">(</span><span class=\"s1\">'anchored-heading'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">render</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">createElement</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">createElement</span><span class=\"p\">(</span>\n      <span class=\"s1\">'h'</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">level</span><span class=\"p\">,</span>   <span class=\"c1\">// タグ名</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$slots</span><span class=\"p\">.</span><span class=\"k\">default</span> <span class=\"c1\">// 子の配列</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">props</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">level</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"nb\">Number</span><span class=\"p\">,</span>\n      <span class=\"nx\">required</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre></div></div>\n\n<p>また、<a href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx\" rel=\"nofollow noopener\" target=\"_blank\">Babelプラグイン</a>を使えば以下のようにJSXで記述することもできるみたいです。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nx\">AnchoredHeading</span> <span class=\"nx\">from</span> <span class=\"s1\">'./AnchoredHeading.vue'</span>\n\n<span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n  <span class=\"nx\">el</span><span class=\"o\">:</span> <span class=\"s1\">'#demo'</span><span class=\"p\">,</span>\n  <span class=\"nx\">render</span> <span class=\"p\">(</span><span class=\"nx\">h</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">AnchoredHeading</span> <span class=\"nx\">level</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">span</span><span class=\"o\">&gt;</span><span class=\"nx\">Hello</span><span class=\"o\">&lt;</span><span class=\"err\">/span&gt; world!</span>\n      <span class=\"o\">&lt;</span><span class=\"err\">/AnchoredHeading&gt;</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre></div></div>\n\n<p>よりプログラマブルにDOMの中身を出し分けたいという場合に描画関数が適している状況もありそうです。<br>\nちょっと私の経験では動的にタグ名とかを書き換えたい、の様などうしても動的に出し分けないと辛いみたいな要求に出会ったことがないので、文字列でサクッと書くことに比べた有用性がイメージしづらいですが、知識として知っておいて損はない書き方かなと感じました。</p>\n",
    "body": "大きく以下の4つの書き方があります（もっとあるかも）\n\n1. [文字列](#1%E6%96%87%E5%AD%97%E5%88%97)\n2. [X-template](#2x-template)\n3. [.vue コンポーネント](#3vue-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88)\n4. [描画関数](#4%E6%8F%8F%E7%94%BB%E9%96%A2%E6%95%B0)\n\n1.文字列\n------------------------------\n一番スタンダードな方法と言えるでしょう。\n文字通り文字列で記述します。\n\n```js\nVue.component('my-component', {\n  template: '<div>A custom component!</div>'\n})\n```\n\nまた、tipsですがES6以上なら `` で囲むことによって複数行にまたがって記述することができるので可読性が上がります。  \nダブルクオート使うメリットもないはずなので、とりあえずこっち使っとくのがよいのではと思います。\n\n```js\nVue.component('my-component', {\n  template: `<div>\n              A custom component!\n             </div>`\n})\n```\n\nそして[こちらの解説](https://jp.vuejs.org/v2/guide/components.html#DOM-テンプレート解析の注意事項)に詳しいんですが、\nいくつかのタグには制約(例えば`<ul>`タグの直下には`li`しか表示できない、みたいな)が存在しており、\nそれをエラーとして検出できるのはこの記述方法のみとのことです。\nおかしなDOMを作ることを検知できるのは一つのメリットかもしれません。\n\n2.X-template\n------------------------------\n参照:[https://jp.vuejs.org/v2/guide/components.html#x-template](https://jp.vuejs.org/v2/guide/components.html#x-template)\n\nこんな感じでHTML内に定義して\n\n```html\n<script type=\"text/x-template\" id=\"my-component\">\n  <div>A custom component!</div>\n</script>\n```\n\nJSからはID指定で読み込むことができます。\n\n\n```js\nVue.component('my-component', {\n  template: '#my-component'\n})\n```\n\nJS内からはID指定するのみなので大分さっぱりします。\nただドキュメントでも言及されている通り、テンプレートの記述がコンポーネントから分離されて\n管理が煩雑になりそうなので、プロダクションで使うには良い選択肢ではなさそうです。\n\n3.`.vue` コンポーネント\n------------------------------\n参考:[vue.jsのcomponentをwebpackで.vueにして単一ファイルコンポーネントにする](https://qiita.com/tkhr/items/ac22019c891fe8fa5f91)\n\n`.vue`の拡張子のファイルを作成し、下記のようにtemplateを記述します。\n\n```html:my-component.vue\n<template>\n  <div>A custom component!</div>\n</template>\n```\n\nJSからは以下のように読み込めます。\n\n```js\nfrom MyComponent import './my-component.vue';\n\nnew Vue({\n  el: '#example',\n  components: { MyComponent },\n  template: '<my-component>'\n})\n```\n\nメリットについては上記の参考記事にすごくよくまとまっているので、是非ご参照ください。\n個人的にはこの書き方が一番幸せになれそうな予感がしています。\n\n4.描画関数\n------------------------------\n参照: [https://jp.vuejs.org/v2/guide/render-function.html](https://jp.vuejs.org/v2/guide/render-function.html)\n厳密には`templateの書き方`ではなく`templateを代替するもの`という捉え方の方が適切っぽいです。\n\nドキュメントの例をそのまま拝借します。\n下記のようなHTMLの構成のコンポーネントを作成、また、`h*`タグ の数字の部分をコンポーネントのpropsのlevelによって決めたいとします。\n\n```html\n<h1> <!-- ここをlevelによって変動させたい -->\n  <a name=\"hello-world\" href=\"#hello-world\">\n    Hello world!\n  </a>\n</h1>\n```\n\n愚直にtemplateでやろうとすると下記のようになってしまいます\n\n```html\n<script type=\"text/x-template\" id=\"anchored-heading-template\">\n  <h1 v-if=\"level === 1\">\n    <slot></slot>\n  </h1>\n  <h2 v-else-if=\"level === 2\">\n    <slot></slot>\n  </h2>\n  <h3 v-else-if=\"level === 3\">\n    <slot></slot>\n  </h3>\n  <h4 v-else-if=\"level === 4\">\n    <slot></slot>\n  </h4>\n  <h5 v-else-if=\"level === 5\">\n    <slot></slot>\n  </h5>\n  <h6 v-else-if=\"level === 6\">\n    <slot></slot>\n  </h6>\n</script>\n```\n\nいかにも冗長ですね。\nこれをRender関数を使えば以下のように書けます。\n\n```js\nVue.component('anchored-heading', {\n  render: function (createElement) {\n    return createElement(\n      'h' + this.level,   // タグ名\n      this.$slots.default // 子の配列\n    )\n  },\n  props: {\n    level: {\n      type: Number,\n      required: true\n    }\n  }\n})\n```\n\nまた、[Babelプラグイン](https://github.com/vuejs/babel-plugin-transform-vue-jsx)を使えば以下のようにJSXで記述することもできるみたいです。\n\n```js\nimport AnchoredHeading from './AnchoredHeading.vue'\n\nnew Vue({\n  el: '#demo',\n  render (h) {\n    return (\n      <AnchoredHeading level={1}>\n        <span>Hello</span> world!\n      </AnchoredHeading>\n    )\n  }\n})\n```\n\nよりプログラマブルにDOMの中身を出し分けたいという場合に描画関数が適している状況もありそうです。\nちょっと私の経験では動的にタグ名とかを書き換えたい、の様などうしても動的に出し分けないと辛いみたいな要求に出会ったことがないので、文字列でサクッと書くことに比べた有用性がイメージしづらいですが、知識として知っておいて損はない書き方かなと感じました。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-06T15:30:44+09:00",
    "group": null,
    "id": "93a0055c8fdab62d584f",
    "likes_count": 8,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "JavaScript",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      }
    ],
    "title": "【Vue.js】コンポーネントのtemplateの書き方まとめ",
    "updated_at": "2017-11-06T17:05:58+09:00",
    "url": "https://qiita.com/Norise/items/93a0055c8fdab62d584f",
    "user": {
      "description": "某ユーザ中心系企業でエンジニアしてます。\r\n最近はReact.jsでのフロント開発が主です。",
      "facebook_id": "",
      "followees_count": 1,
      "followers_count": 3,
      "github_login_name": "kazuyaseki",
      "id": "Norise",
      "items_count": 16,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "beBit, Inc.",
      "permanent_id": 150569,
      "profile_image_url": "https://avatars.githubusercontent.com/u/6080698?v=3",
      "twitter_screen_name": "sekikazu01",
      "website_url": ""
    }
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>過去記事にてGoogle HomeからIFTTTを経由しローカルのラズパイを操作するにあたり、グローバル→ローカルの接続に<a href=\"https://firebase.google.com/\" rel=\"nofollow noopener\" target=\"_blank\">Firebase</a>を使用してみました。<br>\nそのときはRealtime Databaseのみの使用でしたが、FunctionsやHosting等結構色んなことができそうだったので試しにオンライン○✕ゲームを作ってみました。</p>\n\n<p>Webアプリは5年ぐらい前にXAMPP+WordPressとかでめちゃくそ簡単なコンテツ管理サイトを作ったことがあるぐらいで、現在のWeb環境は浦島太郎状態です。<br>\n調べてみたら今はJSフレームワークが主流でもうjQueryも使わない時代になってるんですね…<br>\n<a href=\"http://kikuchi1201.hateblo.jp/entry/2016/10/26/172404\" rel=\"nofollow noopener\" target=\"_blank\">【翻訳】 2016年にJavaScriptを学んでどう感じたか</a></p>\n\n<p>とりあえず学習コストも低いらしい<a href=\"https://jp.vuejs.org/index.html\" rel=\"nofollow noopener\" target=\"_blank\">Vue.js</a>ってのを使ってFirebase上で○✕ゲームを実装してみようと思います。</p>\n\n<p>なお完成品は<a href=\"#%E5%AE%8C%E6%88%90%E5%93%81\">こちら</a>です。</p>\n\n<p><strong>※2017/11/11追記　Google Homeでも○✕ゲームできるようにしました。</strong><br>\n<a href=\"https://qiita.com/miso_develop/items/7a41e74d178920e926a8\" id=\"reference-847c5649e9c2079906e1\">Google Homeと○✕ゲームしてみる</a></p>\n\n<h1>\n<span id=\"firebaseプロジェクトの作成\" class=\"fragment\"></span><a href=\"#firebase%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>Firebaseプロジェクトの作成</h1>\n\n<p>まずはFirebaseの<a href=\"https://console.firebase.google.com/\" rel=\"nofollow noopener\" target=\"_blank\">コンソール画面</a>へアクセスしプロジェクトを作成しましょう。</p>\n\n<p>「ox-game」とか適当にプロジェクト名をつけて、国を日本にして作成をクリックしたらコンソール画面での操作は完了です。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/472074e5e0716ab2f584e0fdbdfbfbb3dc7ab56a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3230373130392f66333235363639302d396462642d623832652d326431372d6638666163356135303263372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/472074e5e0716ab2f584e0fdbdfbfbb3dc7ab56a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3230373130392f66333235363639302d396462642d623832652d326431372d6638666163356135303263372e706e67\" alt=\"Firebase console_20171105_185257.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/207109/f3256690-9dbd-b82e-2d17-f8fac5a502c7.png\"></a></p>\n\n<p>以降の作業はNode.jsにて行います。</p>\n\n<h1>\n<span id=\"nodejsのインストール\" class=\"fragment\"></span><a href=\"#nodejs%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>Node.jsのインストール</h1>\n\n<p>Firebaseのローカルでのプロジェクト管理はNode.jsで行います。<br>\nまずはNode.jsをインストールしましょう。<br>\nなお私はWindows10 Proにて操作しました。</p>\n\n<p>以下の記事あたりを参考にインストールしてみて下さい。<br>\n<a href=\"https://qiita.com/t_kojima/items/780b3b3133a17cceb175\" id=\"reference-3a4c2ed287d1f070297b\">Windowsでnode.jsをバージョン管理する</a></p>\n\n<h1>\n<span id=\"firebase-toolsのインストール\" class=\"fragment\"></span><a href=\"#firebase-tools%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>firebase-toolsのインストール</h1>\n\n<p>続いて「firebase-tools」というFirebaseプロジェクトを管理するツールをインストールします。<br>\n<code>-g</code>オプションをつけてグローバルでインストールして下さい。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>npm install -g firebase-tools\n</pre></div></div>\n\n<h1>\n<span id=\"firebaseへのログイン\" class=\"fragment\"></span><a href=\"#firebase%E3%81%B8%E3%81%AE%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3\"><i class=\"fa fa-link\"></i></a>Firebaseへのログイン</h1>\n\n<p>以下のコマンドを実行し、表示されるウインドウよりログインして下さい。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>firebase login\n</pre></div></div>\n\n<h1>\n<span id=\"ローカルプロジェクトの作成\" class=\"fragment\"></span><a href=\"#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>ローカルプロジェクトの作成</h1>\n\n<p>次にローカルプロジェクトを作成します。<br>\n適当にプロジェクト用のフォルダをきって以下のコマンドを実行します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>firebase init\n</pre></div></div>\n\n<p>コマンド上で色々聞かれます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>? Are you ready to proceed? (Y/n)\n</pre></div></div>\n\n<p>ここはそのままEnter。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>? Which Firebase CLI features do you want to setup for this folder? Press Space\n to select features, then Enter to confirm your choices. (Press &lt;space&gt; to sele\nct)\n&gt;( ) Database: Deploy Firebase Realtime Database Rules\n ( ) Firestore: Deploy rules and create indexes for Firestore\n ( ) Functions: Configure and deploy Cloud Functions\n ( ) Hosting: Configure and deploy Firebase Hosting sites\n ( ) Storage: Deploy Cloud Storage security rules\n</pre></div></div>\n\n<p>これは<code>Database</code>と<code>Hosting</code>の2つをスペースで選択しEnter。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>=== Project Setup\n\nFirst, let's associate this project directory with a Firebase project.\nYou can create multiple project aliases by running firebase use --add,\nbut for now we'll just set up a default project.\n\n? Select a default Firebase project for this directory: (Use arrow keys)\n&gt; [don't setup a default project]\n  ox-game (ox-game-85a2f)\n  [create a new project]\n</pre></div></div>\n\n<p>これは先ほどコンソールにて作成したプロジェクトを選びます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>=== Database Setup\n\nFirebase Realtime Database Rules allow you to define how your data should be\nstructured and when your data can be read from and written to.\n\n? What file should be used for Database Rules? (database.rules.json)\n</pre></div></div>\n\n<p>Databaseの読み書き権限を定義するファイルです。<br>\nそのままEnterしちゃいましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>=== Hosting Setup\n\nYour public directory is the folder (relative to your project directory) that\nwill contain Hosting assets to be uploaded with firebase deploy. If you\nhave a build process for your assets, use your build's output directory.\n\n? What do you want to use as your public directory? (public)\n</pre></div></div>\n\n<p>Hositingするファイルを格納するフォルダ名の指定です。<br>\nここもそのままEnterで。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>? Configure as a single-page app (rewrite all urls to /index.html)? (y/N)\n</pre></div></div>\n\n<p>SPA(Single Page Application)にしますかと聞かれます。<br>\nとりあえず<code>y</code>で</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>+  Wrote public/index.html\n\ni  Writing configuration info to firebase.json...\ni  Writing project information to .firebaserc...\n\n+  Firebase initialization complete!\n</pre></div></div>\n\n<p>これでローカルプロジェクトが初期化されます。<br>\nフォルダ内に色々ファイルが作成されました。</p>\n\n<p>このうち<code>database.rules.json</code>がDatabaseへの読み書き権限を定義するファイルになります。<br>\nデフォルトだと認証しないと読み書きできないようになっているので、今回は誰でも読み書きできるよう、以下のように書き換えちゃいましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">database.rules.json</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">\"rules\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\".read\"</span><span class=\"p\">:</span> <span class=\"s2\">\"true\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\".write\"</span><span class=\"p\">:</span> <span class=\"s2\">\"true\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>以上でローカルプロジェクトの作成は完了です。</p>\n\n<h1>\n<span id=\"実装\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A3%85\"><i class=\"fa fa-link\"></i></a>実装</h1>\n\n<p>アプリのソースは<code>public</code>フォルダ配下になります。<br>\nこのフォルダの中身がFirebaseのサーバにアップされます。</p>\n\n<p>今ある<code>index.html</code>を書き換え、Vue.jsで実装したjsファイルを追加しましょう。</p>\n\n<p>ソースは以下のGithubリポジトリにあります。<br>\n初めてGithubにアップしてみました。<br>\n（アップって言い方はもしかしてナウくない…？）</p>\n\n<p><a href=\"https://github.com/miso-develop/ox-game/tree/master/public\" rel=\"nofollow noopener\" target=\"_blank\">miso-develop/ox-game/public/<br>\n</a></p>\n\n<p>ポイントとしては<code>data.sync</code>にDatabaseとまるっきり同じデータを持ち、更新時にはそれをそのままDatabaseへ上書きし、Database更新時にそのまま受け取ってローカルデータを上書いてます。<br>\n<code>data.sync.host</code>や<code>data.sync.guest</code>は一度書き込まれれば更新のないデータなので通信の無駄ですが、mBaaSっぽさを味わうべくまるっとやりとりしてます。</p>\n\n<h1>\n<span id=\"デプロイ\" class=\"fragment\"></span><a href=\"#%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\"><i class=\"fa fa-link\"></i></a>デプロイ</h1>\n\n<p>最後に以下のコマンドでFirebaseへデプロイします。<br>\n少し時間かかります。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>firebase deploy\n</pre></div></div>\n\n<p>デプロイが完了すると<br>\n以下の結果が表示されます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>=== Deploying to 'ox-game-85a2f'...\n\ni  deploying database, hosting\ni  database: checking rules syntax...\n+  database: rules syntax is valid\ni  hosting: preparing public directory for upload...\n+  hosting: 2 files uploaded successfully\ni  database: releasing rules...\n+  database: rules released successfully\n\n+  Deploy complete!\n\nProject Console: https://console.firebase.google.com/project/ox-game-85a2f/overview\nHosting URL: https://ox-game-85a2f.firebaseapp.com\n</pre></div></div>\n\n<p>最後の<code>Hosting URL</code>がWebアプリのURLになります。</p>\n\n<h1>\n<span id=\"完成品\" class=\"fragment\"></span><a href=\"#%E5%AE%8C%E6%88%90%E5%93%81\"><i class=\"fa fa-link\"></i></a>完成品</h1>\n\n<p>こうしてできたアプリがこちらになります。<br>\n<strong>「<a href=\"https://ox-game-85a2f.firebaseapp.com/\" rel=\"nofollow noopener\" target=\"_blank\">OX GAME</a>」</strong></p>\n\n<p>[ロビー画面]<br>\n<a href=\"https://camo.qiitausercontent.com/da5839778905527a81029cd07452461be4ce1272/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3230373130392f32653262333663652d616664332d353166662d303762612d3631303634313637633539612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/da5839778905527a81029cd07452461be4ce1272/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3230373130392f32653262333663652d616664332d353166662d303762612d3631303634313637633539612e706e67\" alt=\"OX GAME_20171105_201023.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/207109/2e2b36ce-afd3-51ff-07ba-61064167c59a.png\"></a></p>\n\n<p>[ゲーム画面]<br>\n<a href=\"https://camo.qiitausercontent.com/9f4a2af0966477985fdcaa8b4f80991c549c1835/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3230373130392f37383533613930312d346130312d323533312d303939612d3361366330373561656566642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/9f4a2af0966477985fdcaa8b4f80991c549c1835/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3230373130392f37383533613930312d346130312d323533312d303939612d3361366330373561656566642e706e67\" alt=\"OX GAME_20171105_201045.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/207109/7853a901-4a01-2531-099a-3a6c075aeefd.png\"></a></p>\n\n<p>なお以下のブラウザで動作確認しています。<br>\n* Windows Chrome<br>\n* Windows Firefox<br>\n* Android Chrome</p>\n\n<h1>\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n\n<p>Firebaseすごいですね。<br>\nこれだけの機能が簡単に使えちゃうなんて。<br>\nFunctionsでWeb APIの実装もできたりするし、認証機能もあるので、簡単なWebサイトやアプリはこれだけで十分作れちゃいますね。</p>\n\n<p>Vue.jsは私のような化石jQuery脳には戸惑うことも多かったですが、手を動かして実装してみるとこれは便利かもって実感が沸いてきます。<br>\n今回の○✕ゲームのような見た目放置なプログラムだとほとんどjs側ばかりいじってれば済みました。</p>\n",
    "body": "\n# はじめに\n過去記事にてGoogle HomeからIFTTTを経由しローカルのラズパイを操作するにあたり、グローバル→ローカルの接続に[Firebase](https://firebase.google.com/)を使用してみました。\nそのときはRealtime Databaseのみの使用でしたが、FunctionsやHosting等結構色んなことができそうだったので試しにオンライン○✕ゲームを作ってみました。\n\nWebアプリは5年ぐらい前にXAMPP+WordPressとかでめちゃくそ簡単なコンテツ管理サイトを作ったことがあるぐらいで、現在のWeb環境は浦島太郎状態です。\n調べてみたら今はJSフレームワークが主流でもうjQueryも使わない時代になってるんですね…\n[【翻訳】 2016年にJavaScriptを学んでどう感じたか](http://kikuchi1201.hateblo.jp/entry/2016/10/26/172404)\n\nとりあえず学習コストも低いらしい[Vue.js](https://jp.vuejs.org/index.html)ってのを使ってFirebase上で○✕ゲームを実装してみようと思います。\n\nなお完成品は[こちら](#完成品)です。\n\n**※2017/11/11追記　Google Homeでも○✕ゲームできるようにしました。**\n[Google Homeと○✕ゲームしてみる](https://qiita.com/miso_develop/items/7a41e74d178920e926a8)\n\n\n# Firebaseプロジェクトの作成\nまずはFirebaseの[コンソール画面](https://console.firebase.google.com/)へアクセスしプロジェクトを作成しましょう。\n\n「ox-game」とか適当にプロジェクト名をつけて、国を日本にして作成をクリックしたらコンソール画面での操作は完了です。\n\n![Firebase console_20171105_185257.png](https://qiita-image-store.s3.amazonaws.com/0/207109/f3256690-9dbd-b82e-2d17-f8fac5a502c7.png)\n\n以降の作業はNode.jsにて行います。\n\n\n\n# Node.jsのインストール\nFirebaseのローカルでのプロジェクト管理はNode.jsで行います。\nまずはNode.jsをインストールしましょう。\nなお私はWindows10 Proにて操作しました。\n\n以下の記事あたりを参考にインストールしてみて下さい。\n[Windowsでnode.jsをバージョン管理する](https://qiita.com/t_kojima/items/780b3b3133a17cceb175)\n\n\n\n# firebase-toolsのインストール\n続いて「firebase-tools」というFirebaseプロジェクトを管理するツールをインストールします。\n`-g`オプションをつけてグローバルでインストールして下さい。\n\n```\nnpm install -g firebase-tools\n```\n\n\n\n# Firebaseへのログイン\n以下のコマンドを実行し、表示されるウインドウよりログインして下さい。\n\n```\nfirebase login\n```\n\n\n\n# ローカルプロジェクトの作成\n次にローカルプロジェクトを作成します。\n適当にプロジェクト用のフォルダをきって以下のコマンドを実行します。\n\n```\nfirebase init\n```\n\nコマンド上で色々聞かれます。\n\n```\n? Are you ready to proceed? (Y/n)\n```\n\nここはそのままEnter。\n\n```\n? Which Firebase CLI features do you want to setup for this folder? Press Space\n to select features, then Enter to confirm your choices. (Press <space> to sele\nct)\n>( ) Database: Deploy Firebase Realtime Database Rules\n ( ) Firestore: Deploy rules and create indexes for Firestore\n ( ) Functions: Configure and deploy Cloud Functions\n ( ) Hosting: Configure and deploy Firebase Hosting sites\n ( ) Storage: Deploy Cloud Storage security rules\n```\n\nこれは`Database`と`Hosting`の2つをスペースで選択しEnter。\n\n```\n=== Project Setup\n\nFirst, let's associate this project directory with a Firebase project.\nYou can create multiple project aliases by running firebase use --add,\nbut for now we'll just set up a default project.\n\n? Select a default Firebase project for this directory: (Use arrow keys)\n> [don't setup a default project]\n  ox-game (ox-game-85a2f)\n  [create a new project]\n```\n\nこれは先ほどコンソールにて作成したプロジェクトを選びます。\n\n\n```\n=== Database Setup\n\nFirebase Realtime Database Rules allow you to define how your data should be\nstructured and when your data can be read from and written to.\n\n? What file should be used for Database Rules? (database.rules.json)\n```\n\nDatabaseの読み書き権限を定義するファイルです。\nそのままEnterしちゃいましょう。\n\n\n```\n=== Hosting Setup\n\nYour public directory is the folder (relative to your project directory) that\nwill contain Hosting assets to be uploaded with firebase deploy. If you\nhave a build process for your assets, use your build's output directory.\n\n? What do you want to use as your public directory? (public)\n```\n\nHositingするファイルを格納するフォルダ名の指定です。\nここもそのままEnterで。\n\n\n```\n? Configure as a single-page app (rewrite all urls to /index.html)? (y/N)\n```\n\nSPA(Single Page Application)にしますかと聞かれます。\nとりあえず`y`で\n\n```\n+  Wrote public/index.html\n\ni  Writing configuration info to firebase.json...\ni  Writing project information to .firebaserc...\n\n+  Firebase initialization complete!\n```\n\nこれでローカルプロジェクトが初期化されます。\nフォルダ内に色々ファイルが作成されました。\n\nこのうち`database.rules.json`がDatabaseへの読み書き権限を定義するファイルになります。\nデフォルトだと認証しないと読み書きできないようになっているので、今回は誰でも読み書きできるよう、以下のように書き換えちゃいましょう。\n\n\n```json:database.rules.json\n{\n  \"rules\": {\n    \".read\": \"true\",\n    \".write\": \"true\"\n  }\n}\n```\n\n以上でローカルプロジェクトの作成は完了です。\n\n\n\n# 実装\nアプリのソースは`public`フォルダ配下になります。\nこのフォルダの中身がFirebaseのサーバにアップされます。\n\n今ある`index.html`を書き換え、Vue.jsで実装したjsファイルを追加しましょう。\n\nソースは以下のGithubリポジトリにあります。\n初めてGithubにアップしてみました。\n（アップって言い方はもしかしてナウくない…？）\n\n[miso-develop/ox-game/public/\n](https://github.com/miso-develop/ox-game/tree/master/public)\n\nポイントとしては`data.sync`にDatabaseとまるっきり同じデータを持ち、更新時にはそれをそのままDatabaseへ上書きし、Database更新時にそのまま受け取ってローカルデータを上書いてます。\n`data.sync.host`や`data.sync.guest`は一度書き込まれれば更新のないデータなので通信の無駄ですが、mBaaSっぽさを味わうべくまるっとやりとりしてます。\n\n\n\n# デプロイ\n最後に以下のコマンドでFirebaseへデプロイします。\n少し時間かかります。\n\n```\nfirebase deploy\n```\n\nデプロイが完了すると\n以下の結果が表示されます。\n\n```\n=== Deploying to 'ox-game-85a2f'...\n\ni  deploying database, hosting\ni  database: checking rules syntax...\n+  database: rules syntax is valid\ni  hosting: preparing public directory for upload...\n+  hosting: 2 files uploaded successfully\ni  database: releasing rules...\n+  database: rules released successfully\n\n+  Deploy complete!\n\nProject Console: https://console.firebase.google.com/project/ox-game-85a2f/overview\nHosting URL: https://ox-game-85a2f.firebaseapp.com\n```\n\n最後の`Hosting URL`がWebアプリのURLになります。\n\n\n\n# 完成品\nこうしてできたアプリがこちらになります。\n**「[OX GAME](https://ox-game-85a2f.firebaseapp.com/)」**\n\n[ロビー画面]\n![OX GAME_20171105_201023.png](https://qiita-image-store.s3.amazonaws.com/0/207109/2e2b36ce-afd3-51ff-07ba-61064167c59a.png)\n\n[ゲーム画面]\n![OX GAME_20171105_201045.png](https://qiita-image-store.s3.amazonaws.com/0/207109/7853a901-4a01-2531-099a-3a6c075aeefd.png)\n\nなお以下のブラウザで動作確認しています。\n* Windows Chrome\n* Windows Firefox\n* Android Chrome\n\n\n\n# おわりに\nFirebaseすごいですね。\nこれだけの機能が簡単に使えちゃうなんて。\nFunctionsでWeb APIの実装もできたりするし、認証機能もあるので、簡単なWebサイトやアプリはこれだけで十分作れちゃいますね。\n\nVue.jsは私のような化石jQuery脳には戸惑うことも多かったですが、手を動かして実装してみるとこれは便利かもって実感が沸いてきます。\n今回の○✕ゲームのような見た目放置なプログラムだとほとんどjs側ばかりいじってれば済みました。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-06T08:58:20+09:00",
    "group": null,
    "id": "c2061519bb458e22f7d3",
    "likes_count": 8,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Node.js",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "Firebase",
        "versions": []
      }
    ],
    "title": "FirebaseとVue.jsで作るオンライン○✕ゲーム",
    "updated_at": "2017-11-11T00:13:47+09:00",
    "url": "https://qiita.com/miso_develop/items/c2061519bb458e22f7d3",
    "user": {
      "description": "Google Homeの購入を機にIT情報収集のためTwitter、Qiitaを始めました。\r\n分からないことがあったら相談したり答えたりしたいので是非ともフォローお願いします！",
      "facebook_id": "",
      "followees_count": 77,
      "followers_count": 22,
      "github_login_name": "miso-develop",
      "id": "miso_develop",
      "items_count": 8,
      "linkedin_id": "",
      "location": "Tokyo",
      "name": "田中 みそ",
      "organization": "",
      "permanent_id": 207109,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/207109/profile-images/1509867100",
      "twitter_screen_name": "miso_develop",
      "website_url": ""
    }
  },
  {
    "rendered_body": "<p>自前でVue.jsのカルーセルを作成したい人向け。</p>\n\n<h2>\n<span id=\"サンプル\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\"><i class=\"fa fa-link\"></i></a>サンプル</h2>\n\n<p><a href=\"https://jsfiddle.net/Wave7KN/ejm664m1/5/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://jsfiddle.net/Wave7KN/ejm664m1/5/</a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/e416761004998604e99c0e0bc1be13dacf585182/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3230343235362f30643064353536612d633031622d636336352d313034632d6537613336353764666133652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"351\" alt=\"vue-carousel.png\" src=\"https://camo.qiitausercontent.com/e416761004998604e99c0e0bc1be13dacf585182/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3230343235362f30643064353536612d633031622d636336352d313034632d6537613336353764666133652e706e67\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/204256/0d0d556a-c01b-cc65-104c-e7a3657dfa3e.png\"></a></p>\n\n<h2>\n<span id=\"コード\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>コード</h2>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"vue-carousel\"</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"vue-carousel\"</span><span class=\"p\">&gt;</span>\n\n  <span class=\"c\">&lt;!-- スライドする部分。keyを持たせることで、それぞれが個別の要素であることを示す。 --&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">transition</span> <span class=\"na\">:name</span><span class=\"o\">=</span><span class=\"s\">\"transition_name\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"vue-carousel_body\"</span>\n      <span class=\"na\">:key</span><span class=\"o\">=</span><span class=\"s\">\"index\"</span>\n      <span class=\"na\">v-for</span><span class=\"o\">=</span><span class=\"s\">\"(content, index) in contents\"</span>\n      <span class=\"na\">v-if</span><span class=\"o\">=</span><span class=\"s\">\"visible_content == index\"</span>\n      <span class=\"na\">:style</span><span class=\"o\">=</span><span class=\"s\">\"{backgroundColor: content.bg_color}\"</span><span class=\"p\">&gt;</span>\n      {{ content.title }}\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">transition</span><span class=\"p\">&gt;</span>\n\n  <span class=\"c\">&lt;!-- 「PREV」「NEXT」と現在地のドット --&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"vue-carousel_footer\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"err\">@</span><span class=\"na\">click</span><span class=\"o\">=</span><span class=\"s\">\"back()\"</span> <span class=\"na\">:disabled</span><span class=\"o\">=</span><span class=\"s\">\"visible_content == 0\"</span><span class=\"p\">&gt;</span>PREV<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"vue-carousel_footer_dot\"</span>\n      <span class=\"na\">v-for</span><span class=\"o\">=</span><span class=\"s\">\"(contents, index) in contents\"</span>\n      <span class=\"na\">:class</span><span class=\"o\">=</span><span class=\"s\">\"{'is-visible' : visible_content == index}\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"err\">@</span><span class=\"na\">click</span><span class=\"o\">=</span><span class=\"s\">\"next()\"</span> <span class=\"na\">:disabled</span><span class=\"o\">=</span><span class=\"s\">\"visible_content == contents.length - 1\"</span><span class=\"p\">&gt;</span>NEXT<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">JavaScript</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n  <span class=\"nx\">el</span><span class=\"o\">:</span> <span class=\"s1\">'#vue-carousel'</span><span class=\"p\">,</span>\n  <span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">contents</span><span class=\"o\">:</span> <span class=\"p\">[{</span>\n      <span class=\"c1\">// 青の中身</span>\n      <span class=\"nx\">title</span><span class=\"o\">:</span> <span class=\"s1\">'Content 1'</span><span class=\"p\">,</span>\n      <span class=\"nx\">bg_color</span><span class=\"o\">:</span> <span class=\"s1\">'#7bbff9'</span><span class=\"p\">,</span>\n    <span class=\"p\">},{</span>\n      <span class=\"c1\">// 赤の中身</span>\n      <span class=\"nx\">title</span><span class=\"o\">:</span> <span class=\"s1\">'Content 2'</span><span class=\"p\">,</span>\n      <span class=\"nx\">bg_color</span><span class=\"o\">:</span> <span class=\"s1\">'#f16972'</span><span class=\"p\">,</span>\n    <span class=\"p\">},{</span>\n      <span class=\"c1\">// 緑の中身</span>\n      <span class=\"nx\">title</span><span class=\"o\">:</span> <span class=\"s1\">'Content 3'</span><span class=\"p\">,</span>\n      <span class=\"nx\">bg_color</span><span class=\"o\">:</span> <span class=\"s1\">'#20d2a3'</span><span class=\"p\">,</span>\n    <span class=\"p\">}],</span>\n    <span class=\"nx\">transition_name</span><span class=\"o\">:</span> <span class=\"s1\">'show-next'</span><span class=\"p\">,</span>\n    <span class=\"nx\">visible_content</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">methods</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">back</span><span class=\"p\">(){</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">transition_name</span> <span class=\"o\">=</span> <span class=\"s1\">'show-prev'</span><span class=\"p\">;</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">visible_content</span><span class=\"o\">--</span><span class=\"p\">;</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">next</span><span class=\"p\">(){</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">transition_name</span> <span class=\"o\">=</span> <span class=\"s1\">'show-next'</span><span class=\"p\">;</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">visible_content</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">})</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"sass\">\n<div class=\"code-lang\"><span class=\"bold\">SCSS</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"nc\">.vue-carousel</span><span class=\"err\">{</span>\n  <span class=\"na\">height</span><span class=\"o\">:</span> <span class=\"mi\">200</span><span class=\"kt\">px</span><span class=\"err\">;</span>\n  <span class=\"na\">overflow</span><span class=\"o\">:</span> <span class=\"no\">hidden</span><span class=\"err\">;</span>\n  <span class=\"na\">position</span><span class=\"o\">:</span> <span class=\"no\">relative</span><span class=\"err\">;</span>\n  <span class=\"na\">width</span><span class=\"o\">:</span> <span class=\"mi\">300</span><span class=\"kt\">px</span><span class=\"err\">;</span>\n  <span class=\"k\">&amp;</span><span class=\"nt\">_body</span><span class=\"err\">{</span>\n    <span class=\"na\">color</span><span class=\"o\">:</span> <span class=\"mh\">#fff</span><span class=\"err\">;</span>\n    <span class=\"na\">height</span><span class=\"o\">:</span> <span class=\"mi\">150</span><span class=\"kt\">px</span><span class=\"err\">;</span>\n    <span class=\"na\">left</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"err\">;</span>\n    <span class=\"na\">line-height</span><span class=\"o\">:</span> <span class=\"mi\">150</span><span class=\"kt\">px</span><span class=\"err\">;</span>\n    <span class=\"na\">position</span><span class=\"o\">:</span> <span class=\"no\">absolute</span><span class=\"err\">;</span>\n    <span class=\"na\">text-align</span><span class=\"o\">:</span> <span class=\"no\">center</span><span class=\"err\">;</span>\n    <span class=\"na\">top</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"err\">;</span>\n    <span class=\"na\">width</span><span class=\"o\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"err\">;</span>    \n  <span class=\"err\">}</span>\n  <span class=\"k\">&amp;</span><span class=\"nt\">_footer</span><span class=\"err\">{</span>\n    <span class=\"na\">align-items</span><span class=\"o\">:</span> <span class=\"no\">center</span><span class=\"err\">;</span>\n    <span class=\"na\">display</span><span class=\"o\">:</span> <span class=\"no\">flex</span><span class=\"err\">;</span>\n    <span class=\"na\">height</span><span class=\"o\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"err\">;</span>\n    <span class=\"na\">justify-content</span><span class=\"o\">:</span> <span class=\"n\">space-between</span><span class=\"err\">;</span>\n    <span class=\"na\">position</span><span class=\"o\">:</span> <span class=\"no\">absolute</span><span class=\"err\">;</span>\n    <span class=\"na\">top</span><span class=\"o\">:</span> <span class=\"mi\">150</span><span class=\"kt\">px</span><span class=\"err\">;</span>\n    <span class=\"na\">width</span><span class=\"o\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"err\">;</span>\n    <span class=\"k\">&amp;</span><span class=\"nt\">_dot</span><span class=\"err\">{</span>\n    <span class=\"na\">background-color</span><span class=\"o\">:</span> <span class=\"mh\">#abc2ce</span><span class=\"err\">;</span>\n      <span class=\"na\">border-radius</span><span class=\"o\">:</span> <span class=\"mi\">50</span><span class=\"kt\">%</span><span class=\"err\">;</span>\n      <span class=\"na\">height</span><span class=\"o\">:</span> <span class=\"mi\">6</span><span class=\"kt\">px</span><span class=\"err\">;</span>\n      <span class=\"na\">width</span><span class=\"o\">:</span> <span class=\"mi\">6</span><span class=\"kt\">px</span><span class=\"err\">;</span>\n      <span class=\"k\">&amp;</span><span class=\"nc\">.is-visible</span><span class=\"err\">{</span>\n        <span class=\"na\">background-color</span><span class=\"o\">:</span> <span class=\"mh\">#7b94f9</span><span class=\"err\">;</span>\n      <span class=\"err\">}</span>\n    <span class=\"err\">}</span>\n  <span class=\"err\">}</span>\n<span class=\"err\">}</span>\n\n<span class=\"c1\">// 進むトランジションと戻るトランジションをそれぞれ用意</span>\n<span class=\"nc\">.show-next-enter-active</span><span class=\"o\">,</span> <span class=\"nc\">.show-next-leave-active</span><span class=\"o\">,</span>\n<span class=\"nc\">.show-prev-enter-active</span><span class=\"o\">,</span> <span class=\"nc\">.show-prev-leave-active</span>  <span class=\"err\">{</span>\n  <span class=\"na\">transition</span><span class=\"o\">:</span> <span class=\"no\">all</span> <span class=\"mf\">.4</span><span class=\"kt\">s</span><span class=\"err\">;</span>\n<span class=\"err\">}</span>\n<span class=\"nc\">.show-next-enter</span><span class=\"o\">,</span> <span class=\"nc\">.show-prev-leave-to</span> <span class=\"err\">{</span>\n  <span class=\"na\">transform</span><span class=\"o\">:</span> <span class=\"nf\">translateX</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">)</span><span class=\"err\">;</span>\n<span class=\"err\">}</span>\n<span class=\"nc\">.show-next-leave-to</span><span class=\"o\">,</span> <span class=\"nc\">.show-prev-enter</span> <span class=\"err\">{</span>\n  <span class=\"na\">transform</span><span class=\"o\">:</span> <span class=\"nf\">translateX</span><span class=\"p\">(</span><span class=\"mi\">-100</span><span class=\"kt\">%</span><span class=\"p\">)</span><span class=\"err\">;</span>\n<span class=\"err\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<p>Enter/Leave とトランジション一覧<br>\n<a href=\"https://jp.vuejs.org/v2/guide/transitions.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://jp.vuejs.org/v2/guide/transitions.html</a></p>\n",
    "body": "自前でVue.jsのカルーセルを作成したい人向け。\n\n## サンプル\nhttps://jsfiddle.net/Wave7KN/ejm664m1/5/\n\n<img width=\"351\" alt=\"vue-carousel.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/204256/0d0d556a-c01b-cc65-104c-e7a3657dfa3e.png\">\n\n## コード\n```html:HTML\n<div id=\"vue-carousel\" class=\"vue-carousel\">\n\n  <!-- スライドする部分。keyを持たせることで、それぞれが個別の要素であることを示す。 -->\n  <transition :name=\"transition_name\">\n    <div class=\"vue-carousel_body\"\n      :key=\"index\"\n      v-for=\"(content, index) in contents\"\n      v-if=\"visible_content == index\"\n      :style=\"{backgroundColor: content.bg_color}\">\n      {{ content.title }}\n    </div>\n  </transition>\n\n  <!-- 「PREV」「NEXT」と現在地のドット -->\n  <div class=\"vue-carousel_footer\">\n    <button @click=\"back()\" :disabled=\"visible_content == 0\">PREV</button>\n    <div class=\"vue-carousel_footer_dot\"\n      v-for=\"(contents, index) in contents\"\n      :class=\"{'is-visible' : visible_content == index}\"></div>\n    <button @click=\"next()\" :disabled=\"visible_content == contents.length - 1\">NEXT</button>\n  </div>\n\n</div>\n\n```\n\n```javascript:JavaScript\nnew Vue({\n  el: '#vue-carousel',\n  data: {\n    contents: [{\n      // 青の中身\n      title: 'Content 1',\n      bg_color: '#7bbff9',\n    },{\n      // 赤の中身\n      title: 'Content 2',\n      bg_color: '#f16972',\n    },{\n      // 緑の中身\n      title: 'Content 3',\n      bg_color: '#20d2a3',\n    }],\n    transition_name: 'show-next',\n    visible_content: 0,\n  },\n  methods: {\n    back(){\n      this.transition_name = 'show-prev';\n      this.visible_content--;\n    },\n    next(){\n      this.transition_name = 'show-next';\n      this.visible_content++;\n    },\n  },\n})\n```\n\n```sass:SCSS\n.vue-carousel{\n  height: 200px;\n  overflow: hidden;\n  position: relative;\n  width: 300px;\n  &_body{\n    color: #fff;\n    height: 150px;\n    left: 0;\n    line-height: 150px;\n    position: absolute;\n    text-align: center;\n    top: 0;\n    width: 100%;    \n  }\n  &_footer{\n    align-items: center;\n    display: flex;\n    height: 50px;\n    justify-content: space-between;\n    position: absolute;\n    top: 150px;\n    width: 100%;\n    &_dot{\n    background-color: #abc2ce;\n      border-radius: 50%;\n      height: 6px;\n      width: 6px;\n      &.is-visible{\n        background-color: #7b94f9;\n      }\n    }\n  }\n}\n\n// 進むトランジションと戻るトランジションをそれぞれ用意\n.show-next-enter-active, .show-next-leave-active,\n.show-prev-enter-active, .show-prev-leave-active  {\n  transition: all .4s;\n}\n.show-next-enter, .show-prev-leave-to {\n  transform: translateX(100%);\n}\n.show-next-leave-to, .show-prev-enter {\n  transform: translateX(-100%);\n}\n```\n\n\n\n## 参考\nEnter/Leave とトランジション一覧\nhttps://jp.vuejs.org/v2/guide/transitions.html\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-05T23:24:27+09:00",
    "group": null,
    "id": "5a18c9a6ed7d6fac940f",
    "likes_count": 4,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "JavaScript",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      }
    ],
    "title": "Vue.jsでカルーセルをつくる",
    "updated_at": "2017-11-05T23:26:43+09:00",
    "url": "https://qiita.com/Wave7KN/items/5a18c9a6ed7d6fac940f",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 0,
      "followers_count": 0,
      "github_login_name": "Wave7KN",
      "id": "Wave7KN",
      "items_count": 1,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 204256,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/204256/profile-images/1509769778",
      "twitter_screen_name": null,
      "website_url": null
    }
  },
  {
    "rendered_body": "<p>Sinatra+Vue.jsでSPAを作っていきます。</p>\n\n<p><a href=\"https://qiita.com/isuke/items/6df8ab9bea944b23f65d\" id=\"reference-5bb9888c7b7d38424366\">以前の記事</a>で「webpack-dev-serverのproxy使えば?」とコメント頂きましたので、それを受けて全面的に書き直しました。(Thank you <a href=\"/nak1114\" class=\"user-mention js-hovercard\" title=\"nak1114\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"nak1114\">@nak1114</a>)</p>\n\n<p>完成したコードは<a href=\"https://github.com/isuke/sinatra-vuejs-template/tree/v1.0.0\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>で見ることができます。 </p>\n\n<h2>\n<span id=\"フロントエンドの準備\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E3%81%AE%E6%BA%96%E5%82%99\"><i class=\"fa fa-link\"></i></a>フロントエンドの準備</h2>\n\n<p>yarnを使うので、インストールしていない人はインストールしてください。</p>\n\n<p>vue-cliを使うのでインストールします。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> yarn global add vue-cli\n</pre></div></div>\n\n<p>vue templateを使います。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> vue init isuke/vuejs-template#v1.0.0 sinatara-vue-sample\n</pre></div></div>\n\n<p><code>isuke/vuejs-template</code>は著者が、公式の<code>vuejs-templates/webpack-simple</code>をもとに作ったvue.jsのテンプレートです。<br>\n大分改造してあるので原型がおぼろげです。</p>\n\n<p><code>vue init</code>したら指示に従って以下のコマンド実行します。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> yarn install\n<span class=\"gp\">$</span> yarn run dev\n</pre></div></div>\n\n<p><a href=\"http://localhost:8080/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:8080/</a> をブラウザで開いてみましょう(といか勝手に開きます)。<br>\n一行もコードを書かずにこれだけでwebページができていることがわかると思います。<br>\n[Bye]リンクをクリックしてページ遷移ができていることも確認してみてください。</p>\n\n<h2>\n<span id=\"サーバーサイドの作成\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%B5%E3%82%A4%E3%83%89%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>サーバーサイドの作成</h2>\n\n<p>ここからsinatraを使っていきます。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> bundle init\n</pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"rb\">\n<div class=\"code-lang\"><span class=\"bold\">Gemfile</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"c1\"># frozen_string_literal: true</span>\n\n<span class=\"n\">source</span> <span class=\"s2\">\"https://rubygems.org\"</span>\n\n<span class=\"n\">ruby</span> <span class=\"s1\">'2.4.1'</span>\n\n<span class=\"n\">gem</span> <span class=\"s1\">'sinatra'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'sinatra-contrib'</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> bundle install --path<span class=\"o\">=</span>vendor/bundle --binstubs<span class=\"o\">=</span>vendor/bin\n</pre></div></div>\n\n<p>sinatraのコードを書いていきます。</p>\n\n<div class=\"code-frame\" data-lang=\"rb\">\n<div class=\"code-lang\"><span class=\"bold\">server.rb</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"nb\">require</span> <span class=\"s1\">'sinatra/base'</span>\n<span class=\"nb\">require</span> <span class=\"s2\">\"sinatra/reloader\"</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Server</span> <span class=\"o\">&lt;</span> <span class=\"no\">Sinatra</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"n\">configure</span> <span class=\"ss\">:development</span> <span class=\"k\">do</span>\n    <span class=\"n\">register</span> <span class=\"no\">Sinatra</span><span class=\"o\">::</span><span class=\"no\">Reloader</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"n\">get</span> <span class=\"s1\">'/companies.json'</span> <span class=\"k\">do</span>\n    <span class=\"n\">companies</span> <span class=\"o\">=</span> <span class=\"o\">[]</span>\n    <span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">upto</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span>\n      <span class=\"n\">companies</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">{</span>\n        <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"n\">i</span><span class=\"p\">,</span>\n        <span class=\"nb\">name</span><span class=\"p\">:</span> <span class=\"s2\">\"Company </span><span class=\"si\">#{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"k\">end</span>\n    <span class=\"n\">companies</span><span class=\"o\">.</span><span class=\"n\">to_json</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"rb\">\n<div class=\"code-lang\"><span class=\"bold\">config.ru</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"nb\">require</span> <span class=\"s1\">'./server'</span>\n\n<span class=\"n\">run</span> <span class=\"no\">Server</span>\n</pre></div>\n</div>\n\n<p>何の変哲もない　APIが一つあるだけです。</p>\n\n<p>立ち上げて、確認してみましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> bundle <span class=\"nb\">exec</span> rackup\n</pre></div></div>\n\n<p><a href=\"http://localhost:9292/companies.json\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:9292/companies.json</a></p>\n\n<p>jsonが返ってきました。<br>\n次のステップに進みましょう。</p>\n\n<h1>\n<span id=\"フロントとサーバーの連携\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%81%A8%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AE%E9%80%A3%E6%90%BA\"><i class=\"fa fa-link\"></i></a>フロントとサーバーの連携</h1>\n\n<p>フロントは<code>npm run dev</code>でlocalhost:8080<br>\nサーバーは<code>bundle exec rackup</code>でlocalhost:9292<br>\nにそれぞれアクセスできるようになりました。<br>\nこれをくっつけましょう。</p>\n\n<p><code>webpack.config.cofffee</code>に以下の行を追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">webpack.config.cofffee</span></div>\n<div class=\"highlight\"><pre><span></span>  else\n    config = merge baseConfig,\n      output:\n        filename: 'build.js'\n      devtool: '#eval-source-map'\n      devServer:\n        contentBase: 'dist'\n        historyApiFallback: true\n        noInfo: true\n<span class=\"gi\">+       proxy:</span>\n<span class=\"gi\">+         \"/api\":</span>\n<span class=\"gi\">+           target: \"http://localhost:9292\"</span>\n<span class=\"gi\">+           pathRewrite: {\"^/api\" : \"\"}</span>\n      performance:\n        hints: false\n\n  module.exports = config\n</pre></div>\n</div>\n\n<p>サーバーを２つとも立ち上げて <a href=\"http://localhost:8080\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:8080</a> を見てみましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> bundle <span class=\"nb\">exec</span> rackup\n<span class=\"gp\">$</span> yarn dev\n</pre></div></div>\n\n<p>ここでトップページが見れたらOKです。<br>\nさて、これでフロントからAPIが叩けるようになったので、ちょっと試してみましょう。</p>\n\n<p>Bye.vueを以下のように書き換えます。</p>\n\n<p>ついでにHot Module Replacementが動作しているかもためしてみましょう。</p>\n\n<p>Compnayデータが表示された状態で<code>Bye.vue</code>のstyleを適当に変えてみてください。</p>\n\n<div class=\"code-frame\" data-lang=\"diff\"><div class=\"highlight\"><pre><span></span>  .bye\n    -webkit-font-smoothing: antialiased\n    -moz-osx-font-smoothing: grayscale\n    text-align: center\n    margin-top: 60px\n<span class=\"gi\">+   background-color: red</span>\n\n    h1\n      font-weight: normal\n    a\n      color: #42b983\n</pre></div></div>\n\n<p>ブラウザを<strong>更新せずに</strong>反映されたら成功です。<br>\nHot Module Replacementが動作しています。</p>\n\n<h2>\n<span id=\"productionモードで動かす\" class=\"fragment\"></span><a href=\"#production%E3%83%A2%E3%83%BC%E3%83%89%E3%81%A7%E5%8B%95%E3%81%8B%E3%81%99\"><i class=\"fa fa-link\"></i></a>Productionモードで動かす</h2>\n\n<p>最後にProductionでの動かし方です。</p>\n\n<p>まず<code>yarn run build</code>を実行して<code>src</code>ディレクトリの中をコンパイルします。<br>\nコンパイルした結果は<code>dist</code>に吐かれます。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> yarn run build\n</pre></div></div>\n\n<p>次に、静的ファイル配信用のサーバーを作ります。</p>\n\n<div class=\"code-frame\" data-lang=\"rb\">\n<div class=\"code-lang\"><span class=\"bold\">static.rb</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"nb\">require</span> <span class=\"s1\">'sinatra/base'</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Static</span> <span class=\"o\">&lt;</span> <span class=\"no\">Sinatra</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"n\">configure</span> <span class=\"ss\">:production</span> <span class=\"k\">do</span>\n    <span class=\"n\">set</span> <span class=\"ss\">:public_dir</span><span class=\"p\">,</span> <span class=\"no\">File</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"s1\">'dist'</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"n\">get</span> <span class=\"s1\">'/'</span> <span class=\"k\">do</span>\n    <span class=\"n\">send_file</span> <span class=\"no\">File</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">public_dir</span><span class=\"p\">,</span> <span class=\"s1\">'index.html'</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>\n</div>\n\n<p><code>dist</code>ディレクリをpublicとして公開するディレクトリに指定しています。<br>\nまた、<code>/</code>にアクセスしたときに、'dist/index.html'を返しています。</p>\n\n<p><code>static.rb</code>を使うように<code>config.ru</code>を改良しましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">cofig.rb</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"gi\">+ require './static'</span>\n  require './server'\n\n<span class=\"gi\">+ if ENV[\"APP_ENV\"] == \"production\"</span>\n<span class=\"gi\">+   run Rack::URLMap.new(</span>\n<span class=\"gi\">+     '/' =&gt; Static,</span>\n<span class=\"gi\">+     '/api' =&gt; Server,</span>\n<span class=\"gi\">+   )</span>\n<span class=\"gi\">+ else</span>\n    run Server\n<span class=\"gi\">+ end</span>\n</pre></div>\n</div>\n\n<p>あとは環境変数をつけて実行してあげるだけです。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> <span class=\"nv\">APP_ENV</span><span class=\"o\">=</span>production bundle <span class=\"nb\">exec</span> rackup \n</pre></div></div>\n\n<p>以上です。お疲れ様でした。</p>\n",
    "body": "Sinatra+Vue.jsでSPAを作っていきます。\n\n[以前の記事](https://qiita.com/isuke/items/6df8ab9bea944b23f65d)で「webpack-dev-serverのproxy使えば?」とコメント頂きましたので、それを受けて全面的に書き直しました。(Thank you @nak1114)\n\n完成したコードは[こちら](https://github.com/isuke/sinatra-vuejs-template/tree/v1.0.0)で見ることができます。 \n\n## フロントエンドの準備\n\nyarnを使うので、インストールしていない人はインストールしてください。\n\nvue-cliを使うのでインストールします。\n\n```shell-session\n$ yarn global add vue-cli\n```\nvue templateを使います。\n\n```shell-session\n$ vue init isuke/vuejs-template#v1.0.0 sinatara-vue-sample\n```\n\n`isuke/vuejs-template`は著者が、公式の`vuejs-templates/webpack-simple`をもとに作ったvue.jsのテンプレートです。\n大分改造してあるので原型がおぼろげです。\n\n`vue init`したら指示に従って以下のコマンド実行します。\n\n```shell-session\n$ yarn install\n$ yarn run dev\n```\n\nhttp://localhost:8080/ をブラウザで開いてみましょう(といか勝手に開きます)。\n一行もコードを書かずにこれだけでwebページができていることがわかると思います。\n[Bye]リンクをクリックしてページ遷移ができていることも確認してみてください。\n\n## サーバーサイドの作成\n\nここからsinatraを使っていきます。\n\n```shell-session\n$ bundle init\n```\n\n```rb:Gemfile\n# frozen_string_literal: true\n\nsource \"https://rubygems.org\"\n\nruby '2.4.1'\n\ngem 'sinatra'\ngem 'sinatra-contrib'\n```\n\n```shell-session\n$ bundle install --path=vendor/bundle --binstubs=vendor/bin\n```\n\nsinatraのコードを書いていきます。\n\n```rb:server.rb\nrequire 'sinatra/base'\nrequire \"sinatra/reloader\"\n\nclass Server < Sinatra::Base\n  configure :development do\n    register Sinatra::Reloader\n  end\n\n  get '/companies.json' do\n    companies = []\n    1.upto(50) do |i|\n      companies << {\n        id: i,\n        name: \"Company #{i}\"\n      }\n    end\n    companies.to_json\n  end\nend\n```\n\n```rb:config.ru\nrequire './server'\n\nrun Server\n```\n\n何の変哲もない　APIが一つあるだけです。\n\n立ち上げて、確認してみましょう。\n\n```shell-session\n$ bundle exec rackup\n```\n\nhttp://localhost:9292/companies.json\n\njsonが返ってきました。\n次のステップに進みましょう。\n\n# フロントとサーバーの連携\n\nフロントは`npm run dev`でlocalhost:8080\nサーバーは`bundle exec rackup`でlocalhost:9292\nにそれぞれアクセスできるようになりました。\nこれをくっつけましょう。\n\n`webpack.config.cofffee`に以下の行を追加します。\n\n```diff:webpack.config.cofffee\n  else\n    config = merge baseConfig,\n      output:\n        filename: 'build.js'\n      devtool: '#eval-source-map'\n      devServer:\n        contentBase: 'dist'\n        historyApiFallback: true\n        noInfo: true\n+       proxy:\n+         \"/api\":\n+           target: \"http://localhost:9292\"\n+           pathRewrite: {\"^/api\" : \"\"}\n      performance:\n        hints: false\n\n  module.exports = config\n```\n\nサーバーを２つとも立ち上げて http://localhost:8080 を見てみましょう。\n\n```shell-session\n$ bundle exec rackup\n$ yarn dev\n```\n\nここでトップページが見れたらOKです。\nさて、これでフロントからAPIが叩けるようになったので、ちょっと試してみましょう。\n\nBye.vueを以下のように書き換えます。\n\nついでにHot Module Replacementが動作しているかもためしてみましょう。\n\nCompnayデータが表示された状態で`Bye.vue`のstyleを適当に変えてみてください。\n\n```diff\n  .bye\n    -webkit-font-smoothing: antialiased\n    -moz-osx-font-smoothing: grayscale\n    text-align: center\n    margin-top: 60px\n+   background-color: red\n\n    h1\n      font-weight: normal\n    a\n      color: #42b983\n```\n\nブラウザを**更新せずに**反映されたら成功です。\nHot Module Replacementが動作しています。\n\n## Productionモードで動かす\n\n最後にProductionでの動かし方です。\n\nまず`yarn run build`を実行して`src`ディレクトリの中をコンパイルします。\nコンパイルした結果は`dist`に吐かれます。\n\n```shell-session\n$ yarn run build\n```\n\n次に、静的ファイル配信用のサーバーを作ります。\n\n```rb:static.rb\nrequire 'sinatra/base'\n\nclass Static < Sinatra::Base\n  configure :production do\n    set :public_dir, File.join(settings.root, 'dist')\n  end\n\n  get '/' do\n    send_file File.join(settings.public_dir, 'index.html')\n  end\nend\n```\n\n`dist`ディレクリをpublicとして公開するディレクトリに指定しています。\nまた、`/`にアクセスしたときに、'dist/index.html'を返しています。\n\n`static.rb`を使うように`config.ru`を改良しましょう。\n\n```diff:cofig.rb\n+ require './static'\n  require './server'\n\n+ if ENV[\"APP_ENV\"] == \"production\"\n+   run Rack::URLMap.new(\n+     '/' => Static,\n+     '/api' => Server,\n+   )\n+ else\n    run Server\n+ end\n```\n\nあとは環境変数をつけて実行してあげるだけです。\n\n```shell-session\n$ APP_ENV=production bundle exec rackup \n```\n\n以上です。お疲れ様でした。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-05T19:15:33+09:00",
    "group": null,
    "id": "1f72878455303c5736ba",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Ruby",
        "versions": []
      },
      {
        "name": "Sinatra",
        "versions": []
      },
      {
        "name": "SPA",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "webpack",
        "versions": []
      }
    ],
    "title": "Sinatra+Vue.jsでSPA(Hot Module Replacementつき) Take 2",
    "updated_at": "2017-11-05T19:15:33+09:00",
    "url": "https://qiita.com/isuke/items/1f72878455303c5736ba",
    "user": {
      "description": "フロントエンジニアに憧れるRailsエンジニアです。\r\nVue.jsとCoffeeScript信者です。",
      "facebook_id": "",
      "followees_count": 6,
      "followers_count": 6,
      "github_login_name": "isuke",
      "id": "isuke",
      "items_count": 20,
      "linkedin_id": "",
      "location": "Tokyo, Japan",
      "name": "",
      "organization": "",
      "permanent_id": 152997,
      "profile_image_url": "https://avatars.githubusercontent.com/u/6189067?v=3",
      "twitter_screen_name": "Isuke_0",
      "website_url": "https://isuke.github.io/profile"
    }
  },
  {
    "rendered_body": "\n<h2>\n<span id=\"前置き\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E7%BD%AE%E3%81%8D\"><i class=\"fa fa-link\"></i></a>前置き</h2>\n\n<p>Vue.jsでコンポーネントをpropsとして渡せたら便利だなと思い調べてましたが、特に解説が見当たらなかったのでメモがてら書き残しておきます。</p>\n\n<p>Vue.js のバージョンは2.5.2です。</p>\n\n<h2>\n<span id=\"サンプル\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\"><i class=\"fa fa-link\"></i></a>サンプル</h2>\n\n<p><img alt=\":point_right:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f449.png\" title=\":point_right:\" width=\"20\"> <strong><a href=\"http://runstant.com/pentamania/projects/8d0c1f86\" rel=\"nofollow noopener\" target=\"_blank\">ここ</a></strong> <img alt=\":point_left:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f448.png\" title=\":point_left:\" width=\"20\"><br>\nselectタグで好きなコンポーネントを選んでマウントすることができます。</p>\n\n<h2>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順</h2>\n\n<p>まずpropsとして渡されるサブコンポーネントを定義・登録します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"kd\">var</span> <span class=\"nx\">subComp</span> <span class=\"o\">=</span> <span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">({</span>\n  <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"sb\">`&lt;div class=\"sub\"&gt;サブコンポーネントだよ&lt;/div&gt;`</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n<span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">component</span><span class=\"p\">(</span><span class=\"s1\">'sub-component'</span><span class=\"p\">,</span> <span class=\"nx\">subComp</span><span class=\"p\">);</span> <span class=\"c1\">// 'sub-component'という名前で登録</span>\n</pre></div></div>\n\n<p>特に変わったことはしてません。</p>\n\n<p>次にpropsを受け取り、サブコンポーネントを描画するメインコンポーネントを定義します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"kd\">var</span> <span class=\"nx\">mainComp</span> <span class=\"o\">=</span> <span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">({</span>\n  <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"sb\">`&lt;div class=\"main\"&gt;</span>\n<span class=\"sb\">    &lt;h1 class='topic'&gt;メイン&lt;/h1&gt;</span>\n<span class=\"sb\">    &lt;div :is=\"contentComponent\"&gt;&lt;/div&gt;</span>\n<span class=\"sb\">  &lt;/div&gt;`</span><span class=\"p\">,</span>\n  <span class=\"nx\">props</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'contentComponent'</span><span class=\"o\">:</span> <span class=\"nb\">String</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">});</span>\n<span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">component</span><span class=\"p\">(</span><span class=\"s1\">'main-component'</span><span class=\"p\">,</span> <span class=\"nx\">mainComp</span><span class=\"p\">);</span>\n</pre></div></div>\n\n<p>ポイントはis属性のところです。<br>\npropsプロパティのcontentComponentは、サブコンポーネント（の名前）を受け取り、is属性値にセットされます。こうすることでdivはサブコンポーネントに置き換わります。</p>\n\n<p>最後にHTMLとrootインスタンス部分です。<br>\nコンポーネント名を指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"app\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">main-component</span>\n    <span class=\"na\">content-component</span><span class=\"o\">=</span><span class=\"s\">\"sub-component\"</span>\n  <span class=\"p\">&gt;&lt;/</span><span class=\"nt\">main-component</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n  <span class=\"nx\">el</span><span class=\"o\">:</span> <span class=\"s2\">\"#app\"</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n\n</pre></div></div>\n\n<p>マウント後、</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"app\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"main\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">h1</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">'topic'</span><span class=\"p\">&gt;</span>メイン<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"sub\"</span><span class=\"p\">&gt;</span>サブコンポーネントだよ<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>`\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n</pre></div></div>\n\n<p>こんな感じになってればOK。（<a href=\"https://goo.gl/hooYpt\" rel=\"nofollow noopener\" target=\"_blank\">コード</a>）</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<p><a href=\"https://forum.vuejs.org/t/how-to-pass-a-component-as-prop/11216\" rel=\"nofollow noopener\" target=\"_blank\">https://forum.vuejs.org/t/how-to-pass-a-component-as-prop/11216</a></p>\n",
    "body": "## 前置き\nVue.jsでコンポーネントをpropsとして渡せたら便利だなと思い調べてましたが、特に解説が見当たらなかったのでメモがてら書き残しておきます。\n\nVue.js のバージョンは2.5.2です。\n\n## サンプル\n:point_right: **[ここ](http://runstant.com/pentamania/projects/8d0c1f86)** :point_left:\nselectタグで好きなコンポーネントを選んでマウントすることができます。\n\n## 手順\nまずpropsとして渡されるサブコンポーネントを定義・登録します。\n\n```js\nvar subComp = Vue.extend({\n  template: `<div class=\"sub\">サブコンポーネントだよ</div>`,\n});\nVue.component('sub-component', subComp); // 'sub-component'という名前で登録\n```\n特に変わったことはしてません。\n\n次にpropsを受け取り、サブコンポーネントを描画するメインコンポーネントを定義します。\n\n```js\nvar mainComp = Vue.extend({\n  template: `<div class=\"main\">\n    <h1 class='topic'>メイン</h1>\n    <div :is=\"contentComponent\"></div>\n  </div>`,\n  props: {\n    'contentComponent': String,\n  },\n});\nVue.component('main-component', mainComp);\n```\n\nポイントはis属性のところです。\npropsプロパティのcontentComponentは、サブコンポーネント（の名前）を受け取り、is属性値にセットされます。こうすることでdivはサブコンポーネントに置き換わります。\n\n最後にHTMLとrootインスタンス部分です。\nコンポーネント名を指定します。\n\n```html\n<div id=\"app\">\n  <main-component\n    content-component=\"sub-component\"\n  ></main-component>\n</div>\n```\n\n```js\nnew Vue({\n  el: \"#app\",\n})\n\n```\n\nマウント後、\n\n```html\n<div id=\"app\">\n  <div class=\"main\">\n    <h1 class='topic'>メイン</h1>\n    <div class=\"sub\">サブコンポーネントだよ</div>\n  </div>`\n</div>\n\n```\nこんな感じになってればOK。（[コード](https://goo.gl/hooYpt)）\n\n## 参考\n[https://forum.vuejs.org/t/how-to-pass-a-component-as-prop/11216](https://forum.vuejs.org/t/how-to-pass-a-component-as-prop/11216)\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-04T01:08:01+09:00",
    "group": null,
    "id": "e7a0f9d67ec75563b952",
    "likes_count": 1,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "vue.js",
        "versions": []
      }
    ],
    "title": "vue.jsでpropsとしてコンポーネントを渡す",
    "updated_at": "2017-11-04T01:20:15+09:00",
    "url": "https://qiita.com/pentamania/items/e7a0f9d67ec75563b952",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 6,
      "github_login_name": "pentamania",
      "id": "pentamania",
      "items_count": 10,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 81823,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/81823/profile-images/1473702243",
      "twitter_screen_name": "ptmnia",
      "website_url": "http://pentamania.github.io/portal/"
    }
  },
  {
    "rendered_body": "<p>Vue.js公式サイトの「<a href=\"https://jp.vuejs.org/v2/examples/todomvc.html\" rel=\"nofollow noopener\" target=\"_blank\">TodoMVC の例</a>」はインターフェイスが洗練されたTodoリストの作例です。コードの組み立てについては「<a href=\"http://fumiononaka.com/Business/index.html#Vue\" rel=\"nofollow noopener\" target=\"_blank\">Vue.js: TodoMVCをつくる</a>」01〜05で解説しました。本稿では、このJavaScriptコードをECMAScript 2015(ECMAScript 6)の構文に書き替えます。</p>\n\n<h1>\n<span id=\"const宣言を使う\" class=\"fragment\"></span><a href=\"#const%E5%AE%A3%E8%A8%80%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>const宣言を使う</h1>\n\n<p>ECMAScript 6の変数宣言には、<code>var</code>に加えて、<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/let\" rel=\"nofollow noopener\" target=\"_blank\"><code>let</code></a>と<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/const\" rel=\"nofollow noopener\" target=\"_blank\"><code>const</code></a>が備わりました。ふたつともブロックスコープをもちます。<code>const</code>は値を上書きできない定数の宣言です。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// var STORAGE_KEY = 'todos-vuejs-2.0';</span>\n<span class=\"kr\">const</span> <span class=\"nx\">STORAGE_KEY</span> <span class=\"o\">=</span> <span class=\"s1\">'todos-vuejs-2.0'</span><span class=\"p\">;</span>\n</pre></div></div>\n\n<p>値を書き替える変数には<code>let</code>、書き替えない定数には<code>const</code>を用います。ただし、<code>const</code>宣言した変数には再代入できないだけで、オブジェクトのプロパティは操作できることにお気をつけください。</p>\n\n<h1>\n<span id=\"オブジェクトへのメソッド定義とアロー関数式\" class=\"fragment\"></span><a href=\"#%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%B8%E3%81%AE%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E5%AE%9A%E7%BE%A9%E3%81%A8%E3%82%A2%E3%83%AD%E3%83%BC%E9%96%A2%E6%95%B0%E5%BC%8F\"><i class=\"fa fa-link\"></i></a>オブジェクトへのメソッド定義とアロー関数式</h1>\n\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Object_initializer#%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E5%AE%9A%E7%BE%A9\" rel=\"nofollow noopener\" target=\"_blank\">オブジェクトにメソッドを定義する</a>とき、コロン(<code>:</code>)と<code>function</code>キーワードは省いてしまえます。また、名前のない関数には、<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/arrow_functions\" rel=\"nofollow noopener\" target=\"_blank\">アロー関数式<code>=&gt;</code></a>を用いるとすっきりと書けます。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// var todoStorage = {</span>\n<span class=\"kr\">const</span> <span class=\"nx\">todoStorage</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// fetch: function() {</span>\n    <span class=\"nx\">fetch</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// var todos = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');</span>\n        <span class=\"kr\">const</span> <span class=\"nx\">todos</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">localStorage</span><span class=\"p\">.</span><span class=\"nx\">getItem</span><span class=\"p\">(</span><span class=\"nx\">STORAGE_KEY</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"s1\">'[]'</span><span class=\"p\">);</span>\n        <span class=\"c1\">// todos.forEach(function(todo, index) {</span>\n        <span class=\"nx\">todos</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"nx\">todo</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n            <span class=\"nx\">todo</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"nx\">index</span>  <span class=\"c1\">//;</span>\n        <span class=\"c1\">// });</span>\n        <span class=\"p\">);</span>\n        <span class=\"nx\">todoStorage</span><span class=\"p\">.</span><span class=\"nx\">uid</span> <span class=\"o\">=</span> <span class=\"nx\">todos</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"nx\">todos</span><span class=\"p\">;</span>\n    <span class=\"p\">},</span>\n\n<span class=\"p\">};</span>\n</pre></div></div>\n\n<p>アロー関数式は、引数に関数を渡す新しい<code>Array</code>クラスのメソッドと組み合わせることがとくにお勧めです。関数本体が1文のときはブロックの波かっこ<code>{}</code>は省くことができ、その式の値は返されるので<code>return</code>も要りません。なお、<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/arrow_functions#Lexical_this\" rel=\"nofollow noopener\" target=\"_blank\">アロー関数式は<code>this</code>を束縛しない</a>ということも、頭に置いておきましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// var filters = {</span>\n<span class=\"kr\">const</span> <span class=\"nx\">filters</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// active: function(todos) {</span>\n    <span class=\"nx\">active</span><span class=\"p\">(</span><span class=\"nx\">todos</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// return todos.filter(function(todo) {</span>\n        <span class=\"k\">return</span> <span class=\"nx\">todos</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">((</span><span class=\"nx\">todo</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n            <span class=\"c1\">// return !todo.completed;</span>\n            <span class=\"o\">!</span><span class=\"nx\">todo</span><span class=\"p\">.</span><span class=\"nx\">completed</span>\n        <span class=\"c1\">// });</span>\n        <span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n\n<span class=\"p\">};</span>\n</pre></div></div>\n\n<h1>\n<span id=\"オブジェクトリテラルのプロパティに用いるブラケット構文\" class=\"fragment\"></span><a href=\"#%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AB%E7%94%A8%E3%81%84%E3%82%8B%E3%83%96%E3%83%A9%E3%82%B1%E3%83%83%E3%83%88%E6%A7%8B%E6%96%87\"><i class=\"fa fa-link\"></i></a>オブジェクトリテラルのプロパティに用いるブラケット構文</h1>\n\n<p>オブジェクトのプロパティを参照するとき、ドット(<code>.</code>)のほかにブラケット<code>[]</code>が使えます。そして、ブラケットの中には変数や式が与えられました。<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Object_initializer#%E8%A8%88%E7%AE%97%E3%81%95%E3%82%8C%E3%81%9F%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E5%90%8D\" rel=\"nofollow noopener\" target=\"_blank\">オブジェクトリテラルのプロパティ名</a>にも同じ構文を用いることができるようになったのです。</p>\n\n<p>Vue.jsの<a href=\"https://jp.vuejs.org/v2/guide/custom-directive.html\" rel=\"nofollow noopener\" target=\"_blank\">カスタムディレクティブ</a>にはハイフン(-)が含まれることもあります。けれど、JavaScriptの識別子として扱えません。このとき、文字列を用いれば、プロパティ名に定められます。さらに、ブラケット<code>[]</code>でメソッド名として扱うこともできるのです。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// var app = new Vue({</span>\n<span class=\"kr\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n\n    <span class=\"nx\">directives</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 'todo-focus': function(element, binding) {</span>\n        <span class=\"p\">[</span><span class=\"s1\">'todo-focus'</span><span class=\"p\">](</span><span class=\"nx\">element</span><span class=\"p\">,</span> <span class=\"nx\">binding</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">binding</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">focus</span><span class=\"p\">();</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</pre></div></div>\n\n<p>「TodoMVC の例」のJavaScriptコードをECMAScript 6の構文に書き替えたのがつぎのサンプル001です。jsdo.itに掲げました。ECMAScript 6には、クラスについても新たな構文が備わっています。興味のある方は「<a href=\"https://qiita.com/FumioNonaka/items/4ebb8a34e826bde58227\" id=\"reference-38354e5f67c24e773c8b\">CreateJSのJavaScriptコードをECMAScript 6の構文に書き替える</a>」をお読みください。</p>\n\n<h4>\n<span id=\"サンプル001vuejs--es6-todomvc\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB001vuejs--es6-todomvc\"><i class=\"fa fa-link\"></i></a>サンプル001■Vue.js + ES6: TodoMVC</h4>\n\n<p><a href=\"http://jsdo.it/FumioNonaka/wl2l\" rel=\"nofollow noopener\" target=\"_blank\"><img src=\"https://camo.qiitausercontent.com/c3ab746e1f2c203f1349f4fca4ce3fbe0459436b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132383934392f38656333643464302d626236632d623065332d396335382d3939343539633866383739612e706e67\" alt=\"FN1707004_002.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/128949/8ec3d4d0-bb6c-b0e3-9c58-99459c8f879a.png\"><br>\n&gt;&gt; judo.itへ</a></p>\n",
    "body": "Vue.js公式サイトの「[TodoMVC の例](https://jp.vuejs.org/v2/examples/todomvc.html)」はインターフェイスが洗練されたTodoリストの作例です。コードの組み立てについては「[Vue.js: TodoMVCをつくる](http://fumiononaka.com/Business/index.html#Vue)」01〜05で解説しました。本稿では、このJavaScriptコードをECMAScript 2015(ECMAScript 6)の構文に書き替えます。\n\n#const宣言を使う\nECMAScript 6の変数宣言には、`var`に加えて、[`let`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/let)と[`const`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/const)が備わりました。ふたつともブロックスコープをもちます。`const`は値を上書きできない定数の宣言です。\n\n```js\n// var STORAGE_KEY = 'todos-vuejs-2.0';\nconst STORAGE_KEY = 'todos-vuejs-2.0';\n```\n\n値を書き替える変数には`let`、書き替えない定数には`const`を用います。ただし、`const`宣言した変数には再代入できないだけで、オブジェクトのプロパティは操作できることにお気をつけください。\n\n#オブジェクトへのメソッド定義とアロー関数式\n[オブジェクトにメソッドを定義する](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Object_initializer#メソッドの定義)とき、コロン(`:`)と`function`キーワードは省いてしまえます。また、名前のない関数には、[アロー関数式`=>`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/arrow_functions)を用いるとすっきりと書けます。\n\n```js\n// var todoStorage = {\nconst todoStorage = {\n\t// fetch: function() {\n\tfetch() {\n\t\t// var todos = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');\n\t\tconst todos = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');\n\t\t// todos.forEach(function(todo, index) {\n\t\ttodos.forEach((todo, index) =>\n\t\t\ttodo.id = index  //;\n\t\t// });\n\t\t);\n\t\ttodoStorage.uid = todos.length;\n\t\treturn todos;\n\t},\n\n};\n```\n\nアロー関数式は、引数に関数を渡す新しい`Array`クラスのメソッドと組み合わせることがとくにお勧めです。関数本体が1文のときはブロックの波かっこ`{}`は省くことができ、その式の値は返されるので`return `も要りません。なお、[アロー関数式は`this`を束縛しない](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/arrow_functions#Lexical_this)ということも、頭に置いておきましょう。\n\n```js\n// var filters = {\nconst filters = {\n\n\t// active: function(todos) {\n\tactive(todos) {\n\t\t// return todos.filter(function(todo) {\n\t\treturn todos.filter((todo) =>\n\t\t\t// return !todo.completed;\n\t\t\t!todo.completed\n\t\t// });\n\t\t);\n\t},\n\n};\n```\n\n#オブジェクトリテラルのプロパティに用いるブラケット構文\nオブジェクトのプロパティを参照するとき、ドット(`.`)のほかにブラケット`[]`が使えます。そして、ブラケットの中には変数や式が与えられました。[オブジェクトリテラルのプロパティ名](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Object_initializer#計算されたプロパティ名)にも同じ構文を用いることができるようになったのです。\n\nVue.jsの[カスタムディレクティブ](https://jp.vuejs.org/v2/guide/custom-directive.html)にはハイフン(-)が含まれることもあります。けれど、JavaScriptの識別子として扱えません。このとき、文字列を用いれば、プロパティ名に定められます。さらに、ブラケット`[]`でメソッド名として扱うこともできるのです。\n\n```js\n// var app = new Vue({\nconst app = new Vue({\n\n\tdirectives: {\n\t\t// 'todo-focus': function(element, binding) {\n\t\t['todo-focus'](element, binding) {\n\t\t\tif (binding.value) {\n\t\t\t\telement.focus();\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\n「TodoMVC の例」のJavaScriptコードをECMAScript 6の構文に書き替えたのがつぎのサンプル001です。jsdo.itに掲げました。ECMAScript 6には、クラスについても新たな構文が備わっています。興味のある方は「[CreateJSのJavaScriptコードをECMAScript 6の構文に書き替える](https://qiita.com/FumioNonaka/items/4ebb8a34e826bde58227)」をお読みください。\n\n####サンプル001■Vue.js + ES6: TodoMVC\n[![FN1707004_002.png](https://qiita-image-store.s3.amazonaws.com/0/128949/8ec3d4d0-bb6c-b0e3-9c58-99459c8f879a.png)\n\\>\\> judo.itへ](http://jsdo.it/FumioNonaka/wl2l)\n\n\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-03T22:12:40+09:00",
    "group": null,
    "id": "2e749edc1223e0e3a686",
    "likes_count": 2,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "JavaScript",
        "versions": []
      },
      {
        "name": "ECMAScript",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "ECMAScript6",
        "versions": []
      },
      {
        "name": "ECMAScript2015",
        "versions": []
      }
    ],
    "title": "Vue.jsの「TodoMVC の例」をECMAScript 6の構文に書き替える",
    "updated_at": "2017-11-09T19:31:33+09:00",
    "url": "https://qiita.com/FumioNonaka/items/2e749edc1223e0e3a686",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 26,
      "github_login_name": null,
      "id": "FumioNonaka",
      "items_count": 17,
      "linkedin_id": "",
      "location": "Tokyo, Japan",
      "name": "文雄 野中",
      "organization": "",
      "permanent_id": 128949,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/128949/profile-images/1473717391",
      "twitter_screen_name": "FumioNonaka",
      "website_url": "http://www.fumiononaka.com/"
    }
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"目的\" class=\"fragment\"></span><a href=\"#%E7%9B%AE%E7%9A%84\"><i class=\"fa fa-link\"></i></a>目的</h1>\n\n<p>vue-cliで作成したプロジェクトをVSCodeを使用してフォーマットするとeslintでエラーとなってしまいます。（2017/11/03 時点）<br>\nVSCodeの設定を修正しエラーとならずに動作させるようにします。</p>\n\n<h1>\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h1>\n\n<ul>\n<li>vue-cli 2.9.1</li>\n<li>VSCode 1.17.2\n\n<ul>\n<li>vetur 0.10.1</li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id=\"結論\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E8%AB%96\"><i class=\"fa fa-link\"></i></a>結論</h1>\n\n<p>以下の設定を追加。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">ユーザー設定へ追加</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n    <span class=\"nt\">\"vetur.format.defaultFormatter.js\"</span><span class=\"p\">:</span> <span class=\"s2\">\"vscode-typescript\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"javascript.format.insertSpaceBeforeFunctionParenthesis\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"事象\" class=\"fragment\"></span><a href=\"#%E4%BA%8B%E8%B1%A1\"><i class=\"fa fa-link\"></i></a>事象</h1>\n\n<h4>\n<span id=\"正常動作確認\" class=\"fragment\"></span><a href=\"#%E6%AD%A3%E5%B8%B8%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>正常動作確認</h4>\n\n<div class=\"code-frame\" data-lang=\"bash\">\n<div class=\"code-lang\"><span class=\"bold\">プロジェクト作成～起動</span></div>\n<div class=\"highlight\"><pre><span></span>vue init webpack sample\n<span class=\"nb\">cd</span> sample\nnpm install\nnpm run dev\n</pre></div>\n</div>\n\n<h4>\n<span id=\"フォーマット\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88\"><i class=\"fa fa-link\"></i></a>フォーマット</h4>\n\n<p><a href=\"https://camo.qiitausercontent.com/adc9b70e2cb8ea0b453013c830b9389eb6de86a3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131343232352f39356639343533332d313339622d306435302d663434622d3534653730363532356565662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/adc9b70e2cb8ea0b453013c830b9389eb6de86a3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131343232352f39356639343533332d313339622d306435302d663434622d3534653730363532356565662e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/114225/95f94533-139b-0d50-f44b-54e706525eef.png\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">エラー内容</span></div>\n<div class=\"highlight\"><pre><span></span> ERROR  Failed to compile with 1 errors                                                        18:53:18\n\n error  in ./src/components/HelloWorld.vue\n\n\n  ✘  http://eslint.org/docs/rules/quotes                       Strings must use singlequote\n  src\\components\\HelloWorld.vue:25:9\n    name: \"HelloWorld\",\n           ^\n\n  ✘  http://eslint.org/docs/rules/space-before-function-paren  Missing space before function parentheses\n  src\\components\\HelloWorld.vue:26:7\n    data() {\n         ^\n\n  ✘  http://eslint.org/docs/rules/quotes                       Strings must use singlequote\n  src\\components\\HelloWorld.vue:28:12\n        msg: \"Welcome to Your Vue.js App\"\n              ^\n\n  ✘  http://eslint.org/docs/rules/semi                         Extra semicolon\n  src\\components\\HelloWorld.vue:29:6\n      };\n        ^\n\n  ✘  http://eslint.org/docs/rules/semi                         Extra semicolon\n  src\\components\\HelloWorld.vue:31:2\n  };\n    ^\n\n\n✘ 5 problems (5 errors, 0 warnings)\n\n\nErrors:\n  2  http://eslint.org/docs/rules/semi\n  2  http://eslint.org/docs/rules/quotes\n  1  http://eslint.org/docs/rules/space-before-function-paren\n\n @ ./src/router/index.js 3:0-49\n @ ./src/main.js\n @ multi ./build/dev-client ./src/main.js\n</pre></div>\n</div>\n\n<h5>\n<span id=\"問題点\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C%E7%82%B9\"><i class=\"fa fa-link\"></i></a>問題点</h5>\n\n<ul>\n<li>シングルクォーテーションがダブルクォーテーションに変換されてしまう。</li>\n<li>関数名の後ろにあるスペースが除去されてしまう。</li>\n<li>文の最後にセミコロンが挿入されてしまう。</li>\n</ul>\n\n<h1>\n<span id=\"原因\" class=\"fragment\"></span><a href=\"#%E5%8E%9F%E5%9B%A0\"><i class=\"fa fa-link\"></i></a>原因？</h1>\n\n<p>veturのデフォルトフォーマッタがjs-beautify⇒prettierへ変更されたから？（参考URL内のコメントより推察）</p>\n\n<h1>\n<span id=\"今後\" class=\"fragment\"></span><a href=\"#%E4%BB%8A%E5%BE%8C\"><i class=\"fa fa-link\"></i></a>今後</h1>\n\n<p>prettier-eslintの対応が予定されている？ようなのでそのうち直るかもしれない。</p>\n\n<h1>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n\n<p><a href=\"https://github.com/vuejs/vetur/issues/476\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/vuejs/vetur/issues/476</a></p>\n",
    "body": "# 目的\nvue-cliで作成したプロジェクトをVSCodeを使用してフォーマットするとeslintでエラーとなってしまいます。（2017/11/03 時点）\nVSCodeの設定を修正しエラーとならずに動作させるようにします。\n\n# 環境\n- vue-cli 2.9.1\n- VSCode 1.17.2\n - vetur 0.10.1\n\n# 結論\n以下の設定を追加。\n\n```json:ユーザー設定へ追加\n{\n    \"vetur.format.defaultFormatter.js\": \"vscode-typescript\",\n    \"javascript.format.insertSpaceBeforeFunctionParenthesis\": true\n}\n```\n\n# 事象\n#### 正常動作確認\n\n```bash:プロジェクト作成～起動\nvue init webpack sample\ncd sample\nnpm install\nnpm run dev\n```\n\n#### フォーマット\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/114225/95f94533-139b-0d50-f44b-54e706525eef.png)\n\n```:エラー内容\n ERROR  Failed to compile with 1 errors                                                        18:53:18\n\n error  in ./src/components/HelloWorld.vue\n\n\n  ✘  http://eslint.org/docs/rules/quotes                       Strings must use singlequote\n  src\\components\\HelloWorld.vue:25:9\n    name: \"HelloWorld\",\n           ^\n\n  ✘  http://eslint.org/docs/rules/space-before-function-paren  Missing space before function parentheses\n  src\\components\\HelloWorld.vue:26:7\n    data() {\n         ^\n\n  ✘  http://eslint.org/docs/rules/quotes                       Strings must use singlequote\n  src\\components\\HelloWorld.vue:28:12\n        msg: \"Welcome to Your Vue.js App\"\n              ^\n\n  ✘  http://eslint.org/docs/rules/semi                         Extra semicolon\n  src\\components\\HelloWorld.vue:29:6\n      };\n        ^\n\n  ✘  http://eslint.org/docs/rules/semi                         Extra semicolon\n  src\\components\\HelloWorld.vue:31:2\n  };\n    ^\n\n\n✘ 5 problems (5 errors, 0 warnings)\n\n\nErrors:\n  2  http://eslint.org/docs/rules/semi\n  2  http://eslint.org/docs/rules/quotes\n  1  http://eslint.org/docs/rules/space-before-function-paren\n\n @ ./src/router/index.js 3:0-49\n @ ./src/main.js\n @ multi ./build/dev-client ./src/main.js\n```\n\n##### 問題点\n- シングルクォーテーションがダブルクォーテーションに変換されてしまう。\n- 関数名の後ろにあるスペースが除去されてしまう。\n- 文の最後にセミコロンが挿入されてしまう。\n\n# 原因？\nveturのデフォルトフォーマッタがjs-beautify⇒prettierへ変更されたから？（参考URL内のコメントより推察）\n\n# 今後\nprettier-eslintの対応が予定されている？ようなのでそのうち直るかもしれない。\n\n# 参考\nhttps://github.com/vuejs/vetur/issues/476\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-03T20:02:39+09:00",
    "group": null,
    "id": "dbab3f669372f8623cd4",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Node.js",
        "versions": []
      },
      {
        "name": "npm",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "VSCode",
        "versions": []
      },
      {
        "name": "vue-cli",
        "versions": []
      }
    ],
    "title": "vue-cliで作成したプロジェクトをVSCodeで編集するときの設定",
    "updated_at": "2017-11-03T20:02:39+09:00",
    "url": "https://qiita.com/skta/items/dbab3f669372f8623cd4",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 0,
      "followers_count": 0,
      "github_login_name": "skta3569",
      "id": "skta",
      "items_count": 4,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 114225,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/114225/profile-images/1473712521",
      "twitter_screen_name": null,
      "website_url": null
    }
  },
  {
    "rendered_body": "<p>htmlコーダーがフロントエンドを学ぶ記録。<br>\nまだまだ初心者だから間違えながら覚えていくぞ！</p>\n\n<h1>\n<span id=\"jsだとapi弾かれがち\" class=\"fragment\"></span><a href=\"#js%E3%81%A0%E3%81%A8api%E5%BC%BE%E3%81%8B%E3%82%8C%E3%81%8C%E3%81%A1\"><i class=\"fa fa-link\"></i></a>jsだとapi弾かれがち</h1>\n\n<p>vue.jsで簡単なwebアプリが作れるようになり、<br>\napiを試してよくぶち当たったのが<br>\n\"access-control-allow-origin\" 周りのエラー。<br>\njsonpってのを使わないと回避できないクロスドメインのエラーのよう。</p>\n\n<p>でも、vueでjsonpを扱ってる記事って見つからない…。<br>\njqueryはいっぱい出てくるのに！</p>\n\n<h1>\n<span id=\"vueにもあったjsonp\" class=\"fragment\"></span><a href=\"#vue%E3%81%AB%E3%82%82%E3%81%82%E3%81%A3%E3%81%9Fjsonp\"><i class=\"fa fa-link\"></i></a>vueにもあったjsonp</h1>\n\n<p>これだ。<br>\n<a href=\"https://github.com/LancerComet/vue-jsonp\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/LancerComet/vue-jsonp</a></p>\n\n<p>vue-cli と 単一ファイルコンポーネントでやってる環境前提で。<br>\nまずはインストールしましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">terminal</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"err\">$</span> <span class=\"n\">npm</span> <span class=\"n\">insall</span> <span class=\"o\">--</span><span class=\"n\">save</span><span class=\"o\">-</span><span class=\"n\">dev</span> <span class=\"n\">vue</span><span class=\"o\">-</span><span class=\"n\">jsonp</span>\n</pre></div>\n</div>\n\n<p>で、使いたいコンポーネントの中でインポートします</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">hoge.vue</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">import</span> <span class=\"no\">Vue</span> <span class=\"n\">from</span> <span class=\"s1\">'vue'</span>\n<span class=\"n\">import</span> <span class=\"no\">VueJsonp</span> <span class=\"n\">from</span> <span class=\"s1\">'vue-jsonp'</span>\n<span class=\"no\">Vue</span><span class=\"o\">.</span><span class=\"n\">use</span><span class=\"p\">(</span><span class=\"no\">VueJsonp</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n\n<p>使い方はざっくりこんな感じのよう。<br>\nVueコンポーネント内だとthisになるのね。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>Static function: Vue.jsonp(url, dataObj, timeout)\nIn Vue component: this.$jsonp(url, dataObj, timeout)\n</pre></div></div>\n\n<p>あとはこんな感じで</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">hoge.vue</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">data</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"ss\">jsonData</span><span class=\"p\">:</span><span class=\"s1\">''</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">},</span>\n<span class=\"nb\">methods</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n  <span class=\"n\">getData</span> <span class=\"p\">(</span><span class=\"n\">apiUrl</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">this</span><span class=\"o\">.</span><span class=\"vg\">$jsonp</span><span class=\"p\">(</span><span class=\"n\">apiUrl</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"ss\">keyword</span><span class=\"p\">:</span> <span class=\"s1\">'キーワード'</span> <span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">then</span><span class=\"p\">(</span><span class=\"n\">json</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"sr\">//</span> <span class=\"no\">Success</span><span class=\"o\">.</span>\n      <span class=\"n\">this</span><span class=\"o\">.</span><span class=\"n\">jsonData</span> <span class=\"o\">=</span> <span class=\"n\">json</span>\n    <span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">catch</span><span class=\"p\">(</span><span class=\"n\">err</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"sr\">//</span> <span class=\"no\">Failed</span><span class=\"o\">.</span>\n    <span class=\"p\">})</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>ってな感じでaccess-control-allow-origin回避できそうです！<br>\nいろいろ試してみよ。</p>\n",
    "body": "htmlコーダーがフロントエンドを学ぶ記録。\nまだまだ初心者だから間違えながら覚えていくぞ！\n\n#jsだとapi弾かれがち\nvue.jsで簡単なwebアプリが作れるようになり、\napiを試してよくぶち当たったのが\n\"access-control-allow-origin\" 周りのエラー。\njsonpってのを使わないと回避できないクロスドメインのエラーのよう。\n\nでも、vueでjsonpを扱ってる記事って見つからない…。\njqueryはいっぱい出てくるのに！\n\n#vueにもあったjsonp\nこれだ。\nhttps://github.com/LancerComet/vue-jsonp\n\nvue-cli と 単一ファイルコンポーネントでやってる環境前提で。\nまずはインストールしましょう。\n\n```ruby:terminal\n$ npm insall --save-dev vue-jsonp\n```\n\nで、使いたいコンポーネントの中でインポートします\n\n```ruby:hoge.vue\nimport Vue from 'vue'\nimport VueJsonp from 'vue-jsonp'\nVue.use(VueJsonp)\n```\n\n使い方はざっくりこんな感じのよう。\nVueコンポーネント内だとthisになるのね。\n\n```\nStatic function: Vue.jsonp(url, dataObj, timeout)\nIn Vue component: this.$jsonp(url, dataObj, timeout)\n```\n\nあとはこんな感じで\n\n```ruby:hoge.vue\ndata() {\n  return {\n    jsonData:''\n  }\n},\nmethods: {\n  getData (apiUrl) {\n    this.$jsonp(apiUrl, { keyword: 'キーワード' }).then(json => {\n      // Success.\n      this.jsonData = json\n    }).catch(err => {\n      // Failed.\n    })\n  }\n}\n```\n\nってな感じでaccess-control-allow-origin回避できそうです！\nいろいろ試してみよ。\n\n\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-02T14:28:06+09:00",
    "group": null,
    "id": "ada0d210e94365b45db4",
    "likes_count": 6,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "jsonp",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      }
    ],
    "title": "覚え書き Vue.jsでjsonpを使ってみる",
    "updated_at": "2017-11-02T18:17:58+09:00",
    "url": "https://qiita.com/minapin/items/ada0d210e94365b45db4",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 3,
      "followers_count": 2,
      "github_login_name": "masakitm",
      "id": "minapin",
      "items_count": 3,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 82079,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/82079/profile-images/1509601810",
      "twitter_screen_name": "minapiiin",
      "website_url": null
    }
  }
]
