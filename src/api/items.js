import axios from 'axios'

const debug = process.env.NODE_ENV !== 'production'

const api = {
  get: (url) => {
    if (debug) {
      return Promise.resolve({ data: mock })
    }
    console.log('>> ' + url)
    return axios.get(url)
  }
}

export default {
  getItems: (query) => api.get(`https://qiita.com/api/v2/items?query=${query}`).then(resp => {
    return Promise.resolve(resp.data)
  })
}

const mock = [
  {
    "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>Vue.jsでいい感じのUIを作ろうと思い、<br>\nVue.js 2 + ElementUIでできるフィルタリングを試してみました</p>\n\n<h1>\n<span id=\"こんな感じ\" class=\"fragment\"></span><a href=\"#%E3%81%93%E3%82%93%E3%81%AA%E6%84%9F%E3%81%98\"><i class=\"fa fa-link\"></i></a>こんな感じ</h1>\n\n<p>タイピングに応じて検索結果が切り替わるのが個人的に好きです</p>\n\n<blockquote class=\"twitter-tweet\">\n<p>Vue.js 2 + ElementUI でフィルタリング <a href=\"https://t.co/74GQlH4swP\" rel=\"nofollow noopener\" target=\"_blank\">https://t.co/74GQlH4swP</a> <a href=\"https://twitter.com/YouTube?ref_src=twsrc%5Etfw\" rel=\"nofollow noopener\" target=\"_blank\">@YouTube</a>さんから</p>— Yuxio@冬仕様 (@YuxioArts) <a href=\"https://twitter.com/YuxioArts/status/928459816560771072?ref_src=twsrc%5Etfw\" rel=\"nofollow noopener\" target=\"_blank\">2017年11月9日</a>\n</blockquote>\n\n\n\n<h1>\n<span id=\"ソースコード\" class=\"fragment\"></span><a href=\"#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>ソースコード</h1>\n\n<p>Codepenにあります<br>\n<a href=\"https://codepen.io/YuxioArts/pen/PObrvq\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://codepen.io/YuxioArts/pen/PObrvq</a></p>\n\n<p>元はこちら<br>\n<a href=\"https://codepen.io/chanonroy/pen/RKxJwo\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://codepen.io/chanonroy/pen/RKxJwo</a></p>\n\n<p>そんなに差異はない</p>\n",
    "body": "#はじめに\n\nVue.jsでいい感じのUIを作ろうと思い、\nVue.js 2 + ElementUIでできるフィルタリングを試してみました\n\n#こんな感じ\n\nタイピングに応じて検索結果が切り替わるのが個人的に好きです\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Vue.js 2 + ElementUI でフィルタリング <a href=\"https://t.co/74GQlH4swP\">https://t.co/74GQlH4swP</a> <a href=\"https://twitter.com/YouTube?ref_src=twsrc%5Etfw\">@YouTube</a>さんから</p>&mdash; Yuxio@冬仕様 (@YuxioArts) <a href=\"https://twitter.com/YuxioArts/status/928459816560771072?ref_src=twsrc%5Etfw\">2017年11月9日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n\n#ソースコード\n\nCodepenにあります\nhttps://codepen.io/YuxioArts/pen/PObrvq\n\n元はこちら\nhttps://codepen.io/chanonroy/pen/RKxJwo\n\nそんなに差異はない\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-09T12:15:02+09:00",
    "group": null,
    "id": "ac82f543b2bd65cfab76",
    "likes_count": 1,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "ElementUI",
        "versions": []
      }
    ],
    "title": "Vue.js 2 + ElementUI でお手軽にフィルタリングを実装",
    "updated_at": "2017-11-09T12:15:02+09:00",
    "url": "http://qiita.com/yuxio/items/ac82f543b2bd65cfab76",
    "user": {
      "description": "趣味でWEB開発をしています。",
      "facebook_id": "",
      "followees_count": 6,
      "followers_count": 15,
      "github_login_name": null,
      "id": "yuxio",
      "items_count": 15,
      "linkedin_id": "",
      "location": "Tokyo Japan",
      "name": "",
      "organization": "",
      "permanent_id": 177776,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/177776/profile-images/1500812464",
      "twitter_screen_name": "YuxioArts",
      "website_url": ""
    }
  },
  {
    "rendered_body": "<p>Vue.jsでプラグインを作ってみたくなったので、それの作り方を調べました。（Vue.js 2.0以上です）</p>\n\n<p>本記事では、カスタムディレクティブを与えた要素にイベント付与するところが参考になるかと思います。</p>\n\n<p>以下の仕様を満たすプラグインを作るやり方を示していきます。</p>\n\n<ul>\n<li>v-qiita-clickというカスタムディレクティブをプロジェクト全体で利用できる</li>\n<li>そのディレクティグを与えた要素をクリックすると console.log('qiita!!')と出力される。</li>\n</ul>\n\n<p><a href=\"https://jp.vuejs.org/v2/guide/custom-directive.html\" rel=\"nofollow noopener\" target=\"_blank\">参考: カスタムディレクティブとは</a></p>\n\n<p>versionについては、この記事の執筆時のlatestのversionを想定しています。</p>\n\n<h1>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順</h1>\n\n<p>プロジェクトの作成 ~ プラグインの利用までを示します。</p>\n\n<h2>\n<span id=\"プロジェクトの作成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクトの作成</h2>\n\n<p>vue-cliを使うと簡単なので、利用しましょう。</p>\n\n<p><a href=\"https://github.com/vuejs/vue-cli\" rel=\"nofollow noopener\" target=\"_blank\">vue-cli</a></p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ npm install -g vue-cli\n$ vue init webpack my-project # my-projectの部分は自分のプロジェクト名\n</pre></div></div>\n\n<p>以降、このプロジェクト名をmy-projectとして扱います。</p>\n\n<h2>\n<span id=\"プラグインとなるファイルの作成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%A8%E3%81%AA%E3%82%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>プラグインとなるファイルの作成</h2>\n\n<p>次にプロジェクトのrootに移動します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ cd my-project\n</pre></div></div>\n\n<p><code>src</code> というフォルダがありますが、こちらはプロジェクトのソースコードです。</p>\n\n<p>src以下に、今回のプラグインの実装を持つファイルを作成します。<br>\nファイル名は、 <code>qiita-click.js</code> としましょう。</p>\n\n<p>src以下の構成は以下のようになったと思います。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>src\n - main.js\n - qiita-click.js\n - assets/\n - App.vue\n</pre></div></div>\n\n<p>では、 <code>qiita-click.js</code> にプラグインの記述をしていきます。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">const</span> <span class=\"nx\">VueQiitaClick</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">install</span> <span class=\"p\">(</span><span class=\"nx\">Vue</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">directive</span><span class=\"p\">(</span><span class=\"s1\">'qiita-click'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"nx\">bind</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">'click'</span><span class=\"p\">,</span> <span class=\"nx\">click</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">)</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"kr\">const</span> <span class=\"nx\">click</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'qiita!!'</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"nx\">VueQiitaClick</span>\n</pre></div></div>\n\n<p>これで、プラグインを利用できる状況になりました。</p>\n\n<h2>\n<span id=\"プラグインの利用\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%AE%E5%88%A9%E7%94%A8\"><i class=\"fa fa-link\"></i></a>プラグインの利用</h2>\n\n<p>先ほど作成した、プラグインを利用する方法ですが、</p>\n\n<p><code>main.js</code><br>\nで <code>qiita-click.js</code> を読み込み、 useというグローバルメソッドで呼び出します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nx\">VueUIDraggable</span> <span class=\"nx\">from</span> <span class=\"s1\">'./qiita-click'</span>\n\n<span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">VueQiitaClick</span><span class=\"p\">)</span>\n\n</pre></div></div>\n\n<p>あとは、 <code>.vue</code> のほうで利用する方法です。以下のように <code>v-qiita-click</code> をdivタグ等任意のタグに追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>&lt;div v-qiita-click&gt;divテスト&lt;/div&gt;\n</pre></div></div>\n\n<p>これを実行してみると、 「divテスト」 という要素をクリックすると、console上で意図した出力が確認できると思います。</p>\n\n<h1>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n\n<p><a href=\"https://jp.vuejs.org/v2/guide/plugins.html\" rel=\"nofollow noopener\" target=\"_blank\">Vue plugin</a></p>\n",
    "body": "Vue.jsでプラグインを作ってみたくなったので、それの作り方を調べました。（Vue.js 2.0以上です）\n\n本記事では、カスタムディレクティブを与えた要素にイベント付与するところが参考になるかと思います。\n\n以下の仕様を満たすプラグインを作るやり方を示していきます。\n\n- v-qiita-clickというカスタムディレクティブをプロジェクト全体で利用できる\n- そのディレクティグを与えた要素をクリックすると console.log('qiita!!')と出力される。\n\n[参考: カスタムディレクティブとは](https://jp.vuejs.org/v2/guide/custom-directive.html)\n\nversionについては、この記事の執筆時のlatestのversionを想定しています。\n\n# 手順\n\nプロジェクトの作成 ~ プラグインの利用までを示します。\n\n## プロジェクトの作成\n\nvue-cliを使うと簡単なので、利用しましょう。\n\n[vue-cli](https://github.com/vuejs/vue-cli)\n\n```\n$ npm install -g vue-cli\n$ vue init webpack my-project # my-projectの部分は自分のプロジェクト名\n```\n\n以降、このプロジェクト名をmy-projectとして扱います。\n\n## プラグインとなるファイルの作成\n\n次にプロジェクトのrootに移動します。\n\n```\n$ cd my-project\n```\n\n`src` というフォルダがありますが、こちらはプロジェクトのソースコードです。\n\nsrc以下に、今回のプラグインの実装を持つファイルを作成します。\nファイル名は、 `qiita-click.js` としましょう。\n\nsrc以下の構成は以下のようになったと思います。\n\n```\nsrc\n - main.js\n - qiita-click.js\n - assets/\n - App.vue\n```\n\nでは、 `qiita-click.js` にプラグインの記述をしていきます。\n\n```js\nconst VueQiitaClick = {\n  install (Vue, options) {\n    Vue.directive('qiita-click', {\n      bind: (el) => {\n        el.addEventListener('click', click, false)\n      }\n    })\n\n    const click = () => {\n      console.log('qiita!!')\n    }\n  }\n}\n\nexport default VueQiitaClick\n```\n\nこれで、プラグインを利用できる状況になりました。\n\n## プラグインの利用\n\n先ほど作成した、プラグインを利用する方法ですが、\n\n`main.js`\nで `qiita-click.js` を読み込み、 useというグローバルメソッドで呼び出します。\n\n```js\nimport VueUIDraggable from './qiita-click'\n\nVue.use(VueQiitaClick)\n\n```\n\n\nあとは、 `.vue` のほうで利用する方法です。以下のように `v-qiita-click` をdivタグ等任意のタグに追加します。\n\n```\n<div v-qiita-click>divテスト</div>\n```\n\n\nこれを実行してみると、 「divテスト」 という要素をクリックすると、console上で意図した出力が確認できると思います。\n\n# 参考\n\n[Vue plugin](https://jp.vuejs.org/v2/guide/plugins.html)\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-08T17:59:58+09:00",
    "group": null,
    "id": "261ece93f9a8a7ca53cb",
    "likes_count": 3,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "vue",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      }
    ],
    "title": "Vue.jsで自作のプラグインを作ってみる",
    "updated_at": "2017-11-08T18:06:27+09:00",
    "url": "http://qiita.com/peg_73_/items/261ece93f9a8a7ca53cb",
    "user": {
      "description": "好きなプログラマーはBrad Fitzpatrickです\r\n最近作ってるものは以下。\r\nhttps://egusahiroaki.github.io/markdownTableGenerator/#/",
      "facebook_id": "",
      "followees_count": 13,
      "followers_count": 10,
      "github_login_name": "egusahiroaki",
      "id": "peg_73_",
      "items_count": 23,
      "linkedin_id": "",
      "location": "Tokyo, japan",
      "name": "eg pub",
      "organization": "",
      "permanent_id": 88357,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/88357/profile-images/1473704396",
      "twitter_screen_name": null,
      "website_url": "https://egusahiroaki.github.io/"
    }
  },
  {
    "rendered_body": "<p>Vue SCSS Bootstrap の開発環境。<br>\nLaravel Mix とかで簡単に構築できてしまうので、理解するためにも、一回自分でちゃんとwebpack設定してみようと思ったらすごく手間取った。<br>\nので、忘れぬようにメモ。</p>\n\n<h1>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h1>\n\n<ul>\n<li>webpackでコンパイル（watchでファイル変更を監視する）</li>\n<li>Vue.jsを使いたい。（単一ファイルコンポーネントを使いたい）</li>\n<li>スタイルはScssで書く</li>\n<li>CSSは別ファイルに書き出したい</li>\n<li>基本的なスタイルはBootstrapを使いたい</li>\n</ul>\n\n<p>という感じのときの webpack.config.js </p>\n\n<h2>\n<span id=\"ファイル構成\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>ファイル構成</h2>\n\n<p><a href=\"https://camo.qiitausercontent.com/e94b82a67805aa19b07d86be09d7d3cb8456db6b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f37333833332f66643062353164342d306131372d356236362d386163642d6565393062323135323535612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"210\" alt=\"スクリーンショット 2017-11-08 17.32.54.png\" src=\"https://camo.qiitausercontent.com/e94b82a67805aa19b07d86be09d7d3cb8456db6b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f37333833332f66643062353164342d306131372d356236362d386163642d6565393062323135323535612e706e67\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/73833/fd0b51d4-0a17-5b66-8acd-ee90b215255a.png\"></a><br>\n↓中身<br>\n<a href=\"https://camo.qiitausercontent.com/b6387056436e4643a8d069c31cab53b274e589f9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f37333833332f34653765303435642d356266662d356562612d666336642d3761333039306536366263302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"215\" alt=\"スクリーンショット 2017-11-08 17.30.58.png\" src=\"https://camo.qiitausercontent.com/b6387056436e4643a8d069c31cab53b274e589f9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f37333833332f34653765303435642d356266662d356562612d666336642d3761333039306536366263302e706e67\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/73833/4e7e045d-5bff-5eba-fc6d-7a3090e66bc0.png\"></a></p>\n\n<h2>\n<span id=\"準備\" class=\"fragment\"></span><a href=\"#%E6%BA%96%E5%82%99\"><i class=\"fa fa-link\"></i></a>準備</h2>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">index.html</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">\"utf-8\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">http-equiv</span><span class=\"o\">=</span><span class=\"s\">\"X-UA-Compatible\"</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">\"IE=edge\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>webpack test<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"css/style.css\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">main</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"app\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"container\"</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"row\"</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"col-md-12\"</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">&lt;</span><span class=\"nt\">test</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">test</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">main</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"js/bundle.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n\n</pre></div>\n</div>\n\n<h2>\n<span id=\"npmのインストール\" class=\"fragment\"></span><a href=\"#npm%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>npmのインストール</h2>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n\n<span class=\"err\">//</span>\n  <span class=\"nt\">\"scripts\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"test\"</span><span class=\"p\">:</span> <span class=\"s2\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"dev\"</span><span class=\"p\">:</span> <span class=\"s2\">\"webpack\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"watch:js\"</span><span class=\"p\">:</span> <span class=\"s2\">\"watch 'npm run dev' src/js/\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"watch:css\"</span><span class=\"p\">:</span> <span class=\"s2\">\"watch 'npm run dev' src/scss/\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"watch\"</span><span class=\"p\">:</span> <span class=\"s2\">\"npm run watch:js &amp; npm run watch:css\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"dependencies\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"bootstrap-sass\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^3.3.7\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"vue\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^2.5.3\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"devDependencies\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"css-loader\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^0.28.7\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"extract-text-webpack-plugin\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^3.0.2\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"node-sass\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^4.6.0\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"sass-loader\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^6.0.6\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"style-loader\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^0.19.0\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"vue-loader\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^13.0.4\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"vue-template-compiler\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^2.4.2\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"watch\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^1.0.2\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"webpack\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^3.8.1\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>package.json  はこんな感じでした。<br>\nひょっとしたら、いらないパッケージもあるかも？？<br>\n（scriptsのあたりは、おそらくもっとスマートな方法があると思います）</p>\n\n<h2>\n<span id=\"設定\" class=\"fragment\"></span><a href=\"#%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>設定</h2>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">webpack.config.js</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"kd\">var</span> <span class=\"nx\">ExtractTextPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'extract-text-webpack-plugin'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">entry</span><span class=\"o\">:</span> <span class=\"s1\">'./src/js/app.js'</span><span class=\"p\">,</span> <span class=\"c1\">// jsファイル読み込み先</span>\n  <span class=\"nx\">output</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"nx\">__dirname</span><span class=\"p\">,</span>\n    <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">'./public/js/bundle.js'</span>　 <span class=\"c1\">// jsファイル出力先</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">resolve</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">alias</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">vue</span><span class=\"o\">:</span> <span class=\"s1\">'vue/dist/vue.esm.js'</span>\n　　　　　　　　<span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">module</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">rules</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.vue$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s1\">'vue-loader'</span><span class=\"p\">,</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.scss$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">use</span><span class=\"o\">:</span> <span class=\"nx\">ExtractTextPlugin</span><span class=\"p\">.</span><span class=\"nx\">extract</span><span class=\"p\">({</span>\n          <span class=\"nx\">fallback</span><span class=\"o\">:</span> <span class=\"s1\">'style-loader'</span><span class=\"p\">,</span>\n          <span class=\"nx\">use</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">'css-loader'</span><span class=\"p\">,</span> <span class=\"s1\">'sass-loader'</span><span class=\"p\">]</span>\n        <span class=\"p\">})</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">devtool</span><span class=\"o\">:</span> <span class=\"s1\">'source-map'</span><span class=\"p\">,</span>\n  <span class=\"nx\">plugins</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"k\">new</span> <span class=\"nx\">ExtractTextPlugin</span><span class=\"p\">(</span><span class=\"s1\">'./public/css/style.css'</span><span class=\"p\">)</span> <span class=\"c1\">// CSSファイル出力先</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"bootstrapをつかう\" class=\"fragment\"></span><a href=\"#bootstrap%E3%82%92%E3%81%A4%E3%81%8B%E3%81%86\"><i class=\"fa fa-link\"></i></a>Bootstrapをつかう</h2>\n\n<div class=\"code-frame\" data-lang=\"scss\">\n<div class=\"code-lang\"><span class=\"bold\">style.scss</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"nv\">$icon-font-path</span><span class=\"o\">:</span> <span class=\"s2\">\"bootstrap-sass/assets/fonts/bootstrap/\"</span><span class=\"p\">;</span>\n<span class=\"k\">@import</span> <span class=\"s2\">\"~bootstrap-sass/assets/stylesheets/bootstrap-sprockets\"</span><span class=\"p\">;</span>\n<span class=\"k\">@import</span> <span class=\"s2\">\"~bootstrap-sass/assets/stylesheets/bootstrap\"</span><span class=\"p\">;</span>\n\n<span class=\"nt\">div</span><span class=\"p\">{</span>\n    <span class=\"nt\">h1</span><span class=\"p\">{</span>\n        <span class=\"c1\">//何か書く</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h2>\n<span id=\"vueコンポーネント\" class=\"fragment\"></span><a href=\"#vue%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>Vueコンポーネント</h2>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.js</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nx\">Vue</span> <span class=\"nx\">from</span> <span class=\"s1\">'vue'</span><span class=\"p\">;</span>\n<span class=\"kr\">import</span> <span class=\"nx\">test</span> <span class=\"nx\">from</span> <span class=\"s1\">'./components/Test.vue'</span><span class=\"p\">;</span>  <span class=\"c1\">//コンポーネントファイル</span>\n\n<span class=\"c1\">//スタイル</span>\n<span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'../scss/style.scss'</span><span class=\"p\">);</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n    <span class=\"nx\">el</span><span class=\"o\">:</span> <span class=\"s1\">'#app'</span><span class=\"p\">,</span>\n    <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"test\"</span><span class=\"o\">:</span> <span class=\"nx\">test</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">});</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"Vue.js\">\n<div class=\"code-lang\"><span class=\"bold\">Test.vue</span></div>\n<div class=\"highlight\"><pre><span></span>&lt;template lang=\"html\"&gt;\n  &lt;div&gt;\n    &lt;h1&gt;webpack&lt;/h1&gt;\n    &lt;h2&gt;のテストだよ&lt;/h2&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n}\n&lt;/script&gt;\n\n&lt;style lang=\"scss\"&gt;\n\n&lt;/style&gt;\n</pre></div>\n</div>\n\n<h2>\n<span id=\"ビルドコンパイル\" class=\"fragment\"></span><a href=\"#%E3%83%93%E3%83%AB%E3%83%89%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB\"><i class=\"fa fa-link\"></i></a>ビルド（コンパイル）</h2>\n\n<p><code>$ npm run dev</code></p>\n\n<p>監視するとき<br>\n<code>$ npm run watch</code></p>\n\n<p>で、なんとか出来たみたい。</p>\n",
    "body": "Vue SCSS Bootstrap の開発環境。\nLaravel Mix とかで簡単に構築できてしまうので、理解するためにも、一回自分でちゃんとwebpack設定してみようと思ったらすごく手間取った。\nので、忘れぬようにメモ。\n\n# やりたいこと\n\n- webpackでコンパイル（watchでファイル変更を監視する）\n- Vue.jsを使いたい。（単一ファイルコンポーネントを使いたい）\n- スタイルはScssで書く\n- CSSは別ファイルに書き出したい\n- 基本的なスタイルはBootstrapを使いたい\n\nという感じのときの webpack.config.js \n\n## ファイル構成\n<img width=\"210\" alt=\"スクリーンショット 2017-11-08 17.32.54.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/73833/fd0b51d4-0a17-5b66-8acd-ee90b215255a.png\">\n↓中身\n<img width=\"215\" alt=\"スクリーンショット 2017-11-08 17.30.58.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/73833/4e7e045d-5bff-5eba-fc6d-7a3090e66bc0.png\">\n\n## 準備\n```html:index.html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <title>webpack test</title>\n  <link rel=\"stylesheet\" href=\"css/style.css\">\n</head>\n<body>\n  <main id=\"app\">\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <test></test>\n        </div>\n      </div>\n    </div>\n  </main>\n  <script src=\"js/bundle.js\"></script>\n</body>\n</html>\n\n```\n\n## npmのインストール\n\n```json:package.json\n{\n\n//\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"dev\": \"webpack\",\n    \"watch:js\": \"watch 'npm run dev' src/js/\",\n    \"watch:css\": \"watch 'npm run dev' src/scss/\",\n    \"watch\": \"npm run watch:js & npm run watch:css\"\n  },\n  \"dependencies\": {\n    \"bootstrap-sass\": \"^3.3.7\",\n    \"vue\": \"^2.5.3\"\n  },\n  \"devDependencies\": {\n    \"css-loader\": \"^0.28.7\",\n    \"extract-text-webpack-plugin\": \"^3.0.2\",\n    \"node-sass\": \"^4.6.0\",\n    \"sass-loader\": \"^6.0.6\",\n    \"style-loader\": \"^0.19.0\",\n    \"vue-loader\": \"^13.0.4\",\n    \"vue-template-compiler\": \"^2.4.2\",\n    \"watch\": \"^1.0.2\",\n    \"webpack\": \"^3.8.1\"\n  }\n}\n```\npackage.json  はこんな感じでした。\nひょっとしたら、いらないパッケージもあるかも？？\n（scriptsのあたりは、おそらくもっとスマートな方法があると思います）\n\n\n## 設定\n\n```js:webpack.config.js\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/js/app.js', // jsファイル読み込み先\n  output: {\n    path: __dirname,\n    filename: './public/js/bundle.js'　 // jsファイル出力先\n  },\n  resolve: {\n    alias: {\n      vue: 'vue/dist/vue.esm.js'\n　　　　　　　　}\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n      },\n      {\n        test: /\\.scss$/,\n        use: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use: ['css-loader', 'sass-loader']\n        })\n      }\n    ]\n  },\n  devtool: 'source-map',\n  plugins: [\n    new ExtractTextPlugin('./public/css/style.css') // CSSファイル出力先\n  ]\n};\n```\n\n## Bootstrapをつかう\n\n```scss:style.scss\n$icon-font-path: \"bootstrap-sass/assets/fonts/bootstrap/\";\n@import \"~bootstrap-sass/assets/stylesheets/bootstrap-sprockets\";\n@import \"~bootstrap-sass/assets/stylesheets/bootstrap\";\n\ndiv{\n    h1{\n        //何か書く\n    }\n}\n\n```\n\n## Vueコンポーネント\n\n```js:app.js\nimport Vue from 'vue';\nimport test from './components/Test.vue';  //コンポーネントファイル\n\n//スタイル\nrequire('../scss/style.scss');\n\nconst app = new Vue({\n    el: '#app',\n    components: {\n    \"test\": test,\n  },\n});\n\n```\n\n```Vue.js:Test.vue\n<template lang=\"html\">\n  <div>\n    <h1>webpack</h1>\n    <h2>のテストだよ</h2>\n  </div>\n</template>\n\n<script>\nexport default {\n}\n</script>\n\n<style lang=\"scss\">\n\n</style>\n```\n\n## ビルド（コンパイル）\n`$ npm run dev`\n\n監視するとき\n`$ npm run watch`\n\n\nで、なんとか出来たみたい。\n\n\n\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-08T17:45:02+09:00",
    "group": null,
    "id": "1cf18c7c85ba8daa8b38",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Sass",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "webpack",
        "versions": []
      }
    ],
    "title": "webpackでVueファイルとSCSS＋ExtractTextPluginをビルドする",
    "updated_at": "2017-11-08T17:46:50+09:00",
    "url": "http://qiita.com/shin1kt/items/1cf18c7c85ba8daa8b38",
    "user": {
      "description": "web,php,html,css,javascript",
      "facebook_id": "katacom.jp",
      "followees_count": 4,
      "followers_count": 5,
      "github_login_name": "shin1kt",
      "id": "shin1kt",
      "items_count": 22,
      "linkedin_id": "",
      "location": "niigata,japan",
      "name": "",
      "organization": "katacom",
      "permanent_id": 73833,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/73833/profile-images/1473699640",
      "twitter_screen_name": "kt_shin1",
      "website_url": "http://www.katacom.jp/a/"
    }
  },
  {
    "rendered_body": "<p>Vue.jsとRailsを組み合わせている時、Rubyの世界からJSの世界に値を楽に渡したいと思ったことはありませんか？<br>\n私はあります。</p>\n\n<p>そこでWeb APIを経由せずにデータを渡す方法をいくつか試してみたので、まとめてみました。<br>\n※ 以下、vue-cliで生成されたファイルで試しています。</p>\n\n<h2>\n<span id=\"共通\" class=\"fragment\"></span><a href=\"#%E5%85%B1%E9%80%9A\"><i class=\"fa fa-link\"></i></a>共通</h2>\n\n<p>App.vueは共通のものを使用します。<br>\nこのコンポーネントの<code>props</code>に情報が渡れることを目的とします。<br>\n追加したのは<code>props</code>と<code>&lt;div&gt;{{ arg1 }}&lt;/div&gt;</code>だけです。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">src/App.vue</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"app\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>{{ arg1 }}<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"./assets/logo.png\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">HelloWorld</span><span class=\"p\">/&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"kr\">import</span> <span class=\"nx\">HelloWorld</span> <span class=\"nx\">from</span> <span class=\"s1\">'./components/HelloWorld'</span>\n\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n  <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">'app'</span><span class=\"p\">,</span>\n  <span class=\"nx\">props</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">arg1</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"nb\">String</span><span class=\"p\">,</span> <span class=\"nx\">required</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">HelloWorld</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n<span class=\"p\">#</span><span class=\"nn\">app</span> <span class=\"p\">{</span>\n  <span class=\"k\">font-family</span><span class=\"p\">:</span> <span class=\"s1\">'Avenir'</span><span class=\"p\">,</span> <span class=\"n\">Helvetica</span><span class=\"p\">,</span> <span class=\"n\">Arial</span><span class=\"p\">,</span> <span class=\"kc\">sans-serif</span><span class=\"p\">;</span>\n  <span class=\"kp\">-webkit-</span><span class=\"n\">font-smoothing</span><span class=\"p\">:</span> <span class=\"n\">antialiased</span><span class=\"p\">;</span>\n  <span class=\"kp\">-moz-</span><span class=\"n\">osx-font-smoothing</span><span class=\"p\">:</span> <span class=\"n\">grayscale</span><span class=\"p\">;</span>\n  <span class=\"k\">text-align</span><span class=\"p\">:</span> <span class=\"kc\">center</span><span class=\"p\">;</span>\n  <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"mh\">#2c3e50</span><span class=\"p\">;</span>\n  <span class=\"k\">margin-top</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"同じ変数名で渡す\" class=\"fragment\"></span><a href=\"#%E5%90%8C%E3%81%98%E5%A4%89%E6%95%B0%E5%90%8D%E3%81%A7%E6%B8%A1%E3%81%99\"><i class=\"fa fa-link\"></i></a>同じ変数名で渡す</h2>\n\n<p><code>src/main.js</code>が読み込まれる前に変数を<code>index.html</code>で定義する</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">index.html</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">\"utf-8\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>test<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"app\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">arg1</span> <span class=\"o\">=</span> <span class=\"s1\">'arg1'</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n    <span class=\"c\">&lt;!-- built files will be auto injected --&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">src/main.js</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nx\">Vue</span> <span class=\"nx\">from</span> <span class=\"s1\">'vue'</span>\n<span class=\"kr\">import</span> <span class=\"nx\">App</span> <span class=\"nx\">from</span> <span class=\"s1\">'./App'</span>\n\n<span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">productionTip</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">arg1</span> <span class=\"o\">===</span> <span class=\"s1\">'undefined'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">'Not found arg1'</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n  <span class=\"nx\">el</span><span class=\"o\">:</span> <span class=\"s1\">'#app'</span><span class=\"p\">,</span>\n  <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"sb\">`&lt;App arg1=\"</span><span class=\"si\">${</span><span class=\"nx\">arg1</span><span class=\"si\">}</span><span class=\"sb\">\"/&gt;`</span><span class=\"p\">,</span>\n  <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">App</span> <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"appをindexhtmlで書く\" class=\"fragment\"></span><a href=\"#app%E3%82%92indexhtml%E3%81%A7%E6%9B%B8%E3%81%8F\"><i class=\"fa fa-link\"></i></a>Appをindex.htmlで書く</h2>\n\n<p>Vueインスタンスではtemplateを書かずに<code>index.html</code>で書く</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">index.html</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">\"utf-8\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>test<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"app\"</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">App</span> <span class=\"na\">arg1</span><span class=\"o\">=</span><span class=\"s\">\"arg1\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">App</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"c\">&lt;!-- built files will be auto injected --&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">src/main.js</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nx\">Vue</span> <span class=\"nx\">from</span> <span class=\"s1\">'vue'</span>\n<span class=\"kr\">import</span> <span class=\"nx\">App</span> <span class=\"nx\">from</span> <span class=\"s1\">'./App'</span>\n\n<span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">productionTip</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n\n<span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n  <span class=\"nx\">el</span><span class=\"o\">:</span> <span class=\"s1\">'#app'</span><span class=\"p\">,</span>\n  <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">App</span> <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"rootで受け取る\" class=\"fragment\"></span><a href=\"#root%E3%81%A7%E5%8F%97%E3%81%91%E5%8F%96%E3%82%8B\"><i class=\"fa fa-link\"></i></a>Rootで受け取る</h2>\n\n<p>mountするelementにarg1を書いて、renderが呼ばれたときに取得し、propsで渡す</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">index.html</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">\"utf-8\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>test<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"app\"</span> <span class=\"na\">arg1</span><span class=\"o\">=</span><span class=\"s\">\"arg1\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"c\">&lt;!-- built files will be auto injected --&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">src/main.js</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nx\">Vue</span> <span class=\"nx\">from</span> <span class=\"s1\">'vue'</span>\n<span class=\"kr\">import</span> <span class=\"nx\">App</span> <span class=\"nx\">from</span> <span class=\"s1\">'./App'</span>\n\n<span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">productionTip</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n\n<span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n  <span class=\"nx\">el</span><span class=\"o\">:</span> <span class=\"s1\">'#app'</span><span class=\"p\">,</span>\n  <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"s1\">'&lt;App/&gt;'</span><span class=\"p\">,</span>\n  <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">App</span> <span class=\"p\">},</span>\n  <span class=\"nx\">render</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">createElement</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">arg1</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$el</span><span class=\"p\">.</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"s1\">'arg1'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">'App'</span><span class=\"p\">,</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">props</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n          <span class=\"nx\">arg1</span><span class=\"o\">:</span> <span class=\"nx\">arg1</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">})</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h1>\n\n<p>思いついたものの列挙なので、もっと良い手段やそもそもこんなことしないでいいよというものがあれば教えていただけると嬉しいです</p>\n",
    "body": "\nVue.jsとRailsを組み合わせている時、Rubyの世界からJSの世界に値を楽に渡したいと思ったことはありませんか？\n私はあります。\n\nそこでWeb APIを経由せずにデータを渡す方法をいくつか試してみたので、まとめてみました。\n※ 以下、vue-cliで生成されたファイルで試しています。\n\n## 共通\nApp.vueは共通のものを使用します。\nこのコンポーネントの`props`に情報が渡れることを目的とします。\n追加したのは`props`と`<div>{{ arg1 }}</div>`だけです。\n\n```html:src/App.vue\n<template>\n  <div id=\"app\">\n    <div>{{ arg1 }}</div>\n    <img src=\"./assets/logo.png\">\n    <HelloWorld/>\n  </div>\n</template>\n\n<script>\nimport HelloWorld from './components/HelloWorld'\n\nexport default {\n  name: 'app',\n  props: {\n    arg1: { type: String, required: true }\n  },\n  components: {\n    HelloWorld\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n```\n\n## 同じ変数名で渡す\n`src/main.js`が読み込まれる前に変数を`index.html`で定義する\n\n```index.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>test</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script>\n      var arg1 = 'arg1'\n    </script>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n```\n\n```src/main.js\nimport Vue from 'vue'\nimport App from './App'\n\nVue.config.productionTip = false\n\nif (typeof arg1 === 'undefined') {\n  throw new Error('Not found arg1')\n}\n\nnew Vue({\n  el: '#app',\n  template: `<App arg1=\"${arg1}\"/>`,\n  components: { App }\n})\n```\n\n## Appをindex.htmlで書く\nVueインスタンスではtemplateを書かずに`index.html`で書く\n\n```index.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>test</title>\n  </head>\n  <body>\n    <div id=\"app\">\n      <App arg1=\"arg1\"></App>\n    </div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n```\n\n``` src/main.js\nimport Vue from 'vue'\nimport App from './App'\n\nVue.config.productionTip = false\n\nnew Vue({\n  el: '#app',\n  components: { App }\n})\n```\n\n## Rootで受け取る\nmountするelementにarg1を書いて、renderが呼ばれたときに取得し、propsで渡す\n\n```index.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>test</title>\n  </head>\n  <body>\n    <div id=\"app\" arg1=\"arg1\"></div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n```\n\n```src/main.js\nimport Vue from 'vue'\nimport App from './App'\n\nVue.config.productionTip = false\n\nnew Vue({\n  el: '#app',\n  template: '<App/>',\n  components: { App },\n  render: function(createElement) {\n    const arg1 = this.$el.getAttribute('arg1')\n    return createElement('App',\n      {\n        props: {\n          arg1: arg1\n        }\n      })\n  }\n})\n```\n\n# 最後に\n思いついたものの列挙なので、もっと良い手段やそもそもこんなことしないでいいよというものがあれば教えていただけると嬉しいです\n",
    "coediting": false,
    "comments_count": 2,
    "created_at": "2017-11-08T16:26:59+09:00",
    "group": null,
    "id": "3f125ededf66723ce3d6",
    "likes_count": 3,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "JavaScript",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      }
    ],
    "title": "Vue.jsの外から情報を渡したい",
    "updated_at": "2017-11-08T17:52:36+09:00",
    "url": "http://qiita.com/rinsyan0518/items/3f125ededf66723ce3d6",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 0,
      "github_login_name": null,
      "id": "rinsyan0518",
      "items_count": 5,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 51292,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/51292/profile-images/1491140659",
      "twitter_screen_name": "rinsyan0518",
      "website_url": ""
    }
  },
  {
    "rendered_body": "<p>いろいろ最初に組み込まれて手順が減ってきていて、最近はこのぐらいで終わるようです。<br>\nvue事態のインストールなどは、他を参考ください。</p>\n\n<ul>\n<li>プロジェクトの構築(設定はすべてデフォルト)<br>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ vue init webpack vue-pug-sass\n</pre></div></div>\n\n<p>設定はすべてデフォルトでOKなのでエンターキーを連打で！</p>\n\n<ul>\n<li>npmのインストール<br>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ cd vue-pug-sass\n$ npm install\n$ npm install pug-html-loader --save-dev\n$ npm install node-sass --save-dev\n$ npm install sass-loader --save-dev\n</pre></div></div>\n\n<p>追加するモジュールはこの3つだけでOK!あとは書くだけで利用出来ます。</p>\n\n<ul>\n<li>初期コンポーネントの置き換え</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"vue\"><div class=\"highlight\"><pre><span></span>&lt;template lang=\"pug\"&gt;\n.hello\n  h1 {{ msg }}\n  h2 Essential Links\n  ul\n    li\n      a(href='https://vuejs.org', target='_blank') Core Docs\n    li\n      a(href='https://forum.vuejs.org', target='_blank') Forum\n    li\n      a(href='https://chat.vuejs.org', target='_blank') Community Chat\n    li\n      a(href='https://twitter.com/vuejs', target='_blank') Twitter\n    br\n    li\n      a(href='http://vuejs-templates.github.io/webpack/', target='_blank') Docs for This Template\n  h2 Ecosystem\n  ul\n    li\n      a(href='http://router.vuejs.org/', target='_blank') vue-router\n    li\n      a(href='http://vuex.vuejs.org/', target='_blank') vuex\n    li\n      a(href='http://vue-loader.vuejs.org/', target='_blank') vue-loader\n    li\n      a(href='https://github.com/vuejs/awesome-vue', target='_blank') awesome-vue\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'HelloWorld',\n  data () {\n    return {\n      msg: 'Welcome to Your Vue.js App'\n    }\n  }\n}\n&lt;/script&gt;\n\n&lt;style lang=\"scss\"&gt;\n$msg-color: #42b983;\n\nh1, h2 {\n  font-weight: normal;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\n\na {\n  color: $msg-color;\n}\n&lt;/style&gt;\n</pre></div></div>\n\n<p>./src/components/HelloWorld.vue をpugとsassで書いた物です。<br>\nsassは変数を使って正しくコンパイルされているか確認しています。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ npm run dev\n</pre></div></div>\n\n<p>デフォルトのページがpugとsassで書かれていてもしっかりと動いているのを確認してください。</p>\n",
    "body": "いろいろ最初に組み込まれて手順が減ってきていて、最近はこのぐらいで終わるようです。\nvue事態のインストールなどは、他を参考ください。\n\n* プロジェクトの構築(設定はすべてデフォルト)  \n\n```\n$ vue init webpack vue-pug-sass\n```  \n\n設定はすべてデフォルトでOKなのでエンターキーを連打で！\n\n* npmのインストール  \n\n```\n$ cd vue-pug-sass\n$ npm install\n$ npm install pug-html-loader --save-dev\n$ npm install node-sass --save-dev\n$ npm install sass-loader --save-dev\n```\n\n追加するモジュールはこの3つだけでOK!あとは書くだけで利用出来ます。\n\n* 初期コンポーネントの置き換え\n\n```vue\n<template lang=\"pug\">\n.hello\n  h1 {{ msg }}\n  h2 Essential Links\n  ul\n    li\n      a(href='https://vuejs.org', target='_blank') Core Docs\n    li\n      a(href='https://forum.vuejs.org', target='_blank') Forum\n    li\n      a(href='https://chat.vuejs.org', target='_blank') Community Chat\n    li\n      a(href='https://twitter.com/vuejs', target='_blank') Twitter\n    br\n    li\n      a(href='http://vuejs-templates.github.io/webpack/', target='_blank') Docs for This Template\n  h2 Ecosystem\n  ul\n    li\n      a(href='http://router.vuejs.org/', target='_blank') vue-router\n    li\n      a(href='http://vuex.vuejs.org/', target='_blank') vuex\n    li\n      a(href='http://vue-loader.vuejs.org/', target='_blank') vue-loader\n    li\n      a(href='https://github.com/vuejs/awesome-vue', target='_blank') awesome-vue\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  data () {\n    return {\n      msg: 'Welcome to Your Vue.js App'\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n$msg-color: #42b983;\n\nh1, h2 {\n  font-weight: normal;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\n\na {\n  color: $msg-color;\n}\n</style>\n``` \n\n./src/components/HelloWorld.vue をpugとsassで書いた物です。\nsassは変数を使って正しくコンパイルされているか確認しています。\n\n```\n$ npm run dev\n```\n\nデフォルトのページがpugとsassで書かれていてもしっかりと動いているのを確認してください。\n",
    "coediting": false,
    "comments_count": 1,
    "created_at": "2017-11-08T08:23:37+09:00",
    "group": null,
    "id": "4218be62a94291086f0e",
    "likes_count": 2,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Sass",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "pug",
        "versions": []
      }
    ],
    "title": "Vue.js 2.91 でのpug + sass環境構築",
    "updated_at": "2017-11-08T11:47:11+09:00",
    "url": "http://qiita.com/myamada/items/4218be62a94291086f0e",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 0,
      "followers_count": 1,
      "github_login_name": null,
      "id": "myamada",
      "items_count": 4,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 43801,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/43801/profile-images/1473689654",
      "twitter_screen_name": null,
      "website_url": null
    }
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h1>\n\n<p>Vue.jsのv-modelにバインドされるデータをオブジェクトの配列にする</p>\n\n<p>例えば、</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n  <span class=\"nx\">el</span><span class=\"o\">:</span> <span class=\"s1\">'#app'</span><span class=\"p\">,</span>\n  <span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">vals</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">\"a\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">\"b\"</span><span class=\"p\">},</span>\n    <span class=\"p\">],</span>\n    <span class=\"nx\">checkedVal</span><span class=\"o\">:</span> <span class=\"p\">[]</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</pre></div></div>\n\n<p>のようなデータを以下の通りバインディングしたとき、</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">v-for</span><span class=\"o\">=</span><span class=\"s\">\"val in vals\"</span><span class=\"p\">&gt;</span>\n  {{ val.name }}\n  <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"checkbox\"</span> <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"checkedVal\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n</pre></div></div>\n\n<p>チェックボックスにチェックをつけると <code>checkedVal</code> には <code>vals</code> の要素オブジェクトまるごとを入れたいという感じ。</p>\n\n<p>jsfiddle書いたのでそちらを見たほうが早いかもしれない<br>\n<a href=\"https://jsfiddle.net/seihmd/kaghf0xd/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://jsfiddle.net/seihmd/kaghf0xd/</a></p>\n\n<h1>\n<span id=\"やりかた\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%8B%E3%81%9F\"><i class=\"fa fa-link\"></i></a>やりかた</h1>\n\n<p>v-modelをつけたタグに <code>v-bind:value=\"val\"</code> をつければいい。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"checkbox\"</span> <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"checkedVal\"</span> <span class=\"na\">v-bind:value</span><span class=\"o\">=</span><span class=\"s\">\"val\"</span><span class=\"p\">&gt;</span>\n</pre></div></div>\n\n<p>実際の動作はfiddleのほうで。</p>\n\n<h1>\n<span id=\"初期値を設定したいとき\" class=\"fragment\"></span><a href=\"#%E5%88%9D%E6%9C%9F%E5%80%A4%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%9F%E3%81%84%E3%81%A8%E3%81%8D\"><i class=\"fa fa-link\"></i></a>初期値を設定したいとき</h1>\n\n<p>v-modelにバインドする配列（上記jsで言えば<code>checkedVal</code>）に値を設定しておけばチェックボックスをtrueにしておくこともできるが、オブジェクトの場合は各プロパティの値が同じであれば同一とみなされるようだ。</p>\n\n<p>こう書くと対応する対応するチェックボックスがtrueの状態でレンダリングされる。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">vals</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">\"a\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">\"b\"</span><span class=\"p\">},</span>\n    <span class=\"p\">],</span>\n    <span class=\"nx\">checkedVal</span><span class=\"o\">:</span> <span class=\"p\">[{</span><span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s2\">\"a\"</span><span class=\"p\">}]</span>\n  <span class=\"p\">}</span>\n</pre></div></div>\n\n<p>比較のパフォーマンスは落ちるだろうし、どのような値のプロパティでも比較できるわけはないので、オブジェクトまるごとを使うのはシンプルな構造の場合にとどめておいたほうがいいと思う。</p>\n\n<h1>\n<span id=\"一部のプロパティだけ渡したい\" class=\"fragment\"></span><a href=\"#%E4%B8%80%E9%83%A8%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%A0%E3%81%91%E6%B8%A1%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>一部のプロパティだけ渡したい</h1>\n\n<p>オブジェクトまるごとではなく一部のプロパティだけを渡したい場合はvalueで指定してやればok</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"checkbox\"</span> <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"checkedVal\"</span> <span class=\"na\">v-bind:value</span><span class=\"o\">=</span><span class=\"s\">\"{id: val.id, name: val.name}\"</span><span class=\"p\">&gt;</span>\n</pre></div></div>\n\n<p><a href=\"https://jsfiddle.net/seihmd/emcbempx/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://jsfiddle.net/seihmd/emcbempx/</a></p>\n",
    "body": "# やりたいこと\nVue.jsのv-modelにバインドされるデータをオブジェクトの配列にする\n\n例えば、\n\n```js\nnew Vue({\n  el: '#app',\n  data: {\n  \tvals: [\n\t\t{id: 1, name: \"a\"},\n\t\t{id: 2, name: \"b\"},\n\t],\n    checkedVal: []\n  }\n});\n```\nのようなデータを以下の通りバインディングしたとき、\n\n```html\n<p v-for=\"val in vals\">\n  {{ val.name }}\n  <input type=\"checkbox\" v-model=\"checkedVal\">\n</p>\n```\nチェックボックスにチェックをつけると ```checkedVal``` には ```vals``` の要素オブジェクトまるごとを入れたいという感じ。\n\njsfiddle書いたのでそちらを見たほうが早いかもしれない\nhttps://jsfiddle.net/seihmd/kaghf0xd/\n\n# やりかた\n\nv-modelをつけたタグに ```v-bind:value=\"val\"``` をつければいい。\n\n```html\n<input type=\"checkbox\" v-model=\"checkedVal\" v-bind:value=\"val\">\n```\n実際の動作はfiddleのほうで。\n\n# 初期値を設定したいとき\n\nv-modelにバインドする配列（上記jsで言えば``` checkedVal ```）に値を設定しておけばチェックボックスをtrueにしておくこともできるが、オブジェクトの場合は各プロパティの値が同じであれば同一とみなされるようだ。\n\nこう書くと対応する対応するチェックボックスがtrueの状態でレンダリングされる。\n\n```js\ndata: {\n\tvals: [\n\t\t{id: 1, name: \"a\"},\n\t\t{id: 2, name: \"b\"},\n\t],\n    checkedVal: [{id: 1, name: \"a\"}]\n  }\n```\n\n比較のパフォーマンスは落ちるだろうし、どのような値のプロパティでも比較できるわけはないので、オブジェクトまるごとを使うのはシンプルな構造の場合にとどめておいたほうがいいと思う。\n\n# 一部のプロパティだけ渡したい\n\nオブジェクトまるごとではなく一部のプロパティだけを渡したい場合はvalueで指定してやればok\n\n```html\n<input type=\"checkbox\" v-model=\"checkedVal\" v-bind:value=\"{id: val.id, name: val.name}\">\n```\n\nhttps://jsfiddle.net/seihmd/emcbempx/\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-06T22:02:44+09:00",
    "group": null,
    "id": "e4b2dfbdaba423fde6a7",
    "likes_count": 2,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "JavaScript",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      }
    ],
    "title": "Vue.jsのv-modelにオブジェクトの配列をバインドする",
    "updated_at": "2017-11-06T22:02:44+09:00",
    "url": "http://qiita.com/seihmd/items/e4b2dfbdaba423fde6a7",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 34,
      "followers_count": 15,
      "github_login_name": "seihmd",
      "id": "seihmd",
      "items_count": 31,
      "linkedin_id": "",
      "location": "Tokyo, Japan",
      "name": "",
      "organization": "ヴォーカーズ",
      "permanent_id": 51303,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/51303/profile-images/1486306587",
      "twitter_screen_name": "seihmd",
      "website_url": ""
    }
  },
  {
    "rendered_body": "<p>サーバサイドを Go で WebAPI として独立して作り、フロントは Vue.js で SPA チックに作り、Static な成果物（HTML/CSS/JS）を Go バイナリに内包して Heroku で動かすメモです。</p>\n\n<p>サンプルのソースコードはこちらです。</p>\n\n<ul>\n<li><a href=\"https://github.com/zaru/go-vuejs-heroku\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/zaru/go-vuejs-heroku</a></li>\n</ul>\n\n<h2>\n<span id=\"前提条件\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6\"><i class=\"fa fa-link\"></i></a>前提条件</h2>\n\n<ul>\n<li>Go 1.9+\n\n<ul>\n<li>パッケージ管理: dep</li>\n<li>DBマイグレーション: pressly/goose</li>\n</ul>\n</li>\n<li>Vue.js 2.5+\n\n<ul>\n<li>vue-cli</li>\n<li>ビルドツール: webpack</li>\n</ul>\n</li>\n<li>Heroku\n\n<ul>\n<li>PostgreSQL</li>\n<li>Redis</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"デプロイの動作フロー\" class=\"fragment\"></span><a href=\"#%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%AE%E5%8B%95%E4%BD%9C%E3%83%95%E3%83%AD%E3%83%BC\"><i class=\"fa fa-link\"></i></a>デプロイの動作フロー</h3>\n\n<ul>\n<li>git push heroku master で Heroku にデプロイ</li>\n<li>デプロイ\n\n<ul>\n<li>dep で必要パッケージをインストール</li>\n<li>npm で必要パッケージをインストール</li>\n<li>Vue.js を webpack でビルド</li>\n<li>Go アプリをビルド</li>\n<li>マイグレーションコマンドをビルド</li>\n<li>マイグレーションコマンドを実行</li>\n</ul>\n</li>\n<li>デプロイ完了</li>\n</ul>\n\n<h2>\n<span id=\"go\" class=\"fragment\"></span><a href=\"#go\"><i class=\"fa fa-link\"></i></a>Go</h2>\n\n<h3>\n<span id=\"初期設定\" class=\"fragment\"></span><a href=\"#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>初期設定</h3>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>cd $GOPATH/your-name\nmkdir go-vuejs-heroku\ncd go-vuejs-heroku\n</pre></div></div>\n\n<h3>\n<span id=\"dep-パッケージ管理\" class=\"fragment\"></span><a href=\"#dep-%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E7%AE%A1%E7%90%86\"><i class=\"fa fa-link\"></i></a>dep パッケージ管理</h3>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>dep init\ndep ensure\n</pre></div></div>\n\n<h4>\n<span id=\"heroku-でコマンドビルド\" class=\"fragment\"></span><a href=\"#heroku-%E3%81%A7%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%93%E3%83%AB%E3%83%89\"><i class=\"fa fa-link\"></i></a>Heroku でコマンドビルド</h4>\n\n<p><code>pressly/goose</code> のマイグレーションコマンドをデプロイ時に実行できるように、アプリのバイナリとは別にコマンドをビルドできる Heroku 用の設定を <code>Gopkg.toml</code> に追記します。</p>\n\n<div class=\"code-frame\" data-lang=\"toml\">\n<div class=\"code-lang\"><span class=\"bold\">Gopkg.toml</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">[</span><span class=\"n\">metadata</span><span class=\"p\">.</span><span class=\"n\">heroku</span><span class=\"p\">]</span>\n  <span class=\"n\">root-package</span> <span class=\"o\">=</span> <span class=\"s\">\"github.com/zaru/go-vuejs-heroku\"</span>\n  <span class=\"n\">go-version</span> <span class=\"o\">=</span> <span class=\"s\">\"go1.9.1\"</span>\n  <span class=\"n\">install</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s\">\".\"</span><span class=\"p\">,</span> <span class=\"s\">\"./cmd/...\"</span> <span class=\"p\">]</span>\n  <span class=\"n\">ensure</span> <span class=\"o\">=</span> <span class=\"s\">\"true\"</span>\n</pre></div>\n</div>\n\n<p>ポイントは <code>install = [ \".\", \"./cmd/...\" ]</code> です。これは Heroku の環境変数である <code>GO_INSTALL_PACKAGE_SPEC</code> と同じ役割になります。 dep 以外の glide などのパッケージ管理の場合はこちらの環境変数を修正します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>heroku config:set GO_INSTALL_PACKAGE_SPEC=\". ./cmd/... \"\n</pre></div></div>\n\n<h4>\n<span id=\"goose-コマンドスクリプトを配置\" class=\"fragment\"></span><a href=\"#goose-%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E9%85%8D%E7%BD%AE\"><i class=\"fa fa-link\"></i></a>goose コマンドスクリプトを配置</h4>\n\n<p>上記で設定したコマンドのスクリプト <code>cmd/goose/main.go</code> に下記コードを配置します。これは<a href=\"https://github.com/pressly/goose/blob/master/cmd/goose/main.go\" rel=\"nofollow noopener\" target=\"_blank\">公式で用意されているサンプルコード</a>です。</p>\n\n<div class=\"code-frame\" data-lang=\"go\">\n<div class=\"code-lang\"><span class=\"bold\">cmd/goose/main.go</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"kn\">package</span> <span class=\"nx\">main</span>\n\n<span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">\"database/sql\"</span>\n    <span class=\"s\">\"flag\"</span>\n    <span class=\"s\">\"log\"</span>\n    <span class=\"s\">\"os\"</span>\n\n    <span class=\"nx\">_</span> <span class=\"s\">\"github.com/lib/pq\"</span>\n    <span class=\"s\">\"github.com/pressly/goose\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">var</span> <span class=\"p\">(</span>\n    <span class=\"nx\">flags</span> <span class=\"p\">=</span> <span class=\"nx\">flag</span><span class=\"p\">.</span><span class=\"nx\">NewFlagSet</span><span class=\"p\">(</span><span class=\"s\">\"goose\"</span><span class=\"p\">,</span> <span class=\"nx\">flag</span><span class=\"p\">.</span><span class=\"nx\">ExitOnError</span><span class=\"p\">)</span>\n    <span class=\"nx\">dir</span>   <span class=\"p\">=</span> <span class=\"nx\">flags</span><span class=\"p\">.</span><span class=\"nx\">String</span><span class=\"p\">(</span><span class=\"s\">\"dir\"</span><span class=\"p\">,</span> <span class=\"s\">\".\"</span><span class=\"p\">,</span> <span class=\"s\">\"directory with migration files\"</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">flags</span><span class=\"p\">.</span><span class=\"nx\">Usage</span> <span class=\"p\">=</span> <span class=\"nx\">usage</span>\n    <span class=\"nx\">flags</span><span class=\"p\">.</span><span class=\"nx\">Parse</span><span class=\"p\">(</span><span class=\"nx\">os</span><span class=\"p\">.</span><span class=\"nx\">Args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n\n    <span class=\"nx\">args</span> <span class=\"o\">:=</span> <span class=\"nx\">flags</span><span class=\"p\">.</span><span class=\"nx\">Args</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">\"create\"</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">goose</span><span class=\"p\">.</span><span class=\"nx\">Run</span><span class=\"p\">(</span><span class=\"s\">\"create\"</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"nx\">dir</span><span class=\"p\">,</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span><span class=\"o\">...</span><span class=\"p\">);</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n            <span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">Fatalf</span><span class=\"p\">(</span><span class=\"s\">\"goose run: %v\"</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">&lt;</span> <span class=\"mi\">3</span> <span class=\"p\">{</span>\n        <span class=\"nx\">flags</span><span class=\"p\">.</span><span class=\"nx\">Usage</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">\"-h\"</span> <span class=\"o\">||</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">\"--help\"</span> <span class=\"p\">{</span>\n        <span class=\"nx\">flags</span><span class=\"p\">.</span><span class=\"nx\">Usage</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">driver</span><span class=\"p\">,</span> <span class=\"nx\">dbstring</span><span class=\"p\">,</span> <span class=\"nx\">command</span> <span class=\"o\">:=</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n\n    <span class=\"k\">switch</span> <span class=\"nx\">driver</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"s\">\"postgres\"</span><span class=\"p\">,</span> <span class=\"s\">\"mysql\"</span><span class=\"p\">,</span> <span class=\"s\">\"sqlite3\"</span><span class=\"p\">,</span> <span class=\"s\">\"redshift\"</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">goose</span><span class=\"p\">.</span><span class=\"nx\">SetDialect</span><span class=\"p\">(</span><span class=\"nx\">driver</span><span class=\"p\">);</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n            <span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">Fatal</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"k\">default</span><span class=\"p\">:</span>\n        <span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">Fatalf</span><span class=\"p\">(</span><span class=\"s\">\"%q driver not supported\\n\"</span><span class=\"p\">,</span> <span class=\"nx\">driver</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">switch</span> <span class=\"nx\">dbstring</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"s\">\"\"</span><span class=\"p\">:</span>\n        <span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">Fatalf</span><span class=\"p\">(</span><span class=\"s\">\"-dbstring=%q not supported\\n\"</span><span class=\"p\">,</span> <span class=\"nx\">dbstring</span><span class=\"p\">)</span>\n    <span class=\"k\">default</span><span class=\"p\">:</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"nx\">driver</span> <span class=\"o\">==</span> <span class=\"s\">\"redshift\"</span> <span class=\"p\">{</span>\n        <span class=\"nx\">driver</span> <span class=\"p\">=</span> <span class=\"s\">\"postgres\"</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">db</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">sql</span><span class=\"p\">.</span><span class=\"nx\">Open</span><span class=\"p\">(</span><span class=\"nx\">driver</span><span class=\"p\">,</span> <span class=\"nx\">dbstring</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n        <span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">Fatalf</span><span class=\"p\">(</span><span class=\"s\">\"-dbstring=%q: %v\\n\"</span><span class=\"p\">,</span> <span class=\"nx\">dbstring</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">arguments</span> <span class=\"o\">:=</span> <span class=\"p\">[]</span><span class=\"kt\">string</span><span class=\"p\">{}</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">&gt;</span> <span class=\"mi\">3</span> <span class=\"p\">{</span>\n        <span class=\"nx\">arguments</span> <span class=\"p\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"nx\">arguments</span><span class=\"p\">,</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:]</span><span class=\"o\">...</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"nx\">err</span> <span class=\"o\">:=</span> <span class=\"nx\">goose</span><span class=\"p\">.</span><span class=\"nx\">Run</span><span class=\"p\">(</span><span class=\"nx\">command</span><span class=\"p\">,</span> <span class=\"nx\">db</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"nx\">dir</span><span class=\"p\">,</span> <span class=\"nx\">arguments</span><span class=\"o\">...</span><span class=\"p\">);</span> <span class=\"nx\">err</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n        <span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">Fatalf</span><span class=\"p\">(</span><span class=\"s\">\"goose run: %v\"</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">usage</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">Print</span><span class=\"p\">(</span><span class=\"nx\">usagePrefix</span><span class=\"p\">)</span>\n    <span class=\"nx\">flags</span><span class=\"p\">.</span><span class=\"nx\">PrintDefaults</span><span class=\"p\">()</span>\n    <span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">Print</span><span class=\"p\">(</span><span class=\"nx\">usageCommands</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"p\">(</span>\n    <span class=\"nx\">usagePrefix</span> <span class=\"p\">=</span> <span class=\"s\">`Usage: goose [OPTIONS] DRIVER DBSTRING COMMAND</span>\n<span class=\"s\">Drivers:</span>\n<span class=\"s\">    postgres</span>\n<span class=\"s\">    mysql</span>\n<span class=\"s\">    sqlite3</span>\n<span class=\"s\">    redshift</span>\n<span class=\"s\">Examples:</span>\n<span class=\"s\">    goose sqlite3 ./foo.db status</span>\n<span class=\"s\">    goose sqlite3 ./foo.db create init sql</span>\n<span class=\"s\">    goose sqlite3 ./foo.db create add_some_column sql</span>\n<span class=\"s\">    goose sqlite3 ./foo.db create fetch_user_data go</span>\n<span class=\"s\">    goose sqlite3 ./foo.db up</span>\n<span class=\"s\">    goose postgres \"user=postgres dbname=postgres sslmode=disable\" status</span>\n<span class=\"s\">    goose mysql \"user:password@/dbname?parseTime=true\" status</span>\n<span class=\"s\">    goose redshift \"postgres://user:password@qwerty.us-east-1.redshift.amazonaws.com:5439/db\" status</span>\n<span class=\"s\">Options:</span>\n<span class=\"s\">`</span>\n\n    <span class=\"nx\">usageCommands</span> <span class=\"p\">=</span> <span class=\"s\">`</span>\n<span class=\"s\">Commands:</span>\n<span class=\"s\">    up                   Migrate the DB to the most recent version available</span>\n<span class=\"s\">    up-to VERSION        Migrate the DB to a specific VERSION</span>\n<span class=\"s\">    down                 Roll back the version by 1</span>\n<span class=\"s\">    down-to VERSION      Roll back to a specific VERSION</span>\n<span class=\"s\">    redo                 Re-run the latest migration</span>\n<span class=\"s\">    status               Dump the migration status for the current DB</span>\n<span class=\"s\">    version              Print the current version of the database</span>\n<span class=\"s\">    create NAME [sql|go] Creates new migration file with next version</span>\n<span class=\"s\">`</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n\n<p>これによって dep の <code>Gopkg.lock</code> に <code>pressly/goose</code> が追記されるようになっていると思います。より明示的に指定したい場合は <code>Gopkg.toml</code> で管理しても良いかもしれません。</p>\n\n<div class=\"code-frame\" data-lang=\"toml\">\n<div class=\"code-lang\"><span class=\"bold\">Gopkg.toml</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">[[</span><span class=\"n\">constraint</span><span class=\"p\">]]</span>\n  <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"github.com/pressly/goose\"</span>\n  <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s\">\"2.1.0\"</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"vuejs\" class=\"fragment\"></span><a href=\"#vuejs\"><i class=\"fa fa-link\"></i></a>Vue.js</h2>\n\n<h3>\n<span id=\"初期設定-1\" class=\"fragment\"></span><a href=\"#%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A-1\"><i class=\"fa fa-link\"></i></a>初期設定</h3>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>cd $GOPATH/your-name/go-vuejs-heroku\nvue init webpack vue-app\ncd vue-app\nnpm install\n</pre></div></div>\n\n<p>Vue.js は特別なことはないです。 vue-cli を使って webpack なアプリをテンプレを作っています。</p>\n\n<h2>\n<span id=\"heroku\" class=\"fragment\"></span><a href=\"#heroku\"><i class=\"fa fa-link\"></i></a>Heroku</h2>\n\n<p>Heroku にアプリを作成します。そして Go と Node.JS のビルドパックを追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>heroku create go-vuejs-heroku\nheroku buildpacks:add heroku/go --app go-vuejs-heroku\nheroku buildpacks:add heroku/nodejs --app go-vuejs-heroku\n</pre></div></div>\n\n<p>PostgreSQL と Redis のアドオンを追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>heroku addons:create heroku-postgresql:hobby-dev --app go-vuejs-heroku\nheroku addons:create heroku-redis:hobby-dev --app go-vuejs-heroku\n</pre></div></div>\n\n<p>PostgreSQL と Redis の接続情報は環境変数に入っているので、アプリ側が参照するように修正しておきます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>heroku config\n</pre></div></div>\n\n<p>デプロイ時に webpack でビルドできるように <code>NPM_CONFIG_PRODUCTION</code> を false にしておきます。そうしないと <code>devDependencies</code> のパッケージがインストールされません。ついでに Go のバージョン指定もしておきます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>heroku config:set NPM_CONFIG_PRODUCTION=false\nheroku config:set GOVERSION=go1.9\n</pre></div></div>\n\n<h3>\n<span id=\"別ディレクトリの-npm-を動かす\" class=\"fragment\"></span><a href=\"#%E5%88%A5%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AE-npm-%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99\"><i class=\"fa fa-link\"></i></a>別ディレクトリの npm を動かす</h3>\n\n<p>今回のサンプルアプリでは Go アプリの中に Vue.js のアプリを内包するようにしているので、 <code>package.json</code> はサブディレクトリにあります。そうすると Heroku の Node.JS ビルドパックではビルドしてくれません。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>.\n├── Procfile\n├── server.go\n└── vue-app\n    ├── package.json\n</pre></div></div>\n\n<p>そこで、ルートディレクトリにも <code>package.json</code> を配置してビルドコマンドを記述します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>touch package.json\n</pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>.\n├── Procfile\n├── server.go\n├── package.json\n└── vue-app\n    ├── package.json\n</pre></div></div>\n\n<p><code>postinstall</code> で vue-app ディレクトリの中で npm install と npm run build でビルドを実行しています。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"go-vuejs-heroku\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"engines\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"node\"</span><span class=\"p\">:</span> <span class=\"s2\">\"7.10.0\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"npm\"</span><span class=\"p\">:</span> <span class=\"s2\">\"4.2.0\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"scripts\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"postinstall\"</span><span class=\"p\">:</span> <span class=\"s2\">\"npm --prefix ./vue-app install ./vue-app &amp;&amp; cd ./vue-app &amp;&amp; npm run build\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"マイグレーションコマンドを実行\" class=\"fragment\"></span><a href=\"#%E3%83%9E%E3%82%A4%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E5%AE%9F%E8%A1%8C\"><i class=\"fa fa-link\"></i></a>マイグレーションコマンドを実行</h3>\n\n<p><code>Procfile</code> にリリース時に実行するコマンドを指定できます。そこでマイグレーションコマンドを実行指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"Procfile\"><div class=\"highlight\"><pre><span></span>release: goose postgres $DATABASE_URL up\nweb: go-vuejs-heroku\n</pre></div></div>\n\n<p>以上で、Heroku で Go と Vue.js を使った Web アプリケーションを動かすことができるようになりました。</p>\n",
    "body": "サーバサイドを Go で WebAPI として独立して作り、フロントは Vue.js で SPA チックに作り、Static な成果物（HTML/CSS/JS）を Go バイナリに内包して Heroku で動かすメモです。\n\nサンプルのソースコードはこちらです。\n\n- https://github.com/zaru/go-vuejs-heroku\n\n## 前提条件\n\n- Go 1.9+\n  - パッケージ管理: dep\n  - DBマイグレーション: pressly/goose\n- Vue.js 2.5+\n  - vue-cli\n  - ビルドツール: webpack\n- Heroku\n  - PostgreSQL\n  - Redis\n\n### デプロイの動作フロー\n\n- git push heroku master で Heroku にデプロイ\n- デプロイ\n  - dep で必要パッケージをインストール\n  - npm で必要パッケージをインストール\n  - Vue.js を webpack でビルド\n  - Go アプリをビルド\n  - マイグレーションコマンドをビルド\n  - マイグレーションコマンドを実行\n- デプロイ完了\n\n## Go\n\n### 初期設定\n\n```\ncd $GOPATH/your-name\nmkdir go-vuejs-heroku\ncd go-vuejs-heroku\n```\n\n### dep パッケージ管理\n\n```\ndep init\ndep ensure\n```\n\n#### Heroku でコマンドビルド\n\n`pressly/goose` のマイグレーションコマンドをデプロイ時に実行できるように、アプリのバイナリとは別にコマンドをビルドできる Heroku 用の設定を `Gopkg.toml` に追記します。\n\n```toml:Gopkg.toml\n[metadata.heroku]\n  root-package = \"github.com/zaru/go-vuejs-heroku\"\n  go-version = \"go1.9.1\"\n  install = [ \".\", \"./cmd/...\" ]\n  ensure = \"true\"\n```\n\nポイントは `install = [ \".\", \"./cmd/...\" ]` です。これは Heroku の環境変数である `GO_INSTALL_PACKAGE_SPEC` と同じ役割になります。 dep 以外の glide などのパッケージ管理の場合はこちらの環境変数を修正します。\n\n```\nheroku config:set GO_INSTALL_PACKAGE_SPEC=\". ./cmd/... \"\n```\n\n#### goose コマンドスクリプトを配置\n\n上記で設定したコマンドのスクリプト `cmd/goose/main.go` に下記コードを配置します。これは[公式で用意されているサンプルコード](https://github.com/pressly/goose/blob/master/cmd/goose/main.go)です。\n\n```go:cmd/goose/main.go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"flag\"\n\t\"log\"\n\t\"os\"\n\n\t_ \"github.com/lib/pq\"\n\t\"github.com/pressly/goose\"\n)\n\nvar (\n\tflags = flag.NewFlagSet(\"goose\", flag.ExitOnError)\n\tdir   = flags.String(\"dir\", \".\", \"directory with migration files\")\n)\n\nfunc main() {\n\tflags.Usage = usage\n\tflags.Parse(os.Args[1:])\n\n\targs := flags.Args()\n\n\tif len(args) > 1 && args[0] == \"create\" {\n\t\tif err := goose.Run(\"create\", nil, *dir, args[1:]...); err != nil {\n\t\t\tlog.Fatalf(\"goose run: %v\", err)\n\t\t}\n\t\treturn\n\t}\n\n\tif len(args) < 3 {\n\t\tflags.Usage()\n\t\treturn\n\t}\n\n\tif args[0] == \"-h\" || args[0] == \"--help\" {\n\t\tflags.Usage()\n\t\treturn\n\t}\n\n\tdriver, dbstring, command := args[0], args[1], args[2]\n\n\tswitch driver {\n\tcase \"postgres\", \"mysql\", \"sqlite3\", \"redshift\":\n\t\tif err := goose.SetDialect(driver); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\tdefault:\n\t\tlog.Fatalf(\"%q driver not supported\\n\", driver)\n\t}\n\n\tswitch dbstring {\n\tcase \"\":\n\t\tlog.Fatalf(\"-dbstring=%q not supported\\n\", dbstring)\n\tdefault:\n\t}\n\n\tif driver == \"redshift\" {\n\t\tdriver = \"postgres\"\n\t}\n\n\tdb, err := sql.Open(driver, dbstring)\n\tif err != nil {\n\t\tlog.Fatalf(\"-dbstring=%q: %v\\n\", dbstring, err)\n\t}\n\n\targuments := []string{}\n\tif len(args) > 3 {\n\t\targuments = append(arguments, args[3:]...)\n\t}\n\n\tif err := goose.Run(command, db, *dir, arguments...); err != nil {\n\t\tlog.Fatalf(\"goose run: %v\", err)\n\t}\n}\n\nfunc usage() {\n\tlog.Print(usagePrefix)\n\tflags.PrintDefaults()\n\tlog.Print(usageCommands)\n}\n\nvar (\n\tusagePrefix = `Usage: goose [OPTIONS] DRIVER DBSTRING COMMAND\nDrivers:\n    postgres\n    mysql\n    sqlite3\n    redshift\nExamples:\n    goose sqlite3 ./foo.db status\n    goose sqlite3 ./foo.db create init sql\n    goose sqlite3 ./foo.db create add_some_column sql\n    goose sqlite3 ./foo.db create fetch_user_data go\n    goose sqlite3 ./foo.db up\n    goose postgres \"user=postgres dbname=postgres sslmode=disable\" status\n    goose mysql \"user:password@/dbname?parseTime=true\" status\n    goose redshift \"postgres://user:password@qwerty.us-east-1.redshift.amazonaws.com:5439/db\" status\nOptions:\n`\n\n\tusageCommands = `\nCommands:\n    up                   Migrate the DB to the most recent version available\n    up-to VERSION        Migrate the DB to a specific VERSION\n    down                 Roll back the version by 1\n    down-to VERSION      Roll back to a specific VERSION\n    redo                 Re-run the latest migration\n    status               Dump the migration status for the current DB\n    version              Print the current version of the database\n    create NAME [sql|go] Creates new migration file with next version\n`\n)\n```\n\nこれによって dep の `Gopkg.lock` に `pressly/goose` が追記されるようになっていると思います。より明示的に指定したい場合は `Gopkg.toml` で管理しても良いかもしれません。\n\n```toml:Gopkg.toml\n[[constraint]]\n  name = \"github.com/pressly/goose\"\n  version = \"2.1.0\"\n```\n\n## Vue.js\n\n### 初期設定\n\n```\ncd $GOPATH/your-name/go-vuejs-heroku\nvue init webpack vue-app\ncd vue-app\nnpm install\n```\n\nVue.js は特別なことはないです。 vue-cli を使って webpack なアプリをテンプレを作っています。\n\n## Heroku\n\nHeroku にアプリを作成します。そして Go と Node.JS のビルドパックを追加します。\n\n```\nheroku create go-vuejs-heroku\nheroku buildpacks:add heroku/go --app go-vuejs-heroku\nheroku buildpacks:add heroku/nodejs --app go-vuejs-heroku\n```\n\nPostgreSQL と Redis のアドオンを追加します。\n\n```\nheroku addons:create heroku-postgresql:hobby-dev --app go-vuejs-heroku\nheroku addons:create heroku-redis:hobby-dev --app go-vuejs-heroku\n```\n\nPostgreSQL と Redis の接続情報は環境変数に入っているので、アプリ側が参照するように修正しておきます。\n\n```\nheroku config\n```\n\nデプロイ時に webpack でビルドできるように `NPM_CONFIG_PRODUCTION` を false にしておきます。そうしないと `devDependencies` のパッケージがインストールされません。ついでに Go のバージョン指定もしておきます。\n\n```\nheroku config:set NPM_CONFIG_PRODUCTION=false\nheroku config:set GOVERSION=go1.9\n```\n\n### 別ディレクトリの npm を動かす\n\n今回のサンプルアプリでは Go アプリの中に Vue.js のアプリを内包するようにしているので、 `package.json` はサブディレクトリにあります。そうすると Heroku の Node.JS ビルドパックではビルドしてくれません。\n\n```\n.\n├── Procfile\n├── server.go\n└── vue-app\n    ├── package.json\n```\n\nそこで、ルートディレクトリにも `package.json` を配置してビルドコマンドを記述します。\n\n```\ntouch package.json\n```\n\n```\n.\n├── Procfile\n├── server.go\n├── package.json\n└── vue-app\n    ├── package.json\n```\n\n`postinstall` で vue-app ディレクトリの中で npm install と npm run build でビルドを実行しています。\n\n```package.json\n{\n  \"name\": \"go-vuejs-heroku\",\n  \"version\": \"0.0.1\",\n  \"engines\": {\n    \"node\": \"7.10.0\",\n    \"npm\": \"4.2.0\"\n  },\n  \"scripts\": {\n    \"postinstall\": \"npm --prefix ./vue-app install ./vue-app && cd ./vue-app && npm run build\"\n  }\n}\n```\n\n### マイグレーションコマンドを実行\n\n`Procfile` にリリース時に実行するコマンドを指定できます。そこでマイグレーションコマンドを実行指定します。\n\n```Procfile\nrelease: goose postgres $DATABASE_URL up\nweb: go-vuejs-heroku\n```\n\n以上で、Heroku で Go と Vue.js を使った Web アプリケーションを動かすことができるようになりました。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-06T15:45:04+09:00",
    "group": null,
    "id": "a3e15236c25f39fbdcd6",
    "likes_count": 8,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Go",
        "versions": []
      },
      {
        "name": "Heroku",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "webpack",
        "versions": []
      }
    ],
    "title": "Go と Vue.js なアプリを Heroku で動かす",
    "updated_at": "2017-11-06T16:00:21+09:00",
    "url": "http://qiita.com/zaru/items/a3e15236c25f39fbdcd6",
    "user": {
      "description": "zaru / sakuraba\r\nwebpush gem https://rubygems.org/gems/webpush",
      "facebook_id": "zaru.hiroyuki.sakuraba",
      "followees_count": 63,
      "followers_count": 367,
      "github_login_name": "zaru",
      "id": "zaru",
      "items_count": 107,
      "linkedin_id": "",
      "location": "Tokyo, Japan",
      "name": "zaru",
      "organization": "Basic.inc",
      "permanent_id": 2152,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/2152/profile-images/1501661702",
      "twitter_screen_name": "zaru",
      "website_url": "http://tech.basicinc.jp/"
    }
  },
  {
    "rendered_body": "<p>大きく以下の4つの書き方があります（もっとあるかも）</p>\n\n<ol>\n<li><a href=\"#1%E6%96%87%E5%AD%97%E5%88%97\">文字列</a></li>\n<li><a href=\"#2x-template\">X-template</a></li>\n<li><a href=\"#3vue-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88\">.vue コンポーネント</a></li>\n<li><a href=\"#4%E6%8F%8F%E7%94%BB%E9%96%A2%E6%95%B0\">描画関数</a></li>\n</ol>\n\n<h2>\n<span id=\"1文字列\" class=\"fragment\"></span><a href=\"#1%E6%96%87%E5%AD%97%E5%88%97\"><i class=\"fa fa-link\"></i></a>1.文字列</h2>\n\n<p>一番スタンダードな方法と言えるでしょう。<br>\n文字通り文字列で記述します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">component</span><span class=\"p\">(</span><span class=\"s1\">'my-component'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"s1\">'&lt;div&gt;A custom component!&lt;/div&gt;'</span>\n<span class=\"p\">})</span>\n</pre></div></div>\n\n<p>また、tipsですがES6以上なら `` で囲むことによって複数行にまたがって記述することができるので可読性が上がります。<br><br>\nダブルクオート使うメリットもないはずなので、とりあえずこっち使っとくのがよいのではと思います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">component</span><span class=\"p\">(</span><span class=\"s1\">'my-component'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"sb\">`&lt;div&gt;</span>\n<span class=\"sb\">              A custom component!</span>\n<span class=\"sb\">             &lt;/div&gt;`</span>\n<span class=\"p\">})</span>\n</pre></div></div>\n\n<p>そして<a href=\"https://jp.vuejs.org/v2/guide/components.html#DOM-%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E8%A7%A3%E6%9E%90%E3%81%AE%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85\" rel=\"nofollow noopener\" target=\"_blank\">こちらの解説</a>に詳しいんですが、<br>\nいくつかのタグには制約(例えば<code>&lt;ul&gt;</code>タグの直下には<code>li</code>しか表示できない、みたいな)が存在しており、<br>\nそれをエラーとして検出できるのはこの記述方法のみとのことです。<br>\nおかしなDOMを作ることを検知できるのは一つのメリットかもしれません。</p>\n\n<h2>\n<span id=\"2x-template\" class=\"fragment\"></span><a href=\"#2x-template\"><i class=\"fa fa-link\"></i></a>2.X-template</h2>\n\n<p>参照:<a href=\"https://jp.vuejs.org/v2/guide/components.html#x-template\" rel=\"nofollow noopener\" target=\"_blank\">https://jp.vuejs.org/v2/guide/components.html#x-template</a></p>\n\n<p>こんな感じでHTML内に定義して</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/x-template\"</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"my-component\"</span><span class=\"p\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"nx\">A</span> <span class=\"nx\">custom</span> <span class=\"nx\">component</span><span class=\"o\">!&lt;</span><span class=\"err\">/div&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre></div></div>\n\n<p>JSからはID指定で読み込むことができます。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">component</span><span class=\"p\">(</span><span class=\"s1\">'my-component'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"s1\">'#my-component'</span>\n<span class=\"p\">})</span>\n</pre></div></div>\n\n<p>JS内からはID指定するのみなので大分さっぱりします。<br>\nただドキュメントでも言及されている通り、テンプレートの記述がコンポーネントから分離されて<br>\n管理が煩雑になりそうなので、プロダクションで使うには良い選択肢ではなさそうです。</p>\n\n<h2>\n<span id=\"3vue-コンポーネント\" class=\"fragment\"></span><a href=\"#3vue-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>3.<code>.vue</code> コンポーネント</h2>\n\n<p>参考:<a href=\"https://qiita.com/tkhr/items/ac22019c891fe8fa5f91\" id=\"reference-ac57de6123d7d224b1aa\">vue.jsのcomponentをwebpackで.vueにして単一ファイルコンポーネントにする</a></p>\n\n<p><code>.vue</code>の拡張子のファイルを作成し、下記のようにtemplateを記述します。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">my-component.vue</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>A custom component!<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n\n<p>JSからは以下のように読み込めます。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"nx\">from</span> <span class=\"nx\">MyComponent</span> <span class=\"kr\">import</span> <span class=\"s1\">'./my-component.vue'</span><span class=\"p\">;</span>\n\n<span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n  <span class=\"nx\">el</span><span class=\"o\">:</span> <span class=\"s1\">'#example'</span><span class=\"p\">,</span>\n  <span class=\"nx\">components</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">MyComponent</span> <span class=\"p\">},</span>\n  <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"s1\">'&lt;my-component&gt;'</span>\n<span class=\"p\">})</span>\n</pre></div></div>\n\n<p>メリットについては上記の参考記事にすごくよくまとまっているので、是非ご参照ください。<br>\n個人的にはこの書き方が一番幸せになれそうな予感がしています。</p>\n\n<h2>\n<span id=\"4描画関数\" class=\"fragment\"></span><a href=\"#4%E6%8F%8F%E7%94%BB%E9%96%A2%E6%95%B0\"><i class=\"fa fa-link\"></i></a>4.描画関数</h2>\n\n<p>参照: <a href=\"https://jp.vuejs.org/v2/guide/render-function.html\" rel=\"nofollow noopener\" target=\"_blank\">https://jp.vuejs.org/v2/guide/render-function.html</a><br>\n厳密には<code>templateの書き方</code>ではなく<code>templateを代替するもの</code>という捉え方の方が適切っぽいです。</p>\n\n<p>ドキュメントの例をそのまま拝借します。<br>\n下記のようなHTMLの構成のコンポーネントを作成、また、<code>h*</code>タグ の数字の部分をコンポーネントのpropsのlevelによって決めたいとします。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span> <span class=\"c\">&lt;!-- ここをlevelによって変動させたい --&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"hello-world\"</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"#hello-world\"</span><span class=\"p\">&gt;</span>\n    Hello world!\n  <span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n</pre></div></div>\n\n<p>愚直にtemplateでやろうとすると下記のようになってしまいます</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/x-template\"</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"anchored-heading-template\"</span><span class=\"p\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">h1</span> <span class=\"nx\">v</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"o\">=</span><span class=\"s2\">\"level === 1\"</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">slot</span><span class=\"o\">&gt;&lt;</span><span class=\"err\">/slot&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"err\">/h1&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">h2</span> <span class=\"nx\">v</span><span class=\"o\">-</span><span class=\"k\">else</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"o\">=</span><span class=\"s2\">\"level === 2\"</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">slot</span><span class=\"o\">&gt;&lt;</span><span class=\"err\">/slot&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"err\">/h2&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">h3</span> <span class=\"nx\">v</span><span class=\"o\">-</span><span class=\"k\">else</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"o\">=</span><span class=\"s2\">\"level === 3\"</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">slot</span><span class=\"o\">&gt;&lt;</span><span class=\"err\">/slot&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"err\">/h3&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">h4</span> <span class=\"nx\">v</span><span class=\"o\">-</span><span class=\"k\">else</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"o\">=</span><span class=\"s2\">\"level === 4\"</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">slot</span><span class=\"o\">&gt;&lt;</span><span class=\"err\">/slot&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"err\">/h4&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">h5</span> <span class=\"nx\">v</span><span class=\"o\">-</span><span class=\"k\">else</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"o\">=</span><span class=\"s2\">\"level === 5\"</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">slot</span><span class=\"o\">&gt;&lt;</span><span class=\"err\">/slot&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"err\">/h5&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">h6</span> <span class=\"nx\">v</span><span class=\"o\">-</span><span class=\"k\">else</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"o\">=</span><span class=\"s2\">\"level === 6\"</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">slot</span><span class=\"o\">&gt;&lt;</span><span class=\"err\">/slot&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"err\">/h6&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre></div></div>\n\n<p>いかにも冗長ですね。<br>\nこれをRender関数を使えば以下のように書けます。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">component</span><span class=\"p\">(</span><span class=\"s1\">'anchored-heading'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">render</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">createElement</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">createElement</span><span class=\"p\">(</span>\n      <span class=\"s1\">'h'</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">level</span><span class=\"p\">,</span>   <span class=\"c1\">// タグ名</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$slots</span><span class=\"p\">.</span><span class=\"k\">default</span> <span class=\"c1\">// 子の配列</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">props</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">level</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"nb\">Number</span><span class=\"p\">,</span>\n      <span class=\"nx\">required</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre></div></div>\n\n<p>また、<a href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx\" rel=\"nofollow noopener\" target=\"_blank\">Babelプラグイン</a>を使えば以下のようにJSXで記述することもできるみたいです。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nx\">AnchoredHeading</span> <span class=\"nx\">from</span> <span class=\"s1\">'./AnchoredHeading.vue'</span>\n\n<span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n  <span class=\"nx\">el</span><span class=\"o\">:</span> <span class=\"s1\">'#demo'</span><span class=\"p\">,</span>\n  <span class=\"nx\">render</span> <span class=\"p\">(</span><span class=\"nx\">h</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">AnchoredHeading</span> <span class=\"nx\">level</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">span</span><span class=\"o\">&gt;</span><span class=\"nx\">Hello</span><span class=\"o\">&lt;</span><span class=\"err\">/span&gt; world!</span>\n      <span class=\"o\">&lt;</span><span class=\"err\">/AnchoredHeading&gt;</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre></div></div>\n\n<p>よりプログラマブルにDOMの中身を出し分けたいという場合に描画関数が適している状況もありそうです。<br>\nちょっと私の経験では動的にタグ名とかを書き換えたい、の様などうしても動的に出し分けないと辛いみたいな要求に出会ったことがないので、文字列でサクッと書くことに比べた有用性がイメージしづらいですが、知識として知っておいて損はない書き方かなと感じました。</p>\n",
    "body": "大きく以下の4つの書き方があります（もっとあるかも）\n\n1. [文字列](#1%E6%96%87%E5%AD%97%E5%88%97)\n2. [X-template](#2x-template)\n3. [.vue コンポーネント](#3vue-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88)\n4. [描画関数](#4%E6%8F%8F%E7%94%BB%E9%96%A2%E6%95%B0)\n\n1.文字列\n------------------------------\n一番スタンダードな方法と言えるでしょう。\n文字通り文字列で記述します。\n\n```js\nVue.component('my-component', {\n  template: '<div>A custom component!</div>'\n})\n```\n\nまた、tipsですがES6以上なら `` で囲むことによって複数行にまたがって記述することができるので可読性が上がります。  \nダブルクオート使うメリットもないはずなので、とりあえずこっち使っとくのがよいのではと思います。\n\n```js\nVue.component('my-component', {\n  template: `<div>\n              A custom component!\n             </div>`\n})\n```\n\nそして[こちらの解説](https://jp.vuejs.org/v2/guide/components.html#DOM-テンプレート解析の注意事項)に詳しいんですが、\nいくつかのタグには制約(例えば`<ul>`タグの直下には`li`しか表示できない、みたいな)が存在しており、\nそれをエラーとして検出できるのはこの記述方法のみとのことです。\nおかしなDOMを作ることを検知できるのは一つのメリットかもしれません。\n\n2.X-template\n------------------------------\n参照:[https://jp.vuejs.org/v2/guide/components.html#x-template](https://jp.vuejs.org/v2/guide/components.html#x-template)\n\nこんな感じでHTML内に定義して\n\n```html\n<script type=\"text/x-template\" id=\"my-component\">\n  <div>A custom component!</div>\n</script>\n```\n\nJSからはID指定で読み込むことができます。\n\n\n```js\nVue.component('my-component', {\n  template: '#my-component'\n})\n```\n\nJS内からはID指定するのみなので大分さっぱりします。\nただドキュメントでも言及されている通り、テンプレートの記述がコンポーネントから分離されて\n管理が煩雑になりそうなので、プロダクションで使うには良い選択肢ではなさそうです。\n\n3.`.vue` コンポーネント\n------------------------------\n参考:[vue.jsのcomponentをwebpackで.vueにして単一ファイルコンポーネントにする](https://qiita.com/tkhr/items/ac22019c891fe8fa5f91)\n\n`.vue`の拡張子のファイルを作成し、下記のようにtemplateを記述します。\n\n```html:my-component.vue\n<template>\n  <div>A custom component!</div>\n</template>\n```\n\nJSからは以下のように読み込めます。\n\n```js\nfrom MyComponent import './my-component.vue';\n\nnew Vue({\n  el: '#example',\n  components: { MyComponent },\n  template: '<my-component>'\n})\n```\n\nメリットについては上記の参考記事にすごくよくまとまっているので、是非ご参照ください。\n個人的にはこの書き方が一番幸せになれそうな予感がしています。\n\n4.描画関数\n------------------------------\n参照: [https://jp.vuejs.org/v2/guide/render-function.html](https://jp.vuejs.org/v2/guide/render-function.html)\n厳密には`templateの書き方`ではなく`templateを代替するもの`という捉え方の方が適切っぽいです。\n\nドキュメントの例をそのまま拝借します。\n下記のようなHTMLの構成のコンポーネントを作成、また、`h*`タグ の数字の部分をコンポーネントのpropsのlevelによって決めたいとします。\n\n```html\n<h1> <!-- ここをlevelによって変動させたい -->\n  <a name=\"hello-world\" href=\"#hello-world\">\n    Hello world!\n  </a>\n</h1>\n```\n\n愚直にtemplateでやろうとすると下記のようになってしまいます\n\n```html\n<script type=\"text/x-template\" id=\"anchored-heading-template\">\n  <h1 v-if=\"level === 1\">\n    <slot></slot>\n  </h1>\n  <h2 v-else-if=\"level === 2\">\n    <slot></slot>\n  </h2>\n  <h3 v-else-if=\"level === 3\">\n    <slot></slot>\n  </h3>\n  <h4 v-else-if=\"level === 4\">\n    <slot></slot>\n  </h4>\n  <h5 v-else-if=\"level === 5\">\n    <slot></slot>\n  </h5>\n  <h6 v-else-if=\"level === 6\">\n    <slot></slot>\n  </h6>\n</script>\n```\n\nいかにも冗長ですね。\nこれをRender関数を使えば以下のように書けます。\n\n```js\nVue.component('anchored-heading', {\n  render: function (createElement) {\n    return createElement(\n      'h' + this.level,   // タグ名\n      this.$slots.default // 子の配列\n    )\n  },\n  props: {\n    level: {\n      type: Number,\n      required: true\n    }\n  }\n})\n```\n\nまた、[Babelプラグイン](https://github.com/vuejs/babel-plugin-transform-vue-jsx)を使えば以下のようにJSXで記述することもできるみたいです。\n\n```js\nimport AnchoredHeading from './AnchoredHeading.vue'\n\nnew Vue({\n  el: '#demo',\n  render (h) {\n    return (\n      <AnchoredHeading level={1}>\n        <span>Hello</span> world!\n      </AnchoredHeading>\n    )\n  }\n})\n```\n\nよりプログラマブルにDOMの中身を出し分けたいという場合に描画関数が適している状況もありそうです。\nちょっと私の経験では動的にタグ名とかを書き換えたい、の様などうしても動的に出し分けないと辛いみたいな要求に出会ったことがないので、文字列でサクッと書くことに比べた有用性がイメージしづらいですが、知識として知っておいて損はない書き方かなと感じました。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-06T15:30:44+09:00",
    "group": null,
    "id": "93a0055c8fdab62d584f",
    "likes_count": 7,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "JavaScript",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      }
    ],
    "title": "【Vue.js】コンポーネントのtemplateの書き方まとめ",
    "updated_at": "2017-11-06T17:05:58+09:00",
    "url": "http://qiita.com/Norise/items/93a0055c8fdab62d584f",
    "user": {
      "description": "某ユーザ中心系企業でエンジニアしてます。\r\n最近はReact.jsでのフロント開発が主です。",
      "facebook_id": "",
      "followees_count": 1,
      "followers_count": 3,
      "github_login_name": "kazuyaseki",
      "id": "Norise",
      "items_count": 16,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "beBit, Inc.",
      "permanent_id": 150569,
      "profile_image_url": "https://avatars.githubusercontent.com/u/6080698?v=3",
      "twitter_screen_name": "sekikazu01",
      "website_url": ""
    }
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>過去記事にてGoogle HomeからIFTTTを経由しローカルのラズパイを操作するにあたり、グローバル→ローカルの接続に<a href=\"https://firebase.google.com/\" rel=\"nofollow noopener\" target=\"_blank\">Firebase</a>を使用してみました。<br>\nそのときはRealtime Databaseのみの使用でしたが、FunctionsやHosting等結構色んなことができそうだったので試しにオンライン○✕ゲームを作ってみました。</p>\n\n<p>Webアプリは5年ぐらい前にXAMPP+WordPressとかでめちゃくそ簡単なコンテツ管理サイトを作ったことがあるぐらいで、現在のWeb環境は浦島太郎状態です。<br>\n調べてみたら今はJSフレームワークが主流でもうjQueryも使わない時代になってるんですね…<br>\n<a href=\"http://kikuchi1201.hateblo.jp/entry/2016/10/26/172404\" rel=\"nofollow noopener\" target=\"_blank\">【翻訳】 2016年にJavaScriptを学んでどう感じたか</a></p>\n\n<p>とりあえず学習コストも低いらしい<a href=\"https://jp.vuejs.org/index.html\" rel=\"nofollow noopener\" target=\"_blank\">Vue.js</a>ってのを使ってFirebase上で○✕ゲームを実装してみようと思います。</p>\n\n<p>なお完成品は<a href=\"#%E5%AE%8C%E6%88%90%E5%93%81\">こちら</a>です。</p>\n\n<h1>\n<span id=\"firebaseプロジェクトの作成\" class=\"fragment\"></span><a href=\"#firebase%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>Firebaseプロジェクトの作成</h1>\n\n<p>まずはFirebaseの<a href=\"https://console.firebase.google.com/\" rel=\"nofollow noopener\" target=\"_blank\">コンソール画面</a>へアクセスしプロジェクトを作成しましょう。</p>\n\n<p>「ox-game」とか適当にプロジェクト名をつけて、国を日本にして作成をクリックしたらコンソール画面での操作は完了です。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/472074e5e0716ab2f584e0fdbdfbfbb3dc7ab56a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3230373130392f66333235363639302d396462642d623832652d326431372d6638666163356135303263372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/472074e5e0716ab2f584e0fdbdfbfbb3dc7ab56a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3230373130392f66333235363639302d396462642d623832652d326431372d6638666163356135303263372e706e67\" alt=\"Firebase console_20171105_185257.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/207109/f3256690-9dbd-b82e-2d17-f8fac5a502c7.png\"></a></p>\n\n<p>以降の作業はNode.jsにて行います。</p>\n\n<h1>\n<span id=\"nodejsのインストール\" class=\"fragment\"></span><a href=\"#nodejs%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>Node.jsのインストール</h1>\n\n<p>Firebaseのローカルでのプロジェクト管理はNode.jsで行います。<br>\nまずはNode.jsをインストールしましょう。<br>\nなお私はWindows10 Proにて操作しました。</p>\n\n<p>以下の記事あたりを参考にインストールしてみて下さい。<br>\n<a href=\"https://qiita.com/t_kojima/items/780b3b3133a17cceb175\" id=\"reference-3a4c2ed287d1f070297b\">Windowsでnode.jsをバージョン管理する</a></p>\n\n<h1>\n<span id=\"firebase-toolsのインストール\" class=\"fragment\"></span><a href=\"#firebase-tools%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>firebase-toolsのインストール</h1>\n\n<p>続いて「firebase-tools」というFirebaseプロジェクトを管理するツールをインストールします。<br>\n<code>-g</code>オプションをつけてグローバルでインストールして下さい。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>npm install -g firebase-tools\n</pre></div></div>\n\n<h1>\n<span id=\"firebaseへのログイン\" class=\"fragment\"></span><a href=\"#firebase%E3%81%B8%E3%81%AE%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3\"><i class=\"fa fa-link\"></i></a>Firebaseへのログイン</h1>\n\n<p>以下のコマンドを実行し、表示されるウインドウよりログインして下さい。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>firebase login\n</pre></div></div>\n\n<h1>\n<span id=\"ローカルプロジェクトの作成\" class=\"fragment\"></span><a href=\"#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>ローカルプロジェクトの作成</h1>\n\n<p>次にローカルプロジェクトを作成します。<br>\n適当にプロジェクト用のフォルダをきって以下のコマンドを実行します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>firebase init\n</pre></div></div>\n\n<p>コマンド上で色々聞かれます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>? Are you ready to proceed? (Y/n)\n</pre></div></div>\n\n<p>ここはそのままEnter。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>? Which Firebase CLI features do you want to setup for this folder? Press Space\n to select features, then Enter to confirm your choices. (Press &lt;space&gt; to sele\nct)\n&gt;( ) Database: Deploy Firebase Realtime Database Rules\n ( ) Firestore: Deploy rules and create indexes for Firestore\n ( ) Functions: Configure and deploy Cloud Functions\n ( ) Hosting: Configure and deploy Firebase Hosting sites\n ( ) Storage: Deploy Cloud Storage security rules\n</pre></div></div>\n\n<p>これは<code>Database</code>と<code>Hosting</code>の2つをスペースで選択しEnter。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>=== Project Setup\n\nFirst, let's associate this project directory with a Firebase project.\nYou can create multiple project aliases by running firebase use --add,\nbut for now we'll just set up a default project.\n\n? Select a default Firebase project for this directory: (Use arrow keys)\n&gt; [don't setup a default project]\n  ox-game (ox-game-85a2f)\n  [create a new project]\n</pre></div></div>\n\n<p>これは先ほどコンソールにて作成したプロジェクトを選びます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>=== Database Setup\n\nFirebase Realtime Database Rules allow you to define how your data should be\nstructured and when your data can be read from and written to.\n\n? What file should be used for Database Rules? (database.rules.json)\n</pre></div></div>\n\n<p>Databaseの読み書き権限を定義するファイルです。<br>\nそのままEnterしちゃいましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>=== Hosting Setup\n\nYour public directory is the folder (relative to your project directory) that\nwill contain Hosting assets to be uploaded with firebase deploy. If you\nhave a build process for your assets, use your build's output directory.\n\n? What do you want to use as your public directory? (public)\n</pre></div></div>\n\n<p>Hositingするファイルを格納するフォルダ名の指定です。<br>\nここもそのままEnterで。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>? Configure as a single-page app (rewrite all urls to /index.html)? (y/N)\n</pre></div></div>\n\n<p>SPA(Single Page Application)にしますかと聞かれます。<br>\nとりあえず<code>y</code>で</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>+  Wrote public/index.html\n\ni  Writing configuration info to firebase.json...\ni  Writing project information to .firebaserc...\n\n+  Firebase initialization complete!\n</pre></div></div>\n\n<p>これでローカルプロジェクトが初期化されます。<br>\nフォルダ内に色々ファイルが作成されました。</p>\n\n<p>このうち<code>database.rules.json</code>がDatabaseへの読み書き権限を定義するファイルになります。<br>\nデフォルトだと認証しないと読み書きできないようになっているので、今回は誰でも読み書きできるよう、以下のように書き換えちゃいましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">database.rules.json</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">\"rules\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\".read\"</span><span class=\"p\">:</span> <span class=\"s2\">\"true\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\".write\"</span><span class=\"p\">:</span> <span class=\"s2\">\"true\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>以上でローカルプロジェクトの作成は完了です。</p>\n\n<h1>\n<span id=\"実装\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A3%85\"><i class=\"fa fa-link\"></i></a>実装</h1>\n\n<p>アプリのソースは<code>public</code>フォルダ配下になります。<br>\nこのフォルダの中身がFirebaseのサーバにアップされます。</p>\n\n<p>今ある<code>index.html</code>を書き換え、Vue.jsで実装したjsファイルを追加しましょう。</p>\n\n<p>ソースは以下のGithubリポジトリにあります。<br>\n初めてGithubにアップしてみました。<br>\n（アップって言い方はもしかしてナウくない…？）</p>\n\n<p><a href=\"https://github.com/miso-develop/ox-game/tree/master/public\" rel=\"nofollow noopener\" target=\"_blank\">miso-develop/ox-game/public/<br>\n</a></p>\n\n<p>ポイントとしては<code>data.sync</code>にDatabaseとまるっきり同じデータを持ち、更新時にはそれをそのままDatabaseへ上書きし、Database更新時にそのまま受け取ってローカルデータを上書いてます。<br>\n<code>data.sync.host</code>や<code>data.sync.guest</code>は一度書き込まれれば更新のないデータなので通信の無駄ですが、mBaaSっぽさを味わうべくまるっとやりとりしてます。</p>\n\n<h1>\n<span id=\"デプロイ\" class=\"fragment\"></span><a href=\"#%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\"><i class=\"fa fa-link\"></i></a>デプロイ</h1>\n\n<p>最後に以下のコマンドでFirebaseへデプロイします。<br>\n少し時間かかります。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>firebase deploy\n</pre></div></div>\n\n<p>デプロイが完了すると<br>\n以下の結果が表示されます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>=== Deploying to 'ox-game-85a2f'...\n\ni  deploying database, hosting\ni  database: checking rules syntax...\n+  database: rules syntax is valid\ni  hosting: preparing public directory for upload...\n+  hosting: 2 files uploaded successfully\ni  database: releasing rules...\n+  database: rules released successfully\n\n+  Deploy complete!\n\nProject Console: https://console.firebase.google.com/project/ox-game-85a2f/overview\nHosting URL: https://ox-game-85a2f.firebaseapp.com\n</pre></div></div>\n\n<p>最後の<code>Hosting URL</code>がWebアプリのURLになります。</p>\n\n<h1>\n<span id=\"完成品\" class=\"fragment\"></span><a href=\"#%E5%AE%8C%E6%88%90%E5%93%81\"><i class=\"fa fa-link\"></i></a>完成品</h1>\n\n<p>こうしてできたアプリがこちらになります。<br>\n<strong>「<a href=\"https://ox-game-85a2f.firebaseapp.com/\" rel=\"nofollow noopener\" target=\"_blank\">OX GAME</a>」</strong></p>\n\n<p>[ロビー画面]<br>\n<a href=\"https://camo.qiitausercontent.com/da5839778905527a81029cd07452461be4ce1272/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3230373130392f32653262333663652d616664332d353166662d303762612d3631303634313637633539612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/da5839778905527a81029cd07452461be4ce1272/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3230373130392f32653262333663652d616664332d353166662d303762612d3631303634313637633539612e706e67\" alt=\"OX GAME_20171105_201023.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/207109/2e2b36ce-afd3-51ff-07ba-61064167c59a.png\"></a></p>\n\n<p>[ゲーム画面]<br>\n<a href=\"https://camo.qiitausercontent.com/9f4a2af0966477985fdcaa8b4f80991c549c1835/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3230373130392f37383533613930312d346130312d323533312d303939612d3361366330373561656566642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/9f4a2af0966477985fdcaa8b4f80991c549c1835/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3230373130392f37383533613930312d346130312d323533312d303939612d3361366330373561656566642e706e67\" alt=\"OX GAME_20171105_201045.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/207109/7853a901-4a01-2531-099a-3a6c075aeefd.png\"></a></p>\n\n<p>なお以下のブラウザで動作確認しています。<br>\n* Windows Chrome<br>\n* Windows Firefox<br>\n* Android Chrome</p>\n\n<h1>\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n\n<p>Firebaseすごいですね。<br>\nこれだけの機能が簡単に使えちゃうなんて。<br>\nFunctionsでWeb APIの実装もできたりするし、認証機能もあるので、簡単なWebサイトやアプリはこれだけで十分作れちゃいますね。</p>\n\n<p>Vue.jsは私のような化石jQuery脳には戸惑うことも多かったですが、手を動かして実装してみるとこれは便利かもって実感が沸いてきます。<br>\n今回の○✕ゲームのような見た目放置なプログラムだとほとんどjs側ばかりいじってれば済みました。</p>\n",
    "body": "\n# はじめに\n過去記事にてGoogle HomeからIFTTTを経由しローカルのラズパイを操作するにあたり、グローバル→ローカルの接続に[Firebase](https://firebase.google.com/)を使用してみました。\nそのときはRealtime Databaseのみの使用でしたが、FunctionsやHosting等結構色んなことができそうだったので試しにオンライン○✕ゲームを作ってみました。\n\nWebアプリは5年ぐらい前にXAMPP+WordPressとかでめちゃくそ簡単なコンテツ管理サイトを作ったことがあるぐらいで、現在のWeb環境は浦島太郎状態です。\n調べてみたら今はJSフレームワークが主流でもうjQueryも使わない時代になってるんですね…\n[【翻訳】 2016年にJavaScriptを学んでどう感じたか](http://kikuchi1201.hateblo.jp/entry/2016/10/26/172404)\n\nとりあえず学習コストも低いらしい[Vue.js](https://jp.vuejs.org/index.html)ってのを使ってFirebase上で○✕ゲームを実装してみようと思います。\n\nなお完成品は[こちら](#完成品)です。\n\n\n\n# Firebaseプロジェクトの作成\nまずはFirebaseの[コンソール画面](https://console.firebase.google.com/)へアクセスしプロジェクトを作成しましょう。\n\n「ox-game」とか適当にプロジェクト名をつけて、国を日本にして作成をクリックしたらコンソール画面での操作は完了です。\n\n![Firebase console_20171105_185257.png](https://qiita-image-store.s3.amazonaws.com/0/207109/f3256690-9dbd-b82e-2d17-f8fac5a502c7.png)\n\n以降の作業はNode.jsにて行います。\n\n\n\n# Node.jsのインストール\nFirebaseのローカルでのプロジェクト管理はNode.jsで行います。\nまずはNode.jsをインストールしましょう。\nなお私はWindows10 Proにて操作しました。\n\n以下の記事あたりを参考にインストールしてみて下さい。\n[Windowsでnode.jsをバージョン管理する](https://qiita.com/t_kojima/items/780b3b3133a17cceb175)\n\n\n\n# firebase-toolsのインストール\n続いて「firebase-tools」というFirebaseプロジェクトを管理するツールをインストールします。\n`-g`オプションをつけてグローバルでインストールして下さい。\n\n```\nnpm install -g firebase-tools\n```\n\n\n\n# Firebaseへのログイン\n以下のコマンドを実行し、表示されるウインドウよりログインして下さい。\n\n```\nfirebase login\n```\n\n\n\n# ローカルプロジェクトの作成\n次にローカルプロジェクトを作成します。\n適当にプロジェクト用のフォルダをきって以下のコマンドを実行します。\n\n```\nfirebase init\n```\n\nコマンド上で色々聞かれます。\n\n```\n? Are you ready to proceed? (Y/n)\n```\n\nここはそのままEnter。\n\n```\n? Which Firebase CLI features do you want to setup for this folder? Press Space\n to select features, then Enter to confirm your choices. (Press <space> to sele\nct)\n>( ) Database: Deploy Firebase Realtime Database Rules\n ( ) Firestore: Deploy rules and create indexes for Firestore\n ( ) Functions: Configure and deploy Cloud Functions\n ( ) Hosting: Configure and deploy Firebase Hosting sites\n ( ) Storage: Deploy Cloud Storage security rules\n```\n\nこれは`Database`と`Hosting`の2つをスペースで選択しEnter。\n\n```\n=== Project Setup\n\nFirst, let's associate this project directory with a Firebase project.\nYou can create multiple project aliases by running firebase use --add,\nbut for now we'll just set up a default project.\n\n? Select a default Firebase project for this directory: (Use arrow keys)\n> [don't setup a default project]\n  ox-game (ox-game-85a2f)\n  [create a new project]\n```\n\nこれは先ほどコンソールにて作成したプロジェクトを選びます。\n\n\n```\n=== Database Setup\n\nFirebase Realtime Database Rules allow you to define how your data should be\nstructured and when your data can be read from and written to.\n\n? What file should be used for Database Rules? (database.rules.json)\n```\n\nDatabaseの読み書き権限を定義するファイルです。\nそのままEnterしちゃいましょう。\n\n\n```\n=== Hosting Setup\n\nYour public directory is the folder (relative to your project directory) that\nwill contain Hosting assets to be uploaded with firebase deploy. If you\nhave a build process for your assets, use your build's output directory.\n\n? What do you want to use as your public directory? (public)\n```\n\nHositingするファイルを格納するフォルダ名の指定です。\nここもそのままEnterで。\n\n\n```\n? Configure as a single-page app (rewrite all urls to /index.html)? (y/N)\n```\n\nSPA(Single Page Application)にしますかと聞かれます。\nとりあえず`y`で\n\n```\n+  Wrote public/index.html\n\ni  Writing configuration info to firebase.json...\ni  Writing project information to .firebaserc...\n\n+  Firebase initialization complete!\n```\n\nこれでローカルプロジェクトが初期化されます。\nフォルダ内に色々ファイルが作成されました。\n\nこのうち`database.rules.json`がDatabaseへの読み書き権限を定義するファイルになります。\nデフォルトだと認証しないと読み書きできないようになっているので、今回は誰でも読み書きできるよう、以下のように書き換えちゃいましょう。\n\n\n```json:database.rules.json\n{\n  \"rules\": {\n    \".read\": \"true\",\n    \".write\": \"true\"\n  }\n}\n```\n\n以上でローカルプロジェクトの作成は完了です。\n\n\n\n# 実装\nアプリのソースは`public`フォルダ配下になります。\nこのフォルダの中身がFirebaseのサーバにアップされます。\n\n今ある`index.html`を書き換え、Vue.jsで実装したjsファイルを追加しましょう。\n\nソースは以下のGithubリポジトリにあります。\n初めてGithubにアップしてみました。\n（アップって言い方はもしかしてナウくない…？）\n\n[miso-develop/ox-game/public/\n](https://github.com/miso-develop/ox-game/tree/master/public)\n\nポイントとしては`data.sync`にDatabaseとまるっきり同じデータを持ち、更新時にはそれをそのままDatabaseへ上書きし、Database更新時にそのまま受け取ってローカルデータを上書いてます。\n`data.sync.host`や`data.sync.guest`は一度書き込まれれば更新のないデータなので通信の無駄ですが、mBaaSっぽさを味わうべくまるっとやりとりしてます。\n\n\n\n# デプロイ\n最後に以下のコマンドでFirebaseへデプロイします。\n少し時間かかります。\n\n```\nfirebase deploy\n```\n\nデプロイが完了すると\n以下の結果が表示されます。\n\n```\n=== Deploying to 'ox-game-85a2f'...\n\ni  deploying database, hosting\ni  database: checking rules syntax...\n+  database: rules syntax is valid\ni  hosting: preparing public directory for upload...\n+  hosting: 2 files uploaded successfully\ni  database: releasing rules...\n+  database: rules released successfully\n\n+  Deploy complete!\n\nProject Console: https://console.firebase.google.com/project/ox-game-85a2f/overview\nHosting URL: https://ox-game-85a2f.firebaseapp.com\n```\n\n最後の`Hosting URL`がWebアプリのURLになります。\n\n\n\n# 完成品\nこうしてできたアプリがこちらになります。\n**「[OX GAME](https://ox-game-85a2f.firebaseapp.com/)」**\n\n[ロビー画面]\n![OX GAME_20171105_201023.png](https://qiita-image-store.s3.amazonaws.com/0/207109/2e2b36ce-afd3-51ff-07ba-61064167c59a.png)\n\n[ゲーム画面]\n![OX GAME_20171105_201045.png](https://qiita-image-store.s3.amazonaws.com/0/207109/7853a901-4a01-2531-099a-3a6c075aeefd.png)\n\nなお以下のブラウザで動作確認しています。\n* Windows Chrome\n* Windows Firefox\n* Android Chrome\n\n\n\n# おわりに\nFirebaseすごいですね。\nこれだけの機能が簡単に使えちゃうなんて。\nFunctionsでWeb APIの実装もできたりするし、認証機能もあるので、簡単なWebサイトやアプリはこれだけで十分作れちゃいますね。\n\nVue.jsは私のような化石jQuery脳には戸惑うことも多かったですが、手を動かして実装してみるとこれは便利かもって実感が沸いてきます。\n今回の○✕ゲームのような見た目放置なプログラムだとほとんどjs側ばかりいじってれば済みました。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-06T08:58:20+09:00",
    "group": null,
    "id": "c2061519bb458e22f7d3",
    "likes_count": 7,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Node.js",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "Firebase",
        "versions": []
      }
    ],
    "title": "FirebaseとVue.jsで作るオンライン○✕ゲーム",
    "updated_at": "2017-11-06T21:52:29+09:00",
    "url": "http://qiita.com/miso_develop/items/c2061519bb458e22f7d3",
    "user": {
      "description": "Google Homeの購入を機にIT情報収集のためTwitter、Qiitaを始めました。\r\n分からないことがあったら相談したり答えたりしたいので是非ともフォローお願いします！",
      "facebook_id": "",
      "followees_count": 71,
      "followers_count": 15,
      "github_login_name": "miso-develop",
      "id": "miso_develop",
      "items_count": 7,
      "linkedin_id": "",
      "location": "Tokyo",
      "name": "田中 みそ",
      "organization": "",
      "permanent_id": 207109,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/207109/profile-images/1509867100",
      "twitter_screen_name": "miso_develop",
      "website_url": ""
    }
  },
  {
    "rendered_body": "<p>自前でVue.jsのカルーセルを作成したい人向け。</p>\n\n<h2>\n<span id=\"サンプル\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\"><i class=\"fa fa-link\"></i></a>サンプル</h2>\n\n<p><a href=\"https://jsfiddle.net/Wave7KN/ejm664m1/5/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://jsfiddle.net/Wave7KN/ejm664m1/5/</a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/e416761004998604e99c0e0bc1be13dacf585182/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3230343235362f30643064353536612d633031622d636336352d313034632d6537613336353764666133652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"351\" alt=\"vue-carousel.png\" src=\"https://camo.qiitausercontent.com/e416761004998604e99c0e0bc1be13dacf585182/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3230343235362f30643064353536612d633031622d636336352d313034632d6537613336353764666133652e706e67\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/204256/0d0d556a-c01b-cc65-104c-e7a3657dfa3e.png\"></a></p>\n\n<h2>\n<span id=\"コード\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>コード</h2>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"vue-carousel\"</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"vue-carousel\"</span><span class=\"p\">&gt;</span>\n\n  <span class=\"c\">&lt;!-- スライドする部分。keyを持たせることで、それぞれが個別の要素であることを示す。 --&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">transition</span> <span class=\"na\">:name</span><span class=\"o\">=</span><span class=\"s\">\"transition_name\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"vue-carousel_body\"</span>\n      <span class=\"na\">:key</span><span class=\"o\">=</span><span class=\"s\">\"index\"</span>\n      <span class=\"na\">v-for</span><span class=\"o\">=</span><span class=\"s\">\"(content, index) in contents\"</span>\n      <span class=\"na\">v-if</span><span class=\"o\">=</span><span class=\"s\">\"visible_content == index\"</span>\n      <span class=\"na\">:style</span><span class=\"o\">=</span><span class=\"s\">\"{backgroundColor: content.bg_color}\"</span><span class=\"p\">&gt;</span>\n      {{ content.title }}\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">transition</span><span class=\"p\">&gt;</span>\n\n  <span class=\"c\">&lt;!-- 「PREV」「NEXT」と現在地のドット --&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"vue-carousel_footer\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"err\">@</span><span class=\"na\">click</span><span class=\"o\">=</span><span class=\"s\">\"back()\"</span> <span class=\"na\">:disabled</span><span class=\"o\">=</span><span class=\"s\">\"visible_content == 0\"</span><span class=\"p\">&gt;</span>PREV<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"vue-carousel_footer_dot\"</span>\n      <span class=\"na\">v-for</span><span class=\"o\">=</span><span class=\"s\">\"(contents, index) in contents\"</span>\n      <span class=\"na\">:class</span><span class=\"o\">=</span><span class=\"s\">\"{'is-visible' : visible_content == index}\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"err\">@</span><span class=\"na\">click</span><span class=\"o\">=</span><span class=\"s\">\"next()\"</span> <span class=\"na\">:disabled</span><span class=\"o\">=</span><span class=\"s\">\"visible_content == contents.length - 1\"</span><span class=\"p\">&gt;</span>NEXT<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">JavaScript</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n  <span class=\"nx\">el</span><span class=\"o\">:</span> <span class=\"s1\">'#vue-carousel'</span><span class=\"p\">,</span>\n  <span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">contents</span><span class=\"o\">:</span> <span class=\"p\">[{</span>\n      <span class=\"c1\">// 青の中身</span>\n      <span class=\"nx\">title</span><span class=\"o\">:</span> <span class=\"s1\">'Content 1'</span><span class=\"p\">,</span>\n      <span class=\"nx\">bg_color</span><span class=\"o\">:</span> <span class=\"s1\">'#7bbff9'</span><span class=\"p\">,</span>\n    <span class=\"p\">},{</span>\n      <span class=\"c1\">// 赤の中身</span>\n      <span class=\"nx\">title</span><span class=\"o\">:</span> <span class=\"s1\">'Content 2'</span><span class=\"p\">,</span>\n      <span class=\"nx\">bg_color</span><span class=\"o\">:</span> <span class=\"s1\">'#f16972'</span><span class=\"p\">,</span>\n    <span class=\"p\">},{</span>\n      <span class=\"c1\">// 緑の中身</span>\n      <span class=\"nx\">title</span><span class=\"o\">:</span> <span class=\"s1\">'Content 3'</span><span class=\"p\">,</span>\n      <span class=\"nx\">bg_color</span><span class=\"o\">:</span> <span class=\"s1\">'#20d2a3'</span><span class=\"p\">,</span>\n    <span class=\"p\">}],</span>\n    <span class=\"nx\">transition_name</span><span class=\"o\">:</span> <span class=\"s1\">'show-next'</span><span class=\"p\">,</span>\n    <span class=\"nx\">visible_content</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">methods</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">back</span><span class=\"p\">(){</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">transition_name</span> <span class=\"o\">=</span> <span class=\"s1\">'show-prev'</span><span class=\"p\">;</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">visible_content</span><span class=\"o\">--</span><span class=\"p\">;</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">next</span><span class=\"p\">(){</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">transition_name</span> <span class=\"o\">=</span> <span class=\"s1\">'show-next'</span><span class=\"p\">;</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">visible_content</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">})</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"sass\">\n<div class=\"code-lang\"><span class=\"bold\">SCSS</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"nc\">.vue-carousel</span><span class=\"err\">{</span>\n  <span class=\"na\">height</span><span class=\"o\">:</span> <span class=\"mi\">200</span><span class=\"kt\">px</span><span class=\"err\">;</span>\n  <span class=\"na\">overflow</span><span class=\"o\">:</span> <span class=\"no\">hidden</span><span class=\"err\">;</span>\n  <span class=\"na\">position</span><span class=\"o\">:</span> <span class=\"no\">relative</span><span class=\"err\">;</span>\n  <span class=\"na\">width</span><span class=\"o\">:</span> <span class=\"mi\">300</span><span class=\"kt\">px</span><span class=\"err\">;</span>\n  <span class=\"k\">&amp;</span><span class=\"nt\">_body</span><span class=\"err\">{</span>\n    <span class=\"na\">color</span><span class=\"o\">:</span> <span class=\"mh\">#fff</span><span class=\"err\">;</span>\n    <span class=\"na\">height</span><span class=\"o\">:</span> <span class=\"mi\">150</span><span class=\"kt\">px</span><span class=\"err\">;</span>\n    <span class=\"na\">left</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"err\">;</span>\n    <span class=\"na\">line-height</span><span class=\"o\">:</span> <span class=\"mi\">150</span><span class=\"kt\">px</span><span class=\"err\">;</span>\n    <span class=\"na\">position</span><span class=\"o\">:</span> <span class=\"no\">absolute</span><span class=\"err\">;</span>\n    <span class=\"na\">text-align</span><span class=\"o\">:</span> <span class=\"no\">center</span><span class=\"err\">;</span>\n    <span class=\"na\">top</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"err\">;</span>\n    <span class=\"na\">width</span><span class=\"o\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"err\">;</span>    \n  <span class=\"err\">}</span>\n  <span class=\"k\">&amp;</span><span class=\"nt\">_footer</span><span class=\"err\">{</span>\n    <span class=\"na\">align-items</span><span class=\"o\">:</span> <span class=\"no\">center</span><span class=\"err\">;</span>\n    <span class=\"na\">display</span><span class=\"o\">:</span> <span class=\"no\">flex</span><span class=\"err\">;</span>\n    <span class=\"na\">height</span><span class=\"o\">:</span> <span class=\"mi\">50</span><span class=\"kt\">px</span><span class=\"err\">;</span>\n    <span class=\"na\">justify-content</span><span class=\"o\">:</span> <span class=\"n\">space-between</span><span class=\"err\">;</span>\n    <span class=\"na\">position</span><span class=\"o\">:</span> <span class=\"no\">absolute</span><span class=\"err\">;</span>\n    <span class=\"na\">top</span><span class=\"o\">:</span> <span class=\"mi\">150</span><span class=\"kt\">px</span><span class=\"err\">;</span>\n    <span class=\"na\">width</span><span class=\"o\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"err\">;</span>\n    <span class=\"k\">&amp;</span><span class=\"nt\">_dot</span><span class=\"err\">{</span>\n    <span class=\"na\">background-color</span><span class=\"o\">:</span> <span class=\"mh\">#abc2ce</span><span class=\"err\">;</span>\n      <span class=\"na\">border-radius</span><span class=\"o\">:</span> <span class=\"mi\">50</span><span class=\"kt\">%</span><span class=\"err\">;</span>\n      <span class=\"na\">height</span><span class=\"o\">:</span> <span class=\"mi\">6</span><span class=\"kt\">px</span><span class=\"err\">;</span>\n      <span class=\"na\">width</span><span class=\"o\">:</span> <span class=\"mi\">6</span><span class=\"kt\">px</span><span class=\"err\">;</span>\n      <span class=\"k\">&amp;</span><span class=\"nc\">.is-visible</span><span class=\"err\">{</span>\n        <span class=\"na\">background-color</span><span class=\"o\">:</span> <span class=\"mh\">#7b94f9</span><span class=\"err\">;</span>\n      <span class=\"err\">}</span>\n    <span class=\"err\">}</span>\n  <span class=\"err\">}</span>\n<span class=\"err\">}</span>\n\n<span class=\"c1\">// 進むトランジションと戻るトランジションをそれぞれ用意</span>\n<span class=\"nc\">.show-next-enter-active</span><span class=\"o\">,</span> <span class=\"nc\">.show-next-leave-active</span><span class=\"o\">,</span>\n<span class=\"nc\">.show-prev-enter-active</span><span class=\"o\">,</span> <span class=\"nc\">.show-prev-leave-active</span>  <span class=\"err\">{</span>\n  <span class=\"na\">transition</span><span class=\"o\">:</span> <span class=\"no\">all</span> <span class=\"mf\">.4</span><span class=\"kt\">s</span><span class=\"err\">;</span>\n<span class=\"err\">}</span>\n<span class=\"nc\">.show-next-enter</span><span class=\"o\">,</span> <span class=\"nc\">.show-prev-leave-to</span> <span class=\"err\">{</span>\n  <span class=\"na\">transform</span><span class=\"o\">:</span> <span class=\"nf\">translateX</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">)</span><span class=\"err\">;</span>\n<span class=\"err\">}</span>\n<span class=\"nc\">.show-next-leave-to</span><span class=\"o\">,</span> <span class=\"nc\">.show-prev-enter</span> <span class=\"err\">{</span>\n  <span class=\"na\">transform</span><span class=\"o\">:</span> <span class=\"nf\">translateX</span><span class=\"p\">(</span><span class=\"mi\">-100</span><span class=\"kt\">%</span><span class=\"p\">)</span><span class=\"err\">;</span>\n<span class=\"err\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<p>Enter/Leave とトランジション一覧<br>\n<a href=\"https://jp.vuejs.org/v2/guide/transitions.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://jp.vuejs.org/v2/guide/transitions.html</a></p>\n",
    "body": "自前でVue.jsのカルーセルを作成したい人向け。\n\n## サンプル\nhttps://jsfiddle.net/Wave7KN/ejm664m1/5/\n\n<img width=\"351\" alt=\"vue-carousel.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/204256/0d0d556a-c01b-cc65-104c-e7a3657dfa3e.png\">\n\n## コード\n```html:HTML\n<div id=\"vue-carousel\" class=\"vue-carousel\">\n\n  <!-- スライドする部分。keyを持たせることで、それぞれが個別の要素であることを示す。 -->\n  <transition :name=\"transition_name\">\n    <div class=\"vue-carousel_body\"\n      :key=\"index\"\n      v-for=\"(content, index) in contents\"\n      v-if=\"visible_content == index\"\n      :style=\"{backgroundColor: content.bg_color}\">\n      {{ content.title }}\n    </div>\n  </transition>\n\n  <!-- 「PREV」「NEXT」と現在地のドット -->\n  <div class=\"vue-carousel_footer\">\n    <button @click=\"back()\" :disabled=\"visible_content == 0\">PREV</button>\n    <div class=\"vue-carousel_footer_dot\"\n      v-for=\"(contents, index) in contents\"\n      :class=\"{'is-visible' : visible_content == index}\"></div>\n    <button @click=\"next()\" :disabled=\"visible_content == contents.length - 1\">NEXT</button>\n  </div>\n\n</div>\n\n```\n\n```javascript:JavaScript\nnew Vue({\n  el: '#vue-carousel',\n  data: {\n    contents: [{\n      // 青の中身\n      title: 'Content 1',\n      bg_color: '#7bbff9',\n    },{\n      // 赤の中身\n      title: 'Content 2',\n      bg_color: '#f16972',\n    },{\n      // 緑の中身\n      title: 'Content 3',\n      bg_color: '#20d2a3',\n    }],\n    transition_name: 'show-next',\n    visible_content: 0,\n  },\n  methods: {\n    back(){\n      this.transition_name = 'show-prev';\n      this.visible_content--;\n    },\n    next(){\n      this.transition_name = 'show-next';\n      this.visible_content++;\n    },\n  },\n})\n```\n\n```sass:SCSS\n.vue-carousel{\n  height: 200px;\n  overflow: hidden;\n  position: relative;\n  width: 300px;\n  &_body{\n    color: #fff;\n    height: 150px;\n    left: 0;\n    line-height: 150px;\n    position: absolute;\n    text-align: center;\n    top: 0;\n    width: 100%;    \n  }\n  &_footer{\n    align-items: center;\n    display: flex;\n    height: 50px;\n    justify-content: space-between;\n    position: absolute;\n    top: 150px;\n    width: 100%;\n    &_dot{\n    background-color: #abc2ce;\n      border-radius: 50%;\n      height: 6px;\n      width: 6px;\n      &.is-visible{\n        background-color: #7b94f9;\n      }\n    }\n  }\n}\n\n// 進むトランジションと戻るトランジションをそれぞれ用意\n.show-next-enter-active, .show-next-leave-active,\n.show-prev-enter-active, .show-prev-leave-active  {\n  transition: all .4s;\n}\n.show-next-enter, .show-prev-leave-to {\n  transform: translateX(100%);\n}\n.show-next-leave-to, .show-prev-enter {\n  transform: translateX(-100%);\n}\n```\n\n\n\n## 参考\nEnter/Leave とトランジション一覧\nhttps://jp.vuejs.org/v2/guide/transitions.html\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-05T23:24:27+09:00",
    "group": null,
    "id": "5a18c9a6ed7d6fac940f",
    "likes_count": 4,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "JavaScript",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      }
    ],
    "title": "Vue.jsでカルーセルをつくる",
    "updated_at": "2017-11-05T23:26:43+09:00",
    "url": "http://qiita.com/Wave7KN/items/5a18c9a6ed7d6fac940f",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 0,
      "followers_count": 0,
      "github_login_name": "Wave7KN",
      "id": "Wave7KN",
      "items_count": 1,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 204256,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/204256/profile-images/1509769778",
      "twitter_screen_name": null,
      "website_url": null
    }
  },
  {
    "rendered_body": "<p>Sinatra+Vue.jsでSPAを作っていきます。</p>\n\n<p><a href=\"https://qiita.com/isuke/items/6df8ab9bea944b23f65d\" id=\"reference-5bb9888c7b7d38424366\">以前の記事</a>で「webpack-dev-serverのproxy使えば?」とコメント頂きましたので、それを受けて全面的に書き直しました。(Thank you <a href=\"/nak1114\" class=\"user-mention js-hovercard\" title=\"nak1114\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"nak1114\">@nak1114</a>)</p>\n\n<p>完成したコードは<a href=\"https://github.com/isuke/sinatra-vuejs-template/tree/v1.0.0\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a>で見ることができます。 </p>\n\n<h2>\n<span id=\"フロントエンドの準備\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E3%81%AE%E6%BA%96%E5%82%99\"><i class=\"fa fa-link\"></i></a>フロントエンドの準備</h2>\n\n<p>yarnを使うので、インストールしていない人はインストールしてください。</p>\n\n<p>vue-cliを使うのでインストールします。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> yarn global add vue-cli\n</pre></div></div>\n\n<p>vue templateを使います。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> vue init isuke/vuejs-template#v1.0.0 sinatara-vue-sample\n</pre></div></div>\n\n<p><code>isuke/vuejs-template</code>は著者が、公式の<code>vuejs-templates/webpack-simple</code>をもとに作ったvue.jsのテンプレートです。<br>\n大分改造してあるので原型がおぼろげです。</p>\n\n<p><code>vue init</code>したら指示に従って以下のコマンド実行します。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> yarn install\n<span class=\"gp\">$</span> yarn run dev\n</pre></div></div>\n\n<p><a href=\"http://localhost:8080/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:8080/</a> をブラウザで開いてみましょう(といか勝手に開きます)。<br>\n一行もコードを書かずにこれだけでwebページができていることがわかると思います。<br>\n[Bye]リンクをクリックしてページ遷移ができていることも確認してみてください。</p>\n\n<h2>\n<span id=\"サーバーサイドの作成\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%B5%E3%82%A4%E3%83%89%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>サーバーサイドの作成</h2>\n\n<p>ここからsinatraを使っていきます。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> bundle init\n</pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"rb\">\n<div class=\"code-lang\"><span class=\"bold\">Gemfile</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"c1\"># frozen_string_literal: true</span>\n\n<span class=\"n\">source</span> <span class=\"s2\">\"https://rubygems.org\"</span>\n\n<span class=\"n\">ruby</span> <span class=\"s1\">'2.4.1'</span>\n\n<span class=\"n\">gem</span> <span class=\"s1\">'sinatra'</span>\n<span class=\"n\">gem</span> <span class=\"s1\">'sinatra-contrib'</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> bundle install --path<span class=\"o\">=</span>vendor/bundle --binstubs<span class=\"o\">=</span>vendor/bin\n</pre></div></div>\n\n<p>sinatraのコードを書いていきます。</p>\n\n<div class=\"code-frame\" data-lang=\"rb\">\n<div class=\"code-lang\"><span class=\"bold\">server.rb</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"nb\">require</span> <span class=\"s1\">'sinatra/base'</span>\n<span class=\"nb\">require</span> <span class=\"s2\">\"sinatra/reloader\"</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Server</span> <span class=\"o\">&lt;</span> <span class=\"no\">Sinatra</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"n\">configure</span> <span class=\"ss\">:development</span> <span class=\"k\">do</span>\n    <span class=\"n\">register</span> <span class=\"no\">Sinatra</span><span class=\"o\">::</span><span class=\"no\">Reloader</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"n\">get</span> <span class=\"s1\">'/companies.json'</span> <span class=\"k\">do</span>\n    <span class=\"n\">companies</span> <span class=\"o\">=</span> <span class=\"o\">[]</span>\n    <span class=\"mi\">1</span><span class=\"o\">.</span><span class=\"n\">upto</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span>\n      <span class=\"n\">companies</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">{</span>\n        <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"n\">i</span><span class=\"p\">,</span>\n        <span class=\"nb\">name</span><span class=\"p\">:</span> <span class=\"s2\">\"Company </span><span class=\"si\">#{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"k\">end</span>\n    <span class=\"n\">companies</span><span class=\"o\">.</span><span class=\"n\">to_json</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"rb\">\n<div class=\"code-lang\"><span class=\"bold\">config.ru</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"nb\">require</span> <span class=\"s1\">'./server'</span>\n\n<span class=\"n\">run</span> <span class=\"no\">Server</span>\n</pre></div>\n</div>\n\n<p>何の変哲もない　APIが一つあるだけです。</p>\n\n<p>立ち上げて、確認してみましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> bundle <span class=\"nb\">exec</span> rackup\n</pre></div></div>\n\n<p><a href=\"http://localhost:9292/companies.json\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:9292/companies.json</a></p>\n\n<p>jsonが返ってきました。<br>\n次のステップに進みましょう。</p>\n\n<h1>\n<span id=\"フロントとサーバーの連携\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%81%A8%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AE%E9%80%A3%E6%90%BA\"><i class=\"fa fa-link\"></i></a>フロントとサーバーの連携</h1>\n\n<p>フロントは<code>npm run dev</code>でlocalhost:8080<br>\nサーバーは<code>bundle exec rackup</code>でlocalhost:9292<br>\nにそれぞれアクセスできるようになりました。<br>\nこれをくっつけましょう。</p>\n\n<p><code>webpack.config.cofffee</code>に以下の行を追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">webpack.config.cofffee</span></div>\n<div class=\"highlight\"><pre><span></span>  else\n    config = merge baseConfig,\n      output:\n        filename: 'build.js'\n      devtool: '#eval-source-map'\n      devServer:\n        contentBase: 'dist'\n        historyApiFallback: true\n        noInfo: true\n<span class=\"gi\">+       proxy:</span>\n<span class=\"gi\">+         \"/api\":</span>\n<span class=\"gi\">+           target: \"http://localhost:9292\"</span>\n<span class=\"gi\">+           pathRewrite: {\"^/api\" : \"\"}</span>\n      performance:\n        hints: false\n\n  module.exports = config\n</pre></div>\n</div>\n\n<p>サーバーを２つとも立ち上げて <a href=\"http://localhost:8080\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:8080</a> を見てみましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> bundle <span class=\"nb\">exec</span> rackup\n<span class=\"gp\">$</span> yarn dev\n</pre></div></div>\n\n<p>ここでトップページが見れたらOKです。<br>\nさて、これでフロントからAPIが叩けるようになったので、ちょっと試してみましょう。</p>\n\n<p>Bye.vueを以下のように書き換えます。</p>\n\n<p>ついでにHot Module Replacementが動作しているかもためしてみましょう。</p>\n\n<p>Compnayデータが表示された状態で<code>Bye.vue</code>のstyleを適当に変えてみてください。</p>\n\n<div class=\"code-frame\" data-lang=\"diff\"><div class=\"highlight\"><pre><span></span>  .bye\n    -webkit-font-smoothing: antialiased\n    -moz-osx-font-smoothing: grayscale\n    text-align: center\n    margin-top: 60px\n<span class=\"gi\">+   background-color: red</span>\n\n    h1\n      font-weight: normal\n    a\n      color: #42b983\n</pre></div></div>\n\n<p>ブラウザを<strong>更新せずに</strong>反映されたら成功です。<br>\nHot Module Replacementが動作しています。</p>\n\n<h2>\n<span id=\"productionモードで動かす\" class=\"fragment\"></span><a href=\"#production%E3%83%A2%E3%83%BC%E3%83%89%E3%81%A7%E5%8B%95%E3%81%8B%E3%81%99\"><i class=\"fa fa-link\"></i></a>Productionモードで動かす</h2>\n\n<p>最後にProductionでの動かし方です。</p>\n\n<p>まず<code>yarn run build</code>を実行して<code>src</code>ディレクトリの中をコンパイルします。<br>\nコンパイルした結果は<code>dist</code>に吐かれます。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> yarn run build\n</pre></div></div>\n\n<p>次に、静的ファイル配信用のサーバーを作ります。</p>\n\n<div class=\"code-frame\" data-lang=\"rb\">\n<div class=\"code-lang\"><span class=\"bold\">static.rb</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"nb\">require</span> <span class=\"s1\">'sinatra/base'</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Static</span> <span class=\"o\">&lt;</span> <span class=\"no\">Sinatra</span><span class=\"o\">::</span><span class=\"no\">Base</span>\n  <span class=\"n\">configure</span> <span class=\"ss\">:production</span> <span class=\"k\">do</span>\n    <span class=\"n\">set</span> <span class=\"ss\">:public_dir</span><span class=\"p\">,</span> <span class=\"no\">File</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"s1\">'dist'</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"n\">get</span> <span class=\"s1\">'/'</span> <span class=\"k\">do</span>\n    <span class=\"n\">send_file</span> <span class=\"no\">File</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">public_dir</span><span class=\"p\">,</span> <span class=\"s1\">'index.html'</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>\n</div>\n\n<p><code>dist</code>ディレクリをpublicとして公開するディレクトリに指定しています。<br>\nまた、<code>/</code>にアクセスしたときに、'dist/index.html'を返しています。</p>\n\n<p><code>static.rb</code>を使うように<code>config.ru</code>を改良しましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">cofig.rb</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"gi\">+ require './static'</span>\n  require './server'\n\n<span class=\"gi\">+ if ENV[\"APP_ENV\"] == \"production\"</span>\n<span class=\"gi\">+   run Rack::URLMap.new(</span>\n<span class=\"gi\">+     '/' =&gt; Static,</span>\n<span class=\"gi\">+     '/api' =&gt; Server,</span>\n<span class=\"gi\">+   )</span>\n<span class=\"gi\">+ else</span>\n    run Server\n<span class=\"gi\">+ end</span>\n</pre></div>\n</div>\n\n<p>あとは環境変数をつけて実行してあげるだけです。</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> <span class=\"nv\">APP_ENV</span><span class=\"o\">=</span>production bundle <span class=\"nb\">exec</span> rackup \n</pre></div></div>\n\n<p>以上です。お疲れ様でした。</p>\n",
    "body": "Sinatra+Vue.jsでSPAを作っていきます。\n\n[以前の記事](https://qiita.com/isuke/items/6df8ab9bea944b23f65d)で「webpack-dev-serverのproxy使えば?」とコメント頂きましたので、それを受けて全面的に書き直しました。(Thank you @nak1114)\n\n完成したコードは[こちら](https://github.com/isuke/sinatra-vuejs-template/tree/v1.0.0)で見ることができます。 \n\n## フロントエンドの準備\n\nyarnを使うので、インストールしていない人はインストールしてください。\n\nvue-cliを使うのでインストールします。\n\n```shell-session\n$ yarn global add vue-cli\n```\nvue templateを使います。\n\n```shell-session\n$ vue init isuke/vuejs-template#v1.0.0 sinatara-vue-sample\n```\n\n`isuke/vuejs-template`は著者が、公式の`vuejs-templates/webpack-simple`をもとに作ったvue.jsのテンプレートです。\n大分改造してあるので原型がおぼろげです。\n\n`vue init`したら指示に従って以下のコマンド実行します。\n\n```shell-session\n$ yarn install\n$ yarn run dev\n```\n\nhttp://localhost:8080/ をブラウザで開いてみましょう(といか勝手に開きます)。\n一行もコードを書かずにこれだけでwebページができていることがわかると思います。\n[Bye]リンクをクリックしてページ遷移ができていることも確認してみてください。\n\n## サーバーサイドの作成\n\nここからsinatraを使っていきます。\n\n```shell-session\n$ bundle init\n```\n\n```rb:Gemfile\n# frozen_string_literal: true\n\nsource \"https://rubygems.org\"\n\nruby '2.4.1'\n\ngem 'sinatra'\ngem 'sinatra-contrib'\n```\n\n```shell-session\n$ bundle install --path=vendor/bundle --binstubs=vendor/bin\n```\n\nsinatraのコードを書いていきます。\n\n```rb:server.rb\nrequire 'sinatra/base'\nrequire \"sinatra/reloader\"\n\nclass Server < Sinatra::Base\n  configure :development do\n    register Sinatra::Reloader\n  end\n\n  get '/companies.json' do\n    companies = []\n    1.upto(50) do |i|\n      companies << {\n        id: i,\n        name: \"Company #{i}\"\n      }\n    end\n    companies.to_json\n  end\nend\n```\n\n```rb:config.ru\nrequire './server'\n\nrun Server\n```\n\n何の変哲もない　APIが一つあるだけです。\n\n立ち上げて、確認してみましょう。\n\n```shell-session\n$ bundle exec rackup\n```\n\nhttp://localhost:9292/companies.json\n\njsonが返ってきました。\n次のステップに進みましょう。\n\n# フロントとサーバーの連携\n\nフロントは`npm run dev`でlocalhost:8080\nサーバーは`bundle exec rackup`でlocalhost:9292\nにそれぞれアクセスできるようになりました。\nこれをくっつけましょう。\n\n`webpack.config.cofffee`に以下の行を追加します。\n\n```diff:webpack.config.cofffee\n  else\n    config = merge baseConfig,\n      output:\n        filename: 'build.js'\n      devtool: '#eval-source-map'\n      devServer:\n        contentBase: 'dist'\n        historyApiFallback: true\n        noInfo: true\n+       proxy:\n+         \"/api\":\n+           target: \"http://localhost:9292\"\n+           pathRewrite: {\"^/api\" : \"\"}\n      performance:\n        hints: false\n\n  module.exports = config\n```\n\nサーバーを２つとも立ち上げて http://localhost:8080 を見てみましょう。\n\n```shell-session\n$ bundle exec rackup\n$ yarn dev\n```\n\nここでトップページが見れたらOKです。\nさて、これでフロントからAPIが叩けるようになったので、ちょっと試してみましょう。\n\nBye.vueを以下のように書き換えます。\n\nついでにHot Module Replacementが動作しているかもためしてみましょう。\n\nCompnayデータが表示された状態で`Bye.vue`のstyleを適当に変えてみてください。\n\n```diff\n  .bye\n    -webkit-font-smoothing: antialiased\n    -moz-osx-font-smoothing: grayscale\n    text-align: center\n    margin-top: 60px\n+   background-color: red\n\n    h1\n      font-weight: normal\n    a\n      color: #42b983\n```\n\nブラウザを**更新せずに**反映されたら成功です。\nHot Module Replacementが動作しています。\n\n## Productionモードで動かす\n\n最後にProductionでの動かし方です。\n\nまず`yarn run build`を実行して`src`ディレクトリの中をコンパイルします。\nコンパイルした結果は`dist`に吐かれます。\n\n```shell-session\n$ yarn run build\n```\n\n次に、静的ファイル配信用のサーバーを作ります。\n\n```rb:static.rb\nrequire 'sinatra/base'\n\nclass Static < Sinatra::Base\n  configure :production do\n    set :public_dir, File.join(settings.root, 'dist')\n  end\n\n  get '/' do\n    send_file File.join(settings.public_dir, 'index.html')\n  end\nend\n```\n\n`dist`ディレクリをpublicとして公開するディレクトリに指定しています。\nまた、`/`にアクセスしたときに、'dist/index.html'を返しています。\n\n`static.rb`を使うように`config.ru`を改良しましょう。\n\n```diff:cofig.rb\n+ require './static'\n  require './server'\n\n+ if ENV[\"APP_ENV\"] == \"production\"\n+   run Rack::URLMap.new(\n+     '/' => Static,\n+     '/api' => Server,\n+   )\n+ else\n    run Server\n+ end\n```\n\nあとは環境変数をつけて実行してあげるだけです。\n\n```shell-session\n$ APP_ENV=production bundle exec rackup \n```\n\n以上です。お疲れ様でした。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-05T19:15:33+09:00",
    "group": null,
    "id": "1f72878455303c5736ba",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Ruby",
        "versions": []
      },
      {
        "name": "Sinatra",
        "versions": []
      },
      {
        "name": "SPA",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "webpack",
        "versions": []
      }
    ],
    "title": "Sinatra+Vue.jsでSPA(Hot Module Replacementつき) Take 2",
    "updated_at": "2017-11-05T19:15:33+09:00",
    "url": "http://qiita.com/isuke/items/1f72878455303c5736ba",
    "user": {
      "description": "フロントエンジニアに憧れるRailsエンジニアです。\r\nVue.jsとCoffeeScript信者です。",
      "facebook_id": "",
      "followees_count": 5,
      "followers_count": 6,
      "github_login_name": "isuke",
      "id": "isuke",
      "items_count": 20,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 152997,
      "profile_image_url": "https://avatars.githubusercontent.com/u/6189067?v=3",
      "twitter_screen_name": "Isuke_0",
      "website_url": ""
    }
  },
  {
    "rendered_body": "\n<h2>\n<span id=\"前置き\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E7%BD%AE%E3%81%8D\"><i class=\"fa fa-link\"></i></a>前置き</h2>\n\n<p>Vue.jsでコンポーネントをpropsとして渡せたら便利だなと思い調べてましたが、特に解説が見当たらなかったのでメモがてら書き残しておきます。</p>\n\n<p>Vue.js のバージョンは2.5.2です。</p>\n\n<h2>\n<span id=\"サンプル\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\"><i class=\"fa fa-link\"></i></a>サンプル</h2>\n\n<p><img alt=\":point_right:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f449.png\" title=\":point_right:\" width=\"20\"> <strong><a href=\"http://runstant.com/pentamania/projects/8d0c1f86\" rel=\"nofollow noopener\" target=\"_blank\">ここ</a></strong> <img alt=\":point_left:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f448.png\" title=\":point_left:\" width=\"20\"><br>\nselectタグで好きなコンポーネントを選んでマウントすることができます。</p>\n\n<h2>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順</h2>\n\n<p>まずpropsとして渡されるサブコンポーネントを定義・登録します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"kd\">var</span> <span class=\"nx\">subComp</span> <span class=\"o\">=</span> <span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">({</span>\n  <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"sb\">`&lt;div class=\"sub\"&gt;サブコンポーネントだよ&lt;/div&gt;`</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n<span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">component</span><span class=\"p\">(</span><span class=\"s1\">'sub-component'</span><span class=\"p\">,</span> <span class=\"nx\">subComp</span><span class=\"p\">);</span> <span class=\"c1\">// 'sub-component'という名前で登録</span>\n</pre></div></div>\n\n<p>特に変わったことはしてません。</p>\n\n<p>次にpropsを受け取り、サブコンポーネントを描画するメインコンポーネントを定義します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"kd\">var</span> <span class=\"nx\">mainComp</span> <span class=\"o\">=</span> <span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">({</span>\n  <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"sb\">`&lt;div class=\"main\"&gt;</span>\n<span class=\"sb\">    &lt;h1 class='topic'&gt;メイン&lt;/h1&gt;</span>\n<span class=\"sb\">    &lt;div :is=\"contentComponent\"&gt;&lt;/div&gt;</span>\n<span class=\"sb\">  &lt;/div&gt;`</span><span class=\"p\">,</span>\n  <span class=\"nx\">props</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'contentComponent'</span><span class=\"o\">:</span> <span class=\"nb\">String</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">});</span>\n<span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">component</span><span class=\"p\">(</span><span class=\"s1\">'main-component'</span><span class=\"p\">,</span> <span class=\"nx\">mainComp</span><span class=\"p\">);</span>\n</pre></div></div>\n\n<p>ポイントはis属性のところです。<br>\npropsプロパティのcontentComponentは、サブコンポーネント（の名前）を受け取り、is属性値にセットされます。こうすることでdivはサブコンポーネントに置き換わります。</p>\n\n<p>最後にHTMLとrootインスタンス部分です。<br>\nコンポーネント名を指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"app\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">main-component</span>\n    <span class=\"na\">content-component</span><span class=\"o\">=</span><span class=\"s\">\"sub-component\"</span>\n  <span class=\"p\">&gt;&lt;/</span><span class=\"nt\">main-component</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n  <span class=\"nx\">el</span><span class=\"o\">:</span> <span class=\"s2\">\"#app\"</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n\n</pre></div></div>\n\n<p>マウント後、</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"app\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"main\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">h1</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">'topic'</span><span class=\"p\">&gt;</span>メイン<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"sub\"</span><span class=\"p\">&gt;</span>サブコンポーネントだよ<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>`\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n</pre></div></div>\n\n<p>こんな感じになってればOK。（<a href=\"https://goo.gl/hooYpt\" rel=\"nofollow noopener\" target=\"_blank\">コード</a>）</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<p><a href=\"https://forum.vuejs.org/t/how-to-pass-a-component-as-prop/11216\" rel=\"nofollow noopener\" target=\"_blank\">https://forum.vuejs.org/t/how-to-pass-a-component-as-prop/11216</a></p>\n",
    "body": "## 前置き\nVue.jsでコンポーネントをpropsとして渡せたら便利だなと思い調べてましたが、特に解説が見当たらなかったのでメモがてら書き残しておきます。\n\nVue.js のバージョンは2.5.2です。\n\n## サンプル\n:point_right: **[ここ](http://runstant.com/pentamania/projects/8d0c1f86)** :point_left:\nselectタグで好きなコンポーネントを選んでマウントすることができます。\n\n## 手順\nまずpropsとして渡されるサブコンポーネントを定義・登録します。\n\n```js\nvar subComp = Vue.extend({\n  template: `<div class=\"sub\">サブコンポーネントだよ</div>`,\n});\nVue.component('sub-component', subComp); // 'sub-component'という名前で登録\n```\n特に変わったことはしてません。\n\n次にpropsを受け取り、サブコンポーネントを描画するメインコンポーネントを定義します。\n\n```js\nvar mainComp = Vue.extend({\n  template: `<div class=\"main\">\n    <h1 class='topic'>メイン</h1>\n    <div :is=\"contentComponent\"></div>\n  </div>`,\n  props: {\n    'contentComponent': String,\n  },\n});\nVue.component('main-component', mainComp);\n```\n\nポイントはis属性のところです。\npropsプロパティのcontentComponentは、サブコンポーネント（の名前）を受け取り、is属性値にセットされます。こうすることでdivはサブコンポーネントに置き換わります。\n\n最後にHTMLとrootインスタンス部分です。\nコンポーネント名を指定します。\n\n```html\n<div id=\"app\">\n  <main-component\n    content-component=\"sub-component\"\n  ></main-component>\n</div>\n```\n\n```js\nnew Vue({\n  el: \"#app\",\n})\n\n```\n\nマウント後、\n\n```html\n<div id=\"app\">\n  <div class=\"main\">\n    <h1 class='topic'>メイン</h1>\n    <div class=\"sub\">サブコンポーネントだよ</div>\n  </div>`\n</div>\n\n```\nこんな感じになってればOK。（[コード](https://goo.gl/hooYpt)）\n\n## 参考\n[https://forum.vuejs.org/t/how-to-pass-a-component-as-prop/11216](https://forum.vuejs.org/t/how-to-pass-a-component-as-prop/11216)\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-04T01:08:01+09:00",
    "group": null,
    "id": "e7a0f9d67ec75563b952",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "vue.js",
        "versions": []
      }
    ],
    "title": "vue.jsでpropsとしてコンポーネントを渡す",
    "updated_at": "2017-11-04T01:20:15+09:00",
    "url": "http://qiita.com/pentamania/items/e7a0f9d67ec75563b952",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 6,
      "github_login_name": "pentamania",
      "id": "pentamania",
      "items_count": 10,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 81823,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/81823/profile-images/1473702243",
      "twitter_screen_name": "ptmnia",
      "website_url": "http://pentamania.github.io/portal/"
    }
  },
  {
    "rendered_body": "<p>Vue.js公式サイトの「<a href=\"https://jp.vuejs.org/v2/examples/grid-component.html\" rel=\"nofollow noopener\" target=\"_blank\">グリッドコンポーネントの例</a>」は使い回しのできる表組みのコンポーネントをつくり、表にしたデータをソートや検索します。コードの組み立てについては「<a href=\"http://fumiononaka.com/Business/html5/FN1710004.html\" rel=\"nofollow noopener\" target=\"_blank\">Vue.js + ES6: グリッドコンポーネントをつくる</a>」で解説しました。本稿では、このJavaScriptコードをECMAScript 2015(ECMAScript 6)の構文に書き替えます。</p>\n\n<h1>\n<span id=\"const宣言を使う\" class=\"fragment\"></span><a href=\"#const%E5%AE%A3%E8%A8%80%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>const宣言を使う</h1>\n\n<p>ECMAScript 6の変数宣言には、<code>var</code>に加えて、<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/let\" rel=\"nofollow noopener\" target=\"_blank\"><code>let</code></a>と<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/const\" rel=\"nofollow noopener\" target=\"_blank\"><code>const</code></a>が備わりました。ふたつともブロックスコープをもちます。<code>const</code>は値を上書きできない定数の宣言です。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// var STORAGE_KEY = 'todos-vuejs-2.0';</span>\n<span class=\"kr\">const</span> <span class=\"nx\">STORAGE_KEY</span> <span class=\"o\">=</span> <span class=\"s1\">'todos-vuejs-2.0'</span><span class=\"p\">;</span>\n</pre></div></div>\n\n<p>値を書き替える変数には<code>let</code>、書き替えない定数には<code>const</code>を用います。ただし、<code>const</code>宣言した変数には再代入できないだけで、オブジェクトのプロパティは操作できることにお気をつけください。</p>\n\n<h1>\n<span id=\"オブジェクトへのメソッド定義とアロー関数式\" class=\"fragment\"></span><a href=\"#%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%B8%E3%81%AE%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E5%AE%9A%E7%BE%A9%E3%81%A8%E3%82%A2%E3%83%AD%E3%83%BC%E9%96%A2%E6%95%B0%E5%BC%8F\"><i class=\"fa fa-link\"></i></a>オブジェクトへのメソッド定義とアロー関数式</h1>\n\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Object_initializer#%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E5%AE%9A%E7%BE%A9\" rel=\"nofollow noopener\" target=\"_blank\">オブジェクトにメソッドを定義する</a>とき、コロン(<code>:</code>)と<code>function</code>キーワードは省いてしまえます。また、名前のない関数には、<a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/arrow_functions\" rel=\"nofollow noopener\" target=\"_blank\">アロー関数式<code>=&gt;</code></a>を用いるとすっきりと書けます。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// var todoStorage = {</span>\n<span class=\"kr\">const</span> <span class=\"nx\">todoStorage</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// fetch: function() {</span>\n    <span class=\"nx\">fetch</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// var todos = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');</span>\n        <span class=\"kr\">const</span> <span class=\"nx\">todos</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">localStorage</span><span class=\"p\">.</span><span class=\"nx\">getItem</span><span class=\"p\">(</span><span class=\"nx\">STORAGE_KEY</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"s1\">'[]'</span><span class=\"p\">);</span>\n        <span class=\"c1\">// todos.forEach(function(todo, index) {</span>\n        <span class=\"nx\">todos</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"nx\">todo</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n            <span class=\"nx\">todo</span><span class=\"p\">.</span><span class=\"nx\">id</span> <span class=\"o\">=</span> <span class=\"nx\">index</span>  <span class=\"c1\">//;</span>\n        <span class=\"c1\">// });</span>\n        <span class=\"p\">);</span>\n        <span class=\"nx\">todoStorage</span><span class=\"p\">.</span><span class=\"nx\">uid</span> <span class=\"o\">=</span> <span class=\"nx\">todos</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"nx\">todos</span><span class=\"p\">;</span>\n    <span class=\"p\">},</span>\n\n<span class=\"p\">};</span>\n</pre></div></div>\n\n<p>アロー関数式は、引数に関数を渡す新しい<code>Array</code>クラスのメソッドと組み合わせることがとくにお勧めです。関数本体が1文のときはブロックの波かっこ<code>{}</code>は省くことができ、その式の値は返されるので<code>return</code>も要りません。なお、<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/arrow_functions#Lexical_this\" rel=\"nofollow noopener\" target=\"_blank\">アロー関数式は<code>this</code>を束縛しない</a>ということも、頭に置いておきましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// var filters = {</span>\n<span class=\"kr\">const</span> <span class=\"nx\">filters</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// active: function(todos) {</span>\n    <span class=\"nx\">active</span><span class=\"p\">(</span><span class=\"nx\">todos</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// return todos.filter(function(todo) {</span>\n        <span class=\"k\">return</span> <span class=\"nx\">todos</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">((</span><span class=\"nx\">todo</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n            <span class=\"c1\">// return !todo.completed;</span>\n            <span class=\"o\">!</span><span class=\"nx\">todo</span><span class=\"p\">.</span><span class=\"nx\">completed</span>\n        <span class=\"c1\">// });</span>\n        <span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n\n<span class=\"p\">};</span>\n</pre></div></div>\n\n<h1>\n<span id=\"オブジェクトリテラルのプロパティに用いるブラケット構文\" class=\"fragment\"></span><a href=\"#%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AB%E7%94%A8%E3%81%84%E3%82%8B%E3%83%96%E3%83%A9%E3%82%B1%E3%83%83%E3%83%88%E6%A7%8B%E6%96%87\"><i class=\"fa fa-link\"></i></a>オブジェクトリテラルのプロパティに用いるブラケット構文</h1>\n\n<p>オブジェクトのプロパティを参照するとき、ドット(<code>.</code>)のほかにブラケット<code>[]</code>が使えます。そして、ブラケットの中には変数や式が与えられました。<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Object_initializer#%E8%A8%88%E7%AE%97%E3%81%95%E3%82%8C%E3%81%9F%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E5%90%8D\" rel=\"nofollow noopener\" target=\"_blank\">オブジェクトリテラルのプロパティ名</a>にも同じ構文を用いることができるようになったのです。</p>\n\n<p>Vue.jsの<a href=\"https://jp.vuejs.org/v2/guide/custom-directive.html\" rel=\"nofollow noopener\" target=\"_blank\">カスタムディレクティブ</a>にはハイフン(-)が含まれることもあります。けれど、JavaScriptの識別子として扱えません。このとき、文字列を用いれば、プロパティ名に定められます。さらに、ブラケット<code>[]</code>でメソッド名として扱うこともできるのです。</p>\n\n<div class=\"code-frame\" data-lang=\"js\"><div class=\"highlight\"><pre><span></span><span class=\"c1\">// var app = new Vue({</span>\n<span class=\"kr\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n\n    <span class=\"nx\">directives</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 'todo-focus': function(element, binding) {</span>\n        <span class=\"p\">[</span><span class=\"s1\">'todo-focus'</span><span class=\"p\">](</span><span class=\"nx\">element</span><span class=\"p\">,</span> <span class=\"nx\">binding</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">binding</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">focus</span><span class=\"p\">();</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</pre></div></div>\n\n<p>「グリッドコンポーネントの例」のJavaScriptコードをECMAScript 6の構文に書き替えたのがつぎのサンプル001です。jsdo.itに掲げました。ECMAScript 6には、クラスについても新たな構文が備わっています。興味のある方は「<a href=\"https://qiita.com/FumioNonaka/items/4ebb8a34e826bde58227\" id=\"reference-38354e5f67c24e773c8b\">CreateJSのJavaScriptコードをECMAScript 6の構文に書き替える</a>」をお読みください。</p>\n\n<h4>\n<span id=\"サンプル001vuejs--es6-todomvc\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB001vuejs--es6-todomvc\"><i class=\"fa fa-link\"></i></a>サンプル001■Vue.js + ES6: TodoMVC</h4>\n\n<p><a href=\"http://jsdo.it/FumioNonaka/wl2l\" rel=\"nofollow noopener\" target=\"_blank\"><img src=\"https://camo.qiitausercontent.com/c3ab746e1f2c203f1349f4fca4ce3fbe0459436b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132383934392f38656333643464302d626236632d623065332d396335382d3939343539633866383739612e706e67\" alt=\"FN1707004_002.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/128949/8ec3d4d0-bb6c-b0e3-9c58-99459c8f879a.png\"><br>\n&gt;&gt; judo.itへ</a></p>\n",
    "body": "Vue.js公式サイトの「[グリッドコンポーネントの例](https://jp.vuejs.org/v2/examples/grid-component.html)」は使い回しのできる表組みのコンポーネントをつくり、表にしたデータをソートや検索します。コードの組み立てについては「[Vue.js + ES6: グリッドコンポーネントをつくる](http://fumiononaka.com/Business/html5/FN1710004.html)」で解説しました。本稿では、このJavaScriptコードをECMAScript 2015(ECMAScript 6)の構文に書き替えます。\n\n#const宣言を使う\nECMAScript 6の変数宣言には、`var`に加えて、[`let`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/let)と[`const`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/const)が備わりました。ふたつともブロックスコープをもちます。`const`は値を上書きできない定数の宣言です。\n\n```js\n// var STORAGE_KEY = 'todos-vuejs-2.0';\nconst STORAGE_KEY = 'todos-vuejs-2.0';\n```\n\n値を書き替える変数には`let`、書き替えない定数には`const`を用います。ただし、`const`宣言した変数には再代入できないだけで、オブジェクトのプロパティは操作できることにお気をつけください。\n\n#オブジェクトへのメソッド定義とアロー関数式\n[オブジェクトにメソッドを定義する](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Object_initializer#メソッドの定義)とき、コロン(`:`)と`function`キーワードは省いてしまえます。また、名前のない関数には、[アロー関数式`=>`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/arrow_functions)を用いるとすっきりと書けます。\n\n```js\n// var todoStorage = {\nconst todoStorage = {\n\t// fetch: function() {\n\tfetch() {\n\t\t// var todos = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');\n\t\tconst todos = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');\n\t\t// todos.forEach(function(todo, index) {\n\t\ttodos.forEach((todo, index) =>\n\t\t\ttodo.id = index  //;\n\t\t// });\n\t\t);\n\t\ttodoStorage.uid = todos.length;\n\t\treturn todos;\n\t},\n\n};\n```\n\nアロー関数式は、引数に関数を渡す新しい`Array`クラスのメソッドと組み合わせることがとくにお勧めです。関数本体が1文のときはブロックの波かっこ`{}`は省くことができ、その式の値は返されるので`return `も要りません。なお、[アロー関数式は`this`を束縛しない](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/arrow_functions#Lexical_this)ということも、頭に置いておきましょう。\n\n```js\n// var filters = {\nconst filters = {\n\n\t// active: function(todos) {\n\tactive(todos) {\n\t\t// return todos.filter(function(todo) {\n\t\treturn todos.filter((todo) =>\n\t\t\t// return !todo.completed;\n\t\t\t!todo.completed\n\t\t// });\n\t\t);\n\t},\n\n};\n```\n\n#オブジェクトリテラルのプロパティに用いるブラケット構文\nオブジェクトのプロパティを参照するとき、ドット(`.`)のほかにブラケット`[]`が使えます。そして、ブラケットの中には変数や式が与えられました。[オブジェクトリテラルのプロパティ名](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Object_initializer#計算されたプロパティ名)にも同じ構文を用いることができるようになったのです。\n\nVue.jsの[カスタムディレクティブ](https://jp.vuejs.org/v2/guide/custom-directive.html)にはハイフン(-)が含まれることもあります。けれど、JavaScriptの識別子として扱えません。このとき、文字列を用いれば、プロパティ名に定められます。さらに、ブラケット`[]`でメソッド名として扱うこともできるのです。\n\n```js\n// var app = new Vue({\nconst app = new Vue({\n\n\tdirectives: {\n\t\t// 'todo-focus': function(element, binding) {\n\t\t['todo-focus'](element, binding) {\n\t\t\tif (binding.value) {\n\t\t\t\telement.focus();\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\n「グリッドコンポーネントの例」のJavaScriptコードをECMAScript 6の構文に書き替えたのがつぎのサンプル001です。jsdo.itに掲げました。ECMAScript 6には、クラスについても新たな構文が備わっています。興味のある方は「[CreateJSのJavaScriptコードをECMAScript 6の構文に書き替える](https://qiita.com/FumioNonaka/items/4ebb8a34e826bde58227)」をお読みください。\n\n####サンプル001■Vue.js + ES6: TodoMVC\n[![FN1707004_002.png](https://qiita-image-store.s3.amazonaws.com/0/128949/8ec3d4d0-bb6c-b0e3-9c58-99459c8f879a.png)\n\\>\\> judo.itへ](http://jsdo.it/FumioNonaka/wl2l)\n\n\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-03T22:12:40+09:00",
    "group": null,
    "id": "2e749edc1223e0e3a686",
    "likes_count": 2,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "JavaScript",
        "versions": []
      },
      {
        "name": "ECMAScript",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "ECMAScript6",
        "versions": []
      },
      {
        "name": "ECMAScript2015",
        "versions": []
      }
    ],
    "title": "Vue.jsの「グリッドコンポーネントの例」をECMAScript 6の構文に書き替える",
    "updated_at": "2017-11-06T19:33:10+09:00",
    "url": "http://qiita.com/FumioNonaka/items/2e749edc1223e0e3a686",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 26,
      "github_login_name": null,
      "id": "FumioNonaka",
      "items_count": 17,
      "linkedin_id": "",
      "location": "Tokyo, Japan",
      "name": "文雄 野中",
      "organization": "",
      "permanent_id": 128949,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/128949/profile-images/1473717391",
      "twitter_screen_name": "FumioNonaka",
      "website_url": "http://www.fumiononaka.com/"
    }
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"目的\" class=\"fragment\"></span><a href=\"#%E7%9B%AE%E7%9A%84\"><i class=\"fa fa-link\"></i></a>目的</h1>\n\n<p>vue-cliで作成したプロジェクトをVSCodeを使用してフォーマットするとeslintでエラーとなってしまいます。（2017/11/03 時点）<br>\nVSCodeの設定を修正しエラーとならずに動作させるようにします。</p>\n\n<h1>\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h1>\n\n<ul>\n<li>vue-cli 2.9.1</li>\n<li>VSCode 1.17.2\n\n<ul>\n<li>vetur 0.10.1</li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id=\"結論\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E8%AB%96\"><i class=\"fa fa-link\"></i></a>結論</h1>\n\n<p>以下の設定を追加。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">ユーザー設定へ追加</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n    <span class=\"nt\">\"vetur.format.defaultFormatter.js\"</span><span class=\"p\">:</span> <span class=\"s2\">\"vscode-typescript\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"javascript.format.insertSpaceBeforeFunctionParenthesis\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"事象\" class=\"fragment\"></span><a href=\"#%E4%BA%8B%E8%B1%A1\"><i class=\"fa fa-link\"></i></a>事象</h1>\n\n<h4>\n<span id=\"正常動作確認\" class=\"fragment\"></span><a href=\"#%E6%AD%A3%E5%B8%B8%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>正常動作確認</h4>\n\n<div class=\"code-frame\" data-lang=\"bash\">\n<div class=\"code-lang\"><span class=\"bold\">プロジェクト作成～起動</span></div>\n<div class=\"highlight\"><pre><span></span>vue init webpack sample\n<span class=\"nb\">cd</span> sample\nnpm install\nnpm run dev\n</pre></div>\n</div>\n\n<h4>\n<span id=\"フォーマット\" class=\"fragment\"></span><a href=\"#%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88\"><i class=\"fa fa-link\"></i></a>フォーマット</h4>\n\n<p><a href=\"https://camo.qiitausercontent.com/adc9b70e2cb8ea0b453013c830b9389eb6de86a3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131343232352f39356639343533332d313339622d306435302d663434622d3534653730363532356565662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/adc9b70e2cb8ea0b453013c830b9389eb6de86a3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3131343232352f39356639343533332d313339622d306435302d663434622d3534653730363532356565662e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/114225/95f94533-139b-0d50-f44b-54e706525eef.png\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">エラー内容</span></div>\n<div class=\"highlight\"><pre><span></span> ERROR  Failed to compile with 1 errors                                                        18:53:18\n\n error  in ./src/components/HelloWorld.vue\n\n\n  ✘  http://eslint.org/docs/rules/quotes                       Strings must use singlequote\n  src\\components\\HelloWorld.vue:25:9\n    name: \"HelloWorld\",\n           ^\n\n  ✘  http://eslint.org/docs/rules/space-before-function-paren  Missing space before function parentheses\n  src\\components\\HelloWorld.vue:26:7\n    data() {\n         ^\n\n  ✘  http://eslint.org/docs/rules/quotes                       Strings must use singlequote\n  src\\components\\HelloWorld.vue:28:12\n        msg: \"Welcome to Your Vue.js App\"\n              ^\n\n  ✘  http://eslint.org/docs/rules/semi                         Extra semicolon\n  src\\components\\HelloWorld.vue:29:6\n      };\n        ^\n\n  ✘  http://eslint.org/docs/rules/semi                         Extra semicolon\n  src\\components\\HelloWorld.vue:31:2\n  };\n    ^\n\n\n✘ 5 problems (5 errors, 0 warnings)\n\n\nErrors:\n  2  http://eslint.org/docs/rules/semi\n  2  http://eslint.org/docs/rules/quotes\n  1  http://eslint.org/docs/rules/space-before-function-paren\n\n @ ./src/router/index.js 3:0-49\n @ ./src/main.js\n @ multi ./build/dev-client ./src/main.js\n</pre></div>\n</div>\n\n<h5>\n<span id=\"問題点\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C%E7%82%B9\"><i class=\"fa fa-link\"></i></a>問題点</h5>\n\n<ul>\n<li>シングルクォーテーションがダブルクォーテーションに変換されてしまう。</li>\n<li>関数名の後ろにあるスペースが除去されてしまう。</li>\n<li>文の最後にセミコロンが挿入されてしまう。</li>\n</ul>\n\n<h1>\n<span id=\"原因\" class=\"fragment\"></span><a href=\"#%E5%8E%9F%E5%9B%A0\"><i class=\"fa fa-link\"></i></a>原因？</h1>\n\n<p>veturのデフォルトフォーマッタがjs-beautify⇒prettierへ変更されたから？（参考URL内のコメントより推察）</p>\n\n<h1>\n<span id=\"今後\" class=\"fragment\"></span><a href=\"#%E4%BB%8A%E5%BE%8C\"><i class=\"fa fa-link\"></i></a>今後</h1>\n\n<p>prettier-eslintの対応が予定されている？ようなのでそのうち直るかもしれない。</p>\n\n<h1>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n\n<p><a href=\"https://github.com/vuejs/vetur/issues/476\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/vuejs/vetur/issues/476</a></p>\n",
    "body": "# 目的\nvue-cliで作成したプロジェクトをVSCodeを使用してフォーマットするとeslintでエラーとなってしまいます。（2017/11/03 時点）\nVSCodeの設定を修正しエラーとならずに動作させるようにします。\n\n# 環境\n- vue-cli 2.9.1\n- VSCode 1.17.2\n - vetur 0.10.1\n\n# 結論\n以下の設定を追加。\n\n```json:ユーザー設定へ追加\n{\n    \"vetur.format.defaultFormatter.js\": \"vscode-typescript\",\n    \"javascript.format.insertSpaceBeforeFunctionParenthesis\": true\n}\n```\n\n# 事象\n#### 正常動作確認\n\n```bash:プロジェクト作成～起動\nvue init webpack sample\ncd sample\nnpm install\nnpm run dev\n```\n\n#### フォーマット\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/114225/95f94533-139b-0d50-f44b-54e706525eef.png)\n\n```:エラー内容\n ERROR  Failed to compile with 1 errors                                                        18:53:18\n\n error  in ./src/components/HelloWorld.vue\n\n\n  ✘  http://eslint.org/docs/rules/quotes                       Strings must use singlequote\n  src\\components\\HelloWorld.vue:25:9\n    name: \"HelloWorld\",\n           ^\n\n  ✘  http://eslint.org/docs/rules/space-before-function-paren  Missing space before function parentheses\n  src\\components\\HelloWorld.vue:26:7\n    data() {\n         ^\n\n  ✘  http://eslint.org/docs/rules/quotes                       Strings must use singlequote\n  src\\components\\HelloWorld.vue:28:12\n        msg: \"Welcome to Your Vue.js App\"\n              ^\n\n  ✘  http://eslint.org/docs/rules/semi                         Extra semicolon\n  src\\components\\HelloWorld.vue:29:6\n      };\n        ^\n\n  ✘  http://eslint.org/docs/rules/semi                         Extra semicolon\n  src\\components\\HelloWorld.vue:31:2\n  };\n    ^\n\n\n✘ 5 problems (5 errors, 0 warnings)\n\n\nErrors:\n  2  http://eslint.org/docs/rules/semi\n  2  http://eslint.org/docs/rules/quotes\n  1  http://eslint.org/docs/rules/space-before-function-paren\n\n @ ./src/router/index.js 3:0-49\n @ ./src/main.js\n @ multi ./build/dev-client ./src/main.js\n```\n\n##### 問題点\n- シングルクォーテーションがダブルクォーテーションに変換されてしまう。\n- 関数名の後ろにあるスペースが除去されてしまう。\n- 文の最後にセミコロンが挿入されてしまう。\n\n# 原因？\nveturのデフォルトフォーマッタがjs-beautify⇒prettierへ変更されたから？（参考URL内のコメントより推察）\n\n# 今後\nprettier-eslintの対応が予定されている？ようなのでそのうち直るかもしれない。\n\n# 参考\nhttps://github.com/vuejs/vetur/issues/476\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-03T20:02:39+09:00",
    "group": null,
    "id": "dbab3f669372f8623cd4",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Node.js",
        "versions": []
      },
      {
        "name": "npm",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "VSCode",
        "versions": []
      },
      {
        "name": "vue-cli",
        "versions": []
      }
    ],
    "title": "vue-cliで作成したプロジェクトをVSCodeで編集するときの設定",
    "updated_at": "2017-11-03T20:02:39+09:00",
    "url": "http://qiita.com/skta/items/dbab3f669372f8623cd4",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 0,
      "followers_count": 0,
      "github_login_name": "skta3569",
      "id": "skta",
      "items_count": 3,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 114225,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/114225/profile-images/1473712521",
      "twitter_screen_name": null,
      "website_url": null
    }
  },
  {
    "rendered_body": "<p>htmlコーダーがフロントエンドを学ぶ記録。<br>\nまだまだ初心者だから間違えながら覚えていくぞ！</p>\n\n<h1>\n<span id=\"jsだとapi弾かれがち\" class=\"fragment\"></span><a href=\"#js%E3%81%A0%E3%81%A8api%E5%BC%BE%E3%81%8B%E3%82%8C%E3%81%8C%E3%81%A1\"><i class=\"fa fa-link\"></i></a>jsだとapi弾かれがち</h1>\n\n<p>vue.jsで簡単なwebアプリが作れるようになり、<br>\napiを試してよくぶち当たったのが<br>\n\"access-control-allow-origin\" 周りのエラー。<br>\njsonpってのを使わないと回避できないクロスドメインのエラーのよう。</p>\n\n<p>でも、vueでjsonpを扱ってる記事って見つからない…。<br>\njqueryはいっぱい出てくるのに！</p>\n\n<h1>\n<span id=\"vueにもあったjsonp\" class=\"fragment\"></span><a href=\"#vue%E3%81%AB%E3%82%82%E3%81%82%E3%81%A3%E3%81%9Fjsonp\"><i class=\"fa fa-link\"></i></a>vueにもあったjsonp</h1>\n\n<p>これだ。<br>\n<a href=\"https://github.com/LancerComet/vue-jsonp\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/LancerComet/vue-jsonp</a></p>\n\n<p>vue-cli と 単一ファイルコンポーネントでやってる環境前提で。<br>\nまずはインストールしましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">terminal</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"err\">$</span> <span class=\"n\">npm</span> <span class=\"n\">insall</span> <span class=\"o\">--</span><span class=\"n\">save</span><span class=\"o\">-</span><span class=\"n\">dev</span> <span class=\"n\">vue</span><span class=\"o\">-</span><span class=\"n\">jsonp</span>\n</pre></div>\n</div>\n\n<p>で、使いたいコンポーネントの中でインポートします</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">hoge.vue</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">import</span> <span class=\"no\">Vue</span> <span class=\"n\">from</span> <span class=\"s1\">'vue'</span>\n<span class=\"n\">import</span> <span class=\"no\">VueJsonp</span> <span class=\"n\">from</span> <span class=\"s1\">'vue-jsonp'</span>\n<span class=\"no\">Vue</span><span class=\"o\">.</span><span class=\"n\">use</span><span class=\"p\">(</span><span class=\"no\">VueJsonp</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n\n<p>使い方はざっくりこんな感じのよう。<br>\nVueコンポーネント内だとthisになるのね。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>Static function: Vue.jsonp(url, dataObj, timeout)\nIn Vue component: this.$jsonp(url, dataObj, timeout)\n</pre></div></div>\n\n<p>あとはこんな感じで</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">hoge.vue</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"n\">data</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"ss\">jsonData</span><span class=\"p\">:</span><span class=\"s1\">''</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">},</span>\n<span class=\"nb\">methods</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n  <span class=\"n\">getData</span> <span class=\"p\">(</span><span class=\"n\">apiUrl</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">this</span><span class=\"o\">.</span><span class=\"vg\">$jsonp</span><span class=\"p\">(</span><span class=\"n\">apiUrl</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"ss\">keyword</span><span class=\"p\">:</span> <span class=\"s1\">'キーワード'</span> <span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">then</span><span class=\"p\">(</span><span class=\"n\">json</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"sr\">//</span> <span class=\"no\">Success</span><span class=\"o\">.</span>\n      <span class=\"n\">this</span><span class=\"o\">.</span><span class=\"n\">jsonData</span> <span class=\"o\">=</span> <span class=\"n\">json</span>\n    <span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">catch</span><span class=\"p\">(</span><span class=\"n\">err</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"sr\">//</span> <span class=\"no\">Failed</span><span class=\"o\">.</span>\n    <span class=\"p\">})</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>ってな感じでaccess-control-allow-origin回避できそうです！<br>\nいろいろ試してみよ。</p>\n",
    "body": "htmlコーダーがフロントエンドを学ぶ記録。\nまだまだ初心者だから間違えながら覚えていくぞ！\n\n#jsだとapi弾かれがち\nvue.jsで簡単なwebアプリが作れるようになり、\napiを試してよくぶち当たったのが\n\"access-control-allow-origin\" 周りのエラー。\njsonpってのを使わないと回避できないクロスドメインのエラーのよう。\n\nでも、vueでjsonpを扱ってる記事って見つからない…。\njqueryはいっぱい出てくるのに！\n\n#vueにもあったjsonp\nこれだ。\nhttps://github.com/LancerComet/vue-jsonp\n\nvue-cli と 単一ファイルコンポーネントでやってる環境前提で。\nまずはインストールしましょう。\n\n```ruby:terminal\n$ npm insall --save-dev vue-jsonp\n```\n\nで、使いたいコンポーネントの中でインポートします\n\n```ruby:hoge.vue\nimport Vue from 'vue'\nimport VueJsonp from 'vue-jsonp'\nVue.use(VueJsonp)\n```\n\n使い方はざっくりこんな感じのよう。\nVueコンポーネント内だとthisになるのね。\n\n```\nStatic function: Vue.jsonp(url, dataObj, timeout)\nIn Vue component: this.$jsonp(url, dataObj, timeout)\n```\n\nあとはこんな感じで\n\n```ruby:hoge.vue\ndata() {\n  return {\n    jsonData:''\n  }\n},\nmethods: {\n  getData (apiUrl) {\n    this.$jsonp(apiUrl, { keyword: 'キーワード' }).then(json => {\n      // Success.\n      this.jsonData = json\n    }).catch(err => {\n      // Failed.\n    })\n  }\n}\n```\n\nってな感じでaccess-control-allow-origin回避できそうです！\nいろいろ試してみよ。\n\n\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-02T14:28:06+09:00",
    "group": null,
    "id": "ada0d210e94365b45db4",
    "likes_count": 6,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "jsonp",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      }
    ],
    "title": "覚え書き Vue.jsでjsonpを使ってみる",
    "updated_at": "2017-11-02T18:17:58+09:00",
    "url": "http://qiita.com/minapin/items/ada0d210e94365b45db4",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 3,
      "followers_count": 2,
      "github_login_name": "masakitm",
      "id": "minapin",
      "items_count": 3,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 82079,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/82079/profile-images/1509601810",
      "twitter_screen_name": "minapiiin",
      "website_url": null
    }
  },
  {
    "rendered_body": "<p>Windows 環境で vue-cli を使ってひな形を生成するまでの手順。</p>\n\n<h1>\n<span id=\"vue-cli-とは\" class=\"fragment\"></span><a href=\"#vue-cli-%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>vue-cli とは</h1>\n\n<p><a href=\"https://github.com/vuejs/vue-cli\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/vuejs/vue-cli</a><br>\nVue.js を含んだ各種のテンプレートに応じてスキャフォールディング (ひな形作成) をおこなってくれる。<br>\nあらかじめ必要なライブラリーが組み込まれた状態にしてくれるので、あとは必要に応じてソースファイルを修正していくだけでよい。<br>\n標準のテンプレートとして <code>webpack</code>, <code>webpack-simple</code>, <code>browserify</code> などがあり、<br>\n <code>webpack</code> テンプレートは E2E テストなどもサポートするかなり高機能なもののようだが、今回はお試しなので <code>webpack-simple</code> を使用する。</p>\n\n<h1>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順</h1>\n\n<h2>\n<span id=\"nodejs-インストール\" class=\"fragment\"></span><a href=\"#nodejs-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>Node.js インストール</h2>\n\n<p>vue-cli は Node.js (npm) で動くので、 Node.js をインストールしておく。</p>\n\n<h3>\n<span id=\"ダウンロード\" class=\"fragment\"></span><a href=\"#%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>ダウンロード</h3>\n\n<ul>\n<li><a href=\"https://nodejs.org/ja/download/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://nodejs.org/ja/download/</a></li>\n<li>Windows x86 用インストーラー最新版 node-v9.0.0-x86.msi をダウンロード</li>\n</ul>\n\n<h3>\n<span id=\"インストール\" class=\"fragment\"></span><a href=\"#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>インストール</h3>\n\n<ul>\n<li>node-v9.0.0-x86.msi を実行</li>\n<li>デフォルトのインストール要件でインストール</li>\n<li>npm も同時にインストールされる</li>\n<li>コマンド プロンプトでインストール結果確認</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>&gt; node -v\nv9.0.0\n&gt; npm -v\n5.5.1\n</pre></div></div>\n\n<h2>\n<span id=\"git-インストール\" class=\"fragment\"></span><a href=\"#git-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>Git インストール</h2>\n\n<p>vue-cli では Git が使われるので、 Git for Windows をインストールしておく。</p>\n\n<h3>\n<span id=\"ダウンロード-1\" class=\"fragment\"></span><a href=\"#%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89-1\"><i class=\"fa fa-link\"></i></a>ダウンロード</h3>\n\n<ul>\n<li><a href=\"https://git-scm.com/download/win\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://git-scm.com/download/win</a></li>\n<li>最新版 Git-2.15.0-32-bit.exe をダウンロード</li>\n</ul>\n\n<h3>\n<span id=\"インストール-1\" class=\"fragment\"></span><a href=\"#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB-1\"><i class=\"fa fa-link\"></i></a>インストール</h3>\n\n<ul>\n<li>インストール途中 “Adjusting your PATH environment” の画面で “Use Git from the Windows Command Prompt” が選択されていることを確認する (デフォルトで選択されている)</li>\n<li>他はデフォルトのインストール要件でインストール</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>&gt; git --version\ngit version 2.15.0.windows.1\n</pre></div></div>\n\n<h2>\n<span id=\"vue-cli-インストール\" class=\"fragment\"></span><a href=\"#vue-cli-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>vue-cli インストール</h2>\n\n<p>global にインストールするので、管理者権限のあるセッションで実行する。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">(Administrator)</span></div>\n<div class=\"highlight\"><pre><span></span>&gt; npm install --global vue-cli\n...\n+ vue-cli@2.9.1\nadded 264 packages in 32.094s\n</pre></div>\n</div>\n\n<h2>\n<span id=\"vue-init-の前に\" class=\"fragment\"></span><a href=\"#vue-init-%E3%81%AE%E5%89%8D%E3%81%AB\"><i class=\"fa fa-link\"></i></a>vue init の前に</h2>\n\n<p><code>vue</code> コマンドが UTF-8 でメッセージを吐くことがあるようで、 CP932 (Shift_JIS) なコマンド プロンプトや PowerShell ウィンドウ上でメッセージが文字化けする場合がある。<br>\n文字化けを避けるために、事前にコードページを UTF-8 に変更しておく。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>&gt; chcp 65001\nActive code page: 65001\n</pre></div></div>\n\n<h2>\n<span id=\"プロジェクト作成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクト作成</h2>\n\n<p>プロジェクトを置くディレクトリー上で <code>vue init webpack-simple &lt;プロジェクト名&gt;</code> を実行する。<br>\nなおプロジェクト名に大文字を含めると Sorry, name can no longer contain capital letters. などと言われるので kebab-case にしている。<br>\nSass の使用可否を聞いてくるが今回はデフォルト (No) で答えた。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>&gt; vue init webpack-simple vue-test\n? Project name (vue-test) -&gt; Enter\n? Project description (A Vue.js project) -&gt; vue-cli Test Project\n? Author (Syn &lt;synhongo_at_gmail.com&gt;) -&gt; Enter\n? Use sass? (y/N) -&gt; Enter\n\n   vue-cli · Generated \"vue-test\".\n\n   To get started:\n\n     cd vue-test\n     npm install\n     npm run dev.\n</pre></div></div>\n\n<p>vue-test ディレクトリーが作成され、中にいくつかのファイルが作成されている。</p>\n\n<p>package.json を見るとメインとなる vue のほか、 webpack, babel-*, *-loader などのパッケージを使用するようだ。<br>\nbabel-* は ES2015 のトランスパイラ、 *-loader は webpack で各種ファイルをまとめる際に、 JavaScript からアセットファイルや CSS を呼び出すように変換する仕組み? らしい (今後勉強する) 。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"vue-test\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"vue-cli Test Project\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1.0.0\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"author\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Syn &lt;synhongo_at_gmail.com&gt;\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"private\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"scripts\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"dev\"</span><span class=\"p\">:</span> <span class=\"s2\">\"cross-env NODE_ENV=development webpack-dev-server --open --hot\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"build\"</span><span class=\"p\">:</span> <span class=\"s2\">\"cross-env NODE_ENV=production webpack --progress --hide-modules\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"dependencies\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"vue\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^2.4.4\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"devDependencies\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"babel-core\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^6.26.0\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"babel-loader\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^7.1.2\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"babel-preset-env\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^1.6.0\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"cross-env\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^5.0.5\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"css-loader\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^0.28.7\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"file-loader\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^1.1.4\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"vue-loader\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^13.0.5\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"vue-template-compiler\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^2.4.4\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"webpack\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^3.6.0\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"webpack-dev-server\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^2.9.1\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>webpack.config.js は以下のようになっていた。<br>\n*.vue は vue-loader 、 *.js は babel-loader 、 png|jpg|gif|svg は file-loader を使うということかな (のちのち調べる) 。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">webpack.config.js</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"kd\">var</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'path'</span><span class=\"p\">)</span>\n<span class=\"kd\">var</span> <span class=\"nx\">webpack</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'webpack'</span><span class=\"p\">)</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">entry</span><span class=\"o\">:</span> <span class=\"s1\">'./src/main.js'</span><span class=\"p\">,</span>\n  <span class=\"nx\">output</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'./dist'</span><span class=\"p\">),</span>\n    <span class=\"nx\">publicPath</span><span class=\"o\">:</span> <span class=\"s1\">'/dist/'</span><span class=\"p\">,</span>\n    <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">'build.js'</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">module</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">rules</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.vue$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s1\">'vue-loader'</span><span class=\"p\">,</span>\n        <span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n          <span class=\"nx\">loaders</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n          <span class=\"p\">}</span>\n          <span class=\"c1\">// other vue-loader options go here</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.js$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s1\">'babel-loader'</span><span class=\"p\">,</span>\n        <span class=\"nx\">exclude</span><span class=\"o\">:</span> <span class=\"sr\">/node_modules/</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.(png|jpg|gif|svg)$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s1\">'file-loader'</span><span class=\"p\">,</span>\n        <span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n          <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">'[name].[ext]?[hash]'</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">resolve</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">alias</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'vue$'</span><span class=\"o\">:</span> <span class=\"s1\">'vue/dist/vue.esm.js'</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">devServer</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">historyApiFallback</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nx\">noInfo</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nx\">overlay</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">performance</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">hints</span><span class=\"o\">:</span> <span class=\"kc\">false</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">devtool</span><span class=\"o\">:</span> <span class=\"s1\">'#eval-source-map'</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">NODE_ENV</span> <span class=\"o\">===</span> <span class=\"s1\">'production'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">devtool</span> <span class=\"o\">=</span> <span class=\"s1\">'#source-map'</span>\n  <span class=\"c1\">// http://vue-loader.vuejs.org/en/workflow/production.html</span>\n  <span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">plugins</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">plugins</span> <span class=\"o\">||</span> <span class=\"p\">[]).</span><span class=\"nx\">concat</span><span class=\"p\">([</span>\n    <span class=\"k\">new</span> <span class=\"nx\">webpack</span><span class=\"p\">.</span><span class=\"nx\">DefinePlugin</span><span class=\"p\">({</span>\n      <span class=\"s1\">'process.env'</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">NODE_ENV</span><span class=\"o\">:</span> <span class=\"s1\">'\"production\"'</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">webpack</span><span class=\"p\">.</span><span class=\"nx\">optimize</span><span class=\"p\">.</span><span class=\"nx\">UglifyJsPlugin</span><span class=\"p\">({</span>\n      <span class=\"nx\">sourceMap</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n      <span class=\"nx\">compress</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">warnings</span><span class=\"o\">:</span> <span class=\"kc\">false</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">webpack</span><span class=\"p\">.</span><span class=\"nx\">LoaderOptionsPlugin</span><span class=\"p\">({</span>\n      <span class=\"nx\">minimize</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">})</span>\n  <span class=\"p\">])</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"パッケージのインストール\" class=\"fragment\"></span><a href=\"#%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>パッケージのインストール</h2>\n\n<p><code>vue init</code> 時に表示された指示どおりにコマンドを入力してみる。<br>\n<code>npm install</code> で package.json に書かれたパッケージをインターネット上からダウンロードする。<br>\nダウンロードとインストールに管理者権限が必要になる場合があるので、管理者権限のあるセッションで実行する。<br>\nパッケージで使われている依存パッケージ、それに依存しているパッケージ… とさかのぼって全部取りに行くのでめちゃくちゃ時間がかかる。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">(Administrator)</span></div>\n<div class=\"highlight\"><pre><span></span>&gt; cd vue-test\n&gt; npm install\n\n&gt; uglifyjs-webpack-plugin@0.4.6 postinstall V:\\vue-test\\node_modules\\uglifyjs-webpack-plugin\n&gt; node lib/post_install.js\n\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.2 (node_modules\\fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.2: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"ia32\"})\n\nadded 795 packages in 884.408s\n</pre></div>\n</div>\n\n<p>fsevents というパッケージが Unsupported platform という警告でスキップされているが、 Mac 用のパッケージらしいので無視して OK ということにする。</p>\n\n<h2>\n<span id=\"タスク実行\" class=\"fragment\"></span><a href=\"#%E3%82%BF%E3%82%B9%E3%82%AF%E5%AE%9F%E8%A1%8C\"><i class=\"fa fa-link\"></i></a>タスク実行</h2>\n\n<p>パッケージの準備ができたら <code>dev</code> タスクを実行してみる。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>&gt; npm run dev\n\n&gt; vue-test@1.0.0 dev V:\\vue-test\n&gt; cross-env NODE_ENV=development webpack-dev-server --open --hot\n\nProject is running at http://localhost:8080/\nwebpack output is served from /dist/\n404s will fallback to /index.html\n\n</pre></div></div>\n\n<p><code>npm run dev</code> を実行するとローカルマシンの 8080 ポートで Web サーバーが起動し、ブラウザーが自動的に立ち上がって “Welcome to Your Vue.js App” のページが表示される。<br>\nホットリロードになっているので、ソースを修正して保存すると即ブラウザー画面に反映される。 便利!</p>\n\n<p><code>dev</code> タスク以外に <code>build</code> タスクもある。 <code>build</code> は本番用のファイルを作成するタスクで、各種ソースやアセットファイルをぎゅっとひとまとめにしてくれる。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>&gt; npm run build\n\n&gt; vue-test@1.0.0 build V:\\vue-test\n&gt; cross-env NODE_ENV=production webpack --progress --hide-modules\n\nHash: c649afe2b2d3f524f253\nVersion: webpack 3.8.1\nTime: 131828ms\n                                    Asset     Size  Chunks             Chunk Names\nlogo.png?82b9c7a5a3f405032b1db71a25f67021  6.85 kB          [emitted]\n                                 build.js  96.8 kB       0  [emitted]  main\n                             build.js.map   807 kB       0  [emitted]  main\n</pre></div></div>\n\n<h1>\n<span id=\"今後の予定\" class=\"fragment\"></span><a href=\"#%E4%BB%8A%E5%BE%8C%E3%81%AE%E4%BA%88%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>今後の予定</h1>\n\n<p>Vue.js の勉強を進める。</p>\n\n<ul>\n<li>vue-router <a href=\"https://router.vuejs.org/ja/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://router.vuejs.org/ja/</a>\n</li>\n<li>ElementUI <a href=\"http://element.eleme.io\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://element.eleme.io</a>\n</li>\n<li>vue-moment <a href=\"https://github.com/brockpetrie/vue-moment\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/brockpetrie/vue-moment</a>\n</li>\n</ul>\n",
    "body": "Windows 環境で vue-cli を使ってひな形を生成するまでの手順。\n\n# vue-cli とは\nhttps://github.com/vuejs/vue-cli\nVue.js を含んだ各種のテンプレートに応じてスキャフォールディング (ひな形作成) をおこなってくれる。\nあらかじめ必要なライブラリーが組み込まれた状態にしてくれるので、あとは必要に応じてソースファイルを修正していくだけでよい。\n標準のテンプレートとして `webpack`, `webpack-simple`, `browserify` などがあり、\n `webpack` テンプレートは E2E テストなどもサポートするかなり高機能なもののようだが、今回はお試しなので `webpack-simple` を使用する。\n\n# 手順\n## Node.js インストール\nvue-cli は Node.js (npm) で動くので、 Node.js をインストールしておく。\n\n### ダウンロード\n- https://nodejs.org/ja/download/\n- Windows x86 用インストーラー最新版 node-v9.0.0-x86.msi をダウンロード\n\n### インストール\n- node-v9.0.0-x86.msi を実行\n- デフォルトのインストール要件でインストール\n- npm も同時にインストールされる\n- コマンド プロンプトでインストール結果確認\n\n```\n> node -v\nv9.0.0\n> npm -v\n5.5.1\n```\n\n## Git インストール\nvue-cli では Git が使われるので、 Git for Windows をインストールしておく。\n\n### ダウンロード\n- https://git-scm.com/download/win\n- 最新版 Git-2.15.0-32-bit.exe をダウンロード\n\n### インストール\n- インストール途中 “Adjusting your PATH environment” の画面で “Use Git from the Windows Command Prompt” が選択されていることを確認する (デフォルトで選択されている)\n- 他はデフォルトのインストール要件でインストール\n\n```\n> git --version\ngit version 2.15.0.windows.1\n```\n\n## vue-cli インストール\nglobal にインストールするので、管理者権限のあるセッションで実行する。\n\n```:(Administrator)\n> npm install --global vue-cli\n...\n+ vue-cli@2.9.1\nadded 264 packages in 32.094s\n```\n\n## vue init の前に\n`vue` コマンドが UTF-8 でメッセージを吐くことがあるようで、 CP932 (Shift_JIS) なコマンド プロンプトや PowerShell ウィンドウ上でメッセージが文字化けする場合がある。\n文字化けを避けるために、事前にコードページを UTF-8 に変更しておく。\n\n```\n> chcp 65001\nActive code page: 65001\n```\n\n## プロジェクト作成\nプロジェクトを置くディレクトリー上で `vue init webpack-simple <プロジェクト名>` を実行する。\nなおプロジェクト名に大文字を含めると Sorry, name can no longer contain capital letters. などと言われるので kebab-case にしている。\nSass の使用可否を聞いてくるが今回はデフォルト (No) で答えた。\n\n```\n> vue init webpack-simple vue-test\n? Project name (vue-test) -> Enter\n? Project description (A Vue.js project) -> vue-cli Test Project\n? Author (Syn <synhongo_at_gmail.com>) -> Enter\n? Use sass? (y/N) -> Enter\n\n   vue-cli · Generated \"vue-test\".\n\n   To get started:\n\n     cd vue-test\n     npm install\n     npm run dev.\n```\n\nvue-test ディレクトリーが作成され、中にいくつかのファイルが作成されている。\n\npackage.json を見るとメインとなる vue のほか、 webpack, babel-\\*, \\*-loader などのパッケージを使用するようだ。\nbabel-\\* は ES2015 のトランスパイラ、 \\*-loader は webpack で各種ファイルをまとめる際に、 JavaScript からアセットファイルや CSS を呼び出すように変換する仕組み? らしい (今後勉強する) 。\n\n```json:package.json\n{\n  \"name\": \"vue-test\",\n  \"description\": \"vue-cli Test Project\",\n  \"version\": \"1.0.0\",\n  \"author\": \"Syn <synhongo_at_gmail.com>\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"cross-env NODE_ENV=development webpack-dev-server --open --hot\",\n    \"build\": \"cross-env NODE_ENV=production webpack --progress --hide-modules\"\n  },\n  \"dependencies\": {\n    \"vue\": \"^2.4.4\"\n  },\n  \"devDependencies\": {\n    \"babel-core\": \"^6.26.0\",\n    \"babel-loader\": \"^7.1.2\",\n    \"babel-preset-env\": \"^1.6.0\",\n    \"cross-env\": \"^5.0.5\",\n    \"css-loader\": \"^0.28.7\",\n    \"file-loader\": \"^1.1.4\",\n    \"vue-loader\": \"^13.0.5\",\n    \"vue-template-compiler\": \"^2.4.4\",\n    \"webpack\": \"^3.6.0\",\n    \"webpack-dev-server\": \"^2.9.1\"\n  }\n}\n```\n\nwebpack.config.js は以下のようになっていた。\n\\*.vue は vue-loader 、 \\*.js は babel-loader 、 png|jpg|gif|svg は file-loader を使うということかな (のちのち調べる) 。\n\n```js:webpack.config.js\nvar path = require('path')\nvar webpack = require('webpack')\n\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    publicPath: '/dist/',\n    filename: 'build.js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: {\n          loaders: {\n          }\n          // other vue-loader options go here\n        }\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        exclude: /node_modules/\n      },\n      {\n        test: /\\.(png|jpg|gif|svg)$/,\n        loader: 'file-loader',\n        options: {\n          name: '[name].[ext]?[hash]'\n        }\n      }\n    ]\n  },\n  resolve: {\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js'\n    }\n  },\n  devServer: {\n    historyApiFallback: true,\n    noInfo: true,\n    overlay: true\n  },\n  performance: {\n    hints: false\n  },\n  devtool: '#eval-source-map'\n}\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports.devtool = '#source-map'\n  // http://vue-loader.vuejs.org/en/workflow/production.html\n  module.exports.plugins = (module.exports.plugins || []).concat([\n    new webpack.DefinePlugin({\n      'process.env': {\n        NODE_ENV: '\"production\"'\n      }\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n      sourceMap: true,\n      compress: {\n        warnings: false\n      }\n    }),\n    new webpack.LoaderOptionsPlugin({\n      minimize: true\n    })\n  ])\n}\n```\n\n## パッケージのインストール\n`vue init` 時に表示された指示どおりにコマンドを入力してみる。\n`npm install` で package.json に書かれたパッケージをインターネット上からダウンロードする。\nダウンロードとインストールに管理者権限が必要になる場合があるので、管理者権限のあるセッションで実行する。\nパッケージで使われている依存パッケージ、それに依存しているパッケージ… とさかのぼって全部取りに行くのでめちゃくちゃ時間がかかる。\n\n```:(Administrator)\n> cd vue-test\n> npm install\n\n> uglifyjs-webpack-plugin@0.4.6 postinstall V:\\vue-test\\node_modules\\uglifyjs-webpack-plugin\n> node lib/post_install.js\n\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.2 (node_modules\\fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.2: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"ia32\"})\n\nadded 795 packages in 884.408s\n```\n\nfsevents というパッケージが Unsupported platform という警告でスキップされているが、 Mac 用のパッケージらしいので無視して OK ということにする。\n\n## タスク実行\nパッケージの準備ができたら `dev` タスクを実行してみる。\n\n```\n> npm run dev\n\n> vue-test@1.0.0 dev V:\\vue-test\n> cross-env NODE_ENV=development webpack-dev-server --open --hot\n\nProject is running at http://localhost:8080/\nwebpack output is served from /dist/\n404s will fallback to /index.html\n\n```\n\n`npm run dev` を実行するとローカルマシンの 8080 ポートで Web サーバーが起動し、ブラウザーが自動的に立ち上がって “Welcome to Your Vue.js App” のページが表示される。\nホットリロードになっているので、ソースを修正して保存すると即ブラウザー画面に反映される。 便利!\n\n`dev` タスク以外に `build` タスクもある。 `build` は本番用のファイルを作成するタスクで、各種ソースやアセットファイルをぎゅっとひとまとめにしてくれる。\n\n```\n> npm run build\n\n> vue-test@1.0.0 build V:\\vue-test\n> cross-env NODE_ENV=production webpack --progress --hide-modules\n\nHash: c649afe2b2d3f524f253\nVersion: webpack 3.8.1\nTime: 131828ms\n                                    Asset     Size  Chunks             Chunk Names\nlogo.png?82b9c7a5a3f405032b1db71a25f67021  6.85 kB          [emitted]\n                                 build.js  96.8 kB       0  [emitted]  main\n                             build.js.map   807 kB       0  [emitted]  main\n```\n\n# 今後の予定\nVue.js の勉強を進める。\n\n- vue-router https://router.vuejs.org/ja/\n- ElementUI http://element.eleme.io\n- vue-moment https://github.com/brockpetrie/vue-moment\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-01T18:38:47+09:00",
    "group": null,
    "id": "b5a19e87c979b062168a",
    "likes_count": 1,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Windows",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "webpack",
        "versions": []
      },
      {
        "name": "vue-cli",
        "versions": []
      }
    ],
    "title": "Windows 環境で vue-cli を使う",
    "updated_at": "2017-11-02T12:56:20+09:00",
    "url": "http://qiita.com/Syn/items/b5a19e87c979b062168a",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 3,
      "github_login_name": null,
      "id": "Syn",
      "items_count": 4,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 31050,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/31050/profile-images/1473685609",
      "twitter_screen_name": null,
      "website_url": ""
    }
  },
  {
    "rendered_body": "<p>以前書いた<a href=\"http://qiita.com/TakashiShibusawa/items/601a20b1b2a7214c5c9d\" id=\"reference-70be6e33248ffa6c6197\">Riotで同人イベントの告知ページを作ったよという話</a>の続編みたいなかんじです。<br>\n（内容はあんまり関係ないです）</p>\n\n<h2>\n<span id=\"背景なぜvueなのか\" class=\"fragment\"></span><a href=\"#%E8%83%8C%E6%99%AF%E3%81%AA%E3%81%9Cvue%E3%81%AA%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>背景（なぜVueなのか）</h2>\n\n<p>イベントサイト立ち上げ時は制作期間が全然無かった（デザイン＋コーディング数日程度）ので、<br>\n普通にHTMLを書いて、エフェクト等のJSもES6+Webpackな感じで書いていました。</p>\n\n<p>しかし、アマチュアがやっている即売会とはいえ、使いやすいものを作りたいという気持ちがありました。<br>\n使いやすさの上で一番大切な参加サークル一覧ページは、情報を探しやすくする機能を盛り込みたい。<br>\nということで、その辺の機能を実装しやすくするために、いい感じのView系フレームワークを使って書き直してしまおう、という感じ。<br>\n前回Riotを使って開発したのでそれでも良いのですが、ナレッジが探しづらく、<br>\n結局いろいろとハマってしまった苦い経験もあり、別のフレームワークで開発したい気持ちがありました。</p>\n\n<p>そこで、色々見てるとVueがホットだし（ちょうどReactのライセンス関係でゴタゴタしている時期でもあった）、<br>\nHTMLで書けるしナレッジもWeb上で探しやすく、良さそう！ということで、Vueを採用してみました。<br>\n（やっぱりユーザー数多いフレームワークは困ったときにも情報が探しやすいので助かる…！）</p>\n\n<h2>\n<span id=\"環境構築とか\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%E3%81%A8%E3%81%8B\"><i class=\"fa fa-link\"></i></a>環境構築とか</h2>\n\n<p>Vue-cliは神。<br>\nwebpack を使って書いていきたかったので、<code>$ vue init webpack</code>からの質問に答えつつ適宜設定する感じでダイアログに答えていきます。<br>\n今回はRouter入れて、ESLintはAirbnbベースで調整するよう設定しました。</p>\n\n<p>htmlはPugで書きたいので、<code>yarn add pug</code>で。（※これだけで使える。凄い！）<br>\nスタイルはSCSSで書きたいので、<code>yarn add node-sass</code>。</p>\n\n<p>これだけで書ける。便利！</p>\n\n<h2>\n<span id=\"制作の流れ\" class=\"fragment\"></span><a href=\"#%E5%88%B6%E4%BD%9C%E3%81%AE%E6%B5%81%E3%82%8C\"><i class=\"fa fa-link\"></i></a>制作の流れ</h2>\n\n<p>上記の通り、HTML/CSS/エフェクト等JSは既存のものがあるので、だいたい丸ごとVueに移植してます。<br>\n（ゼロから書く場合はどうしたら良いんだろう？ 適当な雛形から肉付けしていくのが良さそうかな。）</p>\n\n<h3>\n<span id=\"htmlcssなど\" class=\"fragment\"></span><a href=\"#htmlcss%E3%81%AA%E3%81%A9\"><i class=\"fa fa-link\"></i></a>HTML/CSSなど</h3>\n\n<p>既存のpug/sassファイルから、ある程度の機能ごとに.vueファイルへ分割していく感じで作業を進めていきました。</p>\n\n<p>情報ページの中身については、<a href=\"http://qiita.com/TakashiShibusawa/items/601a20b1b2a7214c5c9d\">Riotベースで書いたとき</a>のようにJSONデーター読ませたいんですが、<br>\n結局編集がやりづらい感触があったため今回はvueファイルに直書きしました……。</p>\n\n<p>ただ、コンテンツの修正の度にソース触ってbuildして本番アップというのは非現実的なので、<br>\n将来的にはCMS的なものを使って更新できるようにしたいなあ、とは思っています。<br>\n※AWS S3上に置いているのですが、上手い方法はないものかしら……。<br>\n編集画面からLambda叩いてデータ更新、みたいな仕組みが作れれば良いのかなあとは思ってます。</p>\n\n<h3>\n<span id=\"jsの移植\" class=\"fragment\"></span><a href=\"#js%E3%81%AE%E7%A7%BB%E6%A4%8D\"><i class=\"fa fa-link\"></i></a>JSの移植</h3>\n\n<p>こちらもだいたい同様に、機能ごとに.vueに落とし込んでいった感じ。</p>\n\n<h2>\n<span id=\"コンポーネント間連携\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E9%96%93%E9%80%A3%E6%90%BA\"><i class=\"fa fa-link\"></i></a>コンポーネント間連携</h2>\n\n<p>作り込んでいくと、イベントのハンドリングやデータの相互通信が問題になってくることがありますね。<br>\nページロード検知でのアニメーション開始を作り込むときとか。</p>\n\n<p><a href=\"http://qiita.com/TakashiShibusawa/items/601a20b1b2a7214c5c9d#observable%E3%81%AE%E5%88%A9%E7%94%A8%E3%81%A7%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%AE%E3%83%8F%E3%83%B3%E3%83%89%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%8C%E6%A5%BD\" id=\"reference-70be6e33248ffa6c6197\">Riotでやったとき</a>はObservableを使ったのですが、<br>\n今回は<a href=\"https://jp.vuejs.org/v2/guide/components.html#%E8%A6%AA%E5%AD%90%E9%96%93%E4%BB%A5%E5%A4%96%E3%81%AE%E9%80%9A%E4%BF%A1\" rel=\"nofollow noopener\" target=\"_blank\">公式ドキュメント</a>にあるように、専用のvueインスタンスを作り、それを経由してデータのやり取りをしました。</p>\n\n<p>こんなかんじ。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">main.js</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"c1\">// windowにbusという名前でイベントやり取りのVueインスタンスを登録しておく</span>\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">bus</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">();</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">example_emitter.vue</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"c1\">// イベント発出側</span>\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">bus</span><span class=\"p\">.</span><span class=\"nx\">$emit</span><span class=\"p\">(</span><span class=\"s1\">'hogeEvent'</span><span class=\"p\">,</span> <span class=\"s1\">'居酒屋のメニュー'</span><span class=\"p\">);</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">example_reciever.vue</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"c1\">// イベント受信側</span>\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">bus</span><span class=\"p\">.</span><span class=\"nx\">$on</span><span class=\"p\">(</span><span class=\"s1\">'hogeEvent'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">arg</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'%sが喋った！'</span><span class=\"p\">,</span> <span class=\"nx\">arg</span><span class=\"p\">);</span> <span class=\"c1\">// -&gt; 居酒屋のメニューが喋った！</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<p>といっても、ちょっと複雑化すると混乱してくるので、<br>\nある程度の規模になる事が予想されるなら、素直にvuexを使った方が良さそう。</p>\n\n<h2>\n<span id=\"詳細モーダルについて\" class=\"fragment\"></span><a href=\"#%E8%A9%B3%E7%B4%B0%E3%83%A2%E3%83%BC%E3%83%80%E3%83%AB%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>詳細モーダルについて</h2>\n\n<p><code>/list/?circle=(ID)</code>でサークル詳細が開くようになっていますが、このあたりはrouterで実装しました。<br>\nURLにIDが渡されていたらモーダルを開く、という動作を下記のような感じで実装しています。<br>\n(もうちょっと頭良いやり方はあるのかも…)</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">routes.js</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"k\">new</span> <span class=\"nx\">Router</span><span class=\"p\">({</span>\n    <span class=\"nx\">routes</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"c1\">// 中略</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\">// 中略</span>\n        <span class=\"nx\">props</span>    <span class=\"o\">:</span> <span class=\"nx\">route</span> <span class=\"o\">=&gt;</span> <span class=\"p\">({</span> <span class=\"nx\">circleID</span><span class=\"o\">:</span> <span class=\"nx\">route</span><span class=\"p\">.</span><span class=\"nx\">query</span><span class=\"p\">.</span><span class=\"nx\">circle</span> <span class=\"p\">}),</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">})</span>\n</pre></div>\n</div>\n\n<p>という感じで、query文字に渡されたIDがサークルリストページのpropsに渡され、</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">circleList/index.vue</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"o\">&lt;</span><span class=\"nx\">template</span> <span class=\"nx\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"pug\"</span><span class=\"o\">&gt;</span>\n<span class=\"nx\">main</span>\n    <span class=\"c1\">// 中略</span>\n    <span class=\"c1\">// ↓モーダル部分</span>\n    <span class=\"p\">.</span><span class=\"nx\">modal</span><span class=\"p\">(</span><span class=\"o\">:</span><span class=\"kr\">class</span><span class=\"o\">=</span><span class=\"s2\">\"{shown: modalOpen}\"</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"err\">/template&gt;</span>\n\n<span class=\"o\">&lt;</span><span class=\"nx\">script</span><span class=\"o\">&gt;</span>\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 中略</span>\n    <span class=\"nx\">props</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">circleID</span><span class=\"o\">:</span> <span class=\"nb\">String</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">computed</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">modalOpen</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// circleID が渡されていたらisModalOpenがtrueになる</span>\n            <span class=\"kr\">const</span> <span class=\"nx\">isModalOpen</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">circleID</span> <span class=\"o\">!==</span> <span class=\"kc\">undefined</span><span class=\"p\">);</span>\n            <span class=\"c1\">// isModalOpenがtrue時の処理など略</span>\n            <span class=\"k\">return</span> <span class=\"nx\">isModalOpen</span><span class=\"p\">;</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n<span class=\"o\">&lt;</span><span class=\"err\">/script&gt;</span>\n</pre></div>\n</div>\n\n<p>(<code>/list/?circle=(ID)</code> にアクセスされ、)詳細モーダルを開くフラグが立っていれば、モーダル表示用のclassが付加される仕組み。<br>\n画面上の詳細を開くリンク部には、このURLが開かれるようrouter-linkを設定しています。<br>\n逆に詳細モーダルを閉じる動作は、routerに<code>/list/</code>をpushすることで実装しています。</p>\n\n<h2>\n<span id=\"vueを使ってみて\" class=\"fragment\"></span><a href=\"#vue%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%A6\"><i class=\"fa fa-link\"></i></a>Vueを使ってみて</h2>\n\n<ul>\n<li>やっぱりユーザー数多い方が良いね…</li>\n<li>ドキュメントも割と読みやすいのでありがたい。</li>\n<li>HTMLを書くのとあまり変わらない感覚でコード書けるので楽。</li>\n<li>スタイルやらクラス名やら、何でもかんでもデータバインディングで書けるのでめっちゃ楽…<br>\n→ データを渡すだけでDOMの内容が書き換わってくれるので、お品書き登録みたいな機能もサクッと実装できてしまったし、SNSでつぶやくボタンの実装も手間いらず。</li>\n</ul>\n\n<h2>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h2>\n\n<p>ということで、「<a href=\"http://aquamarine-dream.info\" rel=\"nofollow noopener\" target=\"_blank\">アクアマリンドリーム</a>」をよろしくね。</p>\n\n<p>あ、参考までに<a href=\"https://github.com/niltea/vue-aqmd\" rel=\"nofollow noopener\" target=\"_blank\">ここ</a>にコード置いてます。<br>\n現在は非公開リポジトリでメンテナンスしてますので参考程度ですが…。</p>\n",
    "body": "以前書いた[Riotで同人イベントの告知ページを作ったよという話](http://qiita.com/TakashiShibusawa/items/601a20b1b2a7214c5c9d)の続編みたいなかんじです。\n（内容はあんまり関係ないです）\n\n##背景（なぜVueなのか）\nイベントサイト立ち上げ時は制作期間が全然無かった（デザイン＋コーディング数日程度）ので、\n普通にHTMLを書いて、エフェクト等のJSもES6+Webpackな感じで書いていました。\n\nしかし、アマチュアがやっている即売会とはいえ、使いやすいものを作りたいという気持ちがありました。\n使いやすさの上で一番大切な参加サークル一覧ページは、情報を探しやすくする機能を盛り込みたい。\nということで、その辺の機能を実装しやすくするために、いい感じのView系フレームワークを使って書き直してしまおう、という感じ。\n前回Riotを使って開発したのでそれでも良いのですが、ナレッジが探しづらく、\n結局いろいろとハマってしまった苦い経験もあり、別のフレームワークで開発したい気持ちがありました。\n\nそこで、色々見てるとVueがホットだし（ちょうどReactのライセンス関係でゴタゴタしている時期でもあった）、\nHTMLで書けるしナレッジもWeb上で探しやすく、良さそう！ということで、Vueを採用してみました。\n（やっぱりユーザー数多いフレームワークは困ったときにも情報が探しやすいので助かる…！）\n\n## 環境構築とか\nVue-cliは神。\nwebpack を使って書いていきたかったので、`$ vue init webpack`からの質問に答えつつ適宜設定する感じでダイアログに答えていきます。\n今回はRouter入れて、ESLintはAirbnbベースで調整するよう設定しました。\n\nhtmlはPugで書きたいので、`yarn add pug`で。（※これだけで使える。凄い！）\nスタイルはSCSSで書きたいので、`yarn add node-sass`。\n\nこれだけで書ける。便利！\n\n## 制作の流れ\n上記の通り、HTML/CSS/エフェクト等JSは既存のものがあるので、だいたい丸ごとVueに移植してます。\n（ゼロから書く場合はどうしたら良いんだろう？ 適当な雛形から肉付けしていくのが良さそうかな。）\n\n### HTML/CSSなど\n既存のpug/sassファイルから、ある程度の機能ごとに.vueファイルへ分割していく感じで作業を進めていきました。\n\n情報ページの中身については、[Riotベースで書いたとき](http://qiita.com/TakashiShibusawa/items/601a20b1b2a7214c5c9d)のようにJSONデーター読ませたいんですが、\n結局編集がやりづらい感触があったため今回はvueファイルに直書きしました……。\n\nただ、コンテンツの修正の度にソース触ってbuildして本番アップというのは非現実的なので、\n将来的にはCMS的なものを使って更新できるようにしたいなあ、とは思っています。\n※AWS S3上に置いているのですが、上手い方法はないものかしら……。\n編集画面からLambda叩いてデータ更新、みたいな仕組みが作れれば良いのかなあとは思ってます。\n\n### JSの移植\nこちらもだいたい同様に、機能ごとに.vueに落とし込んでいった感じ。\n\n## コンポーネント間連携\n作り込んでいくと、イベントのハンドリングやデータの相互通信が問題になってくることがありますね。\nページロード検知でのアニメーション開始を作り込むときとか。\n\n[Riotでやったとき](http://qiita.com/TakashiShibusawa/items/601a20b1b2a7214c5c9d#observableの利用でイベントのハンドリングが楽)はObservableを使ったのですが、\n今回は[公式ドキュメント](https://jp.vuejs.org/v2/guide/components.html#親子間以外の通信)にあるように、専用のvueインスタンスを作り、それを経由してデータのやり取りをしました。\n\nこんなかんじ。\n\n```js:main.js\n// windowにbusという名前でイベントやり取りのVueインスタンスを登録しておく\nwindow.bus = new Vue();\n```\n\n```js:example_emitter.vue\n// イベント発出側\nwindow.bus.$emit('hogeEvent', '居酒屋のメニュー');\n```\n\n```js:example_reciever.vue\n// イベント受信側\nwindow.bus.$on('hogeEvent', (arg) => {\n  console.log('%sが喋った！', arg); // -> 居酒屋のメニューが喋った！\n});\n```\n\nといっても、ちょっと複雑化すると混乱してくるので、\nある程度の規模になる事が予想されるなら、素直にvuexを使った方が良さそう。\n\n## 詳細モーダルについて\n`/list/?circle=(ID)`でサークル詳細が開くようになっていますが、このあたりはrouterで実装しました。\nURLにIDが渡されていたらモーダルを開く、という動作を下記のような感じで実装しています。\n(もうちょっと頭良いやり方はあるのかも…)\n\n```js:routes.js\nexport default new Router({\n\troutes: [\n\t// 中略\n\t{\n\t\t// 中略\n\t\tprops    : route => ({ circleID: route.query.circle }),\n\t},\n})\n```\n\nという感じで、query文字に渡されたIDがサークルリストページのpropsに渡され、\n\n```js:circleList/index.vue\n<template lang=\"pug\">\nmain\n\t// 中略\n\t// ↓モーダル部分\n\t.modal(:class=\"{shown: modalOpen}\")\n</template>\n\n<script>\nexport default {\n\t// 中略\n\tprops: {\n\t\tcircleID: String,\n\t},\n\tcomputed: {\n\t\tmodalOpen() {\n\t\t\t// circleID が渡されていたらisModalOpenがtrueになる\n\t\t\tconst isModalOpen = (this.circleID !== undefined);\n\t\t\t// isModalOpenがtrue時の処理など略\n\t\t\treturn isModalOpen;\n\t\t},\n\t},\n}\n</script>\n```\n(`/list/?circle=(ID)` にアクセスされ、)詳細モーダルを開くフラグが立っていれば、モーダル表示用のclassが付加される仕組み。\n画面上の詳細を開くリンク部には、このURLが開かれるようrouter-linkを設定しています。\n逆に詳細モーダルを閉じる動作は、routerに`/list/`をpushすることで実装しています。\n\n\n## Vueを使ってみて\n* やっぱりユーザー数多い方が良いね…\n* ドキュメントも割と読みやすいのでありがたい。\n* HTMLを書くのとあまり変わらない感覚でコード書けるので楽。\n* スタイルやらクラス名やら、何でもかんでもデータバインディングで書けるのでめっちゃ楽…  \n→ データを渡すだけでDOMの内容が書き換わってくれるので、お品書き登録みたいな機能もサクッと実装できてしまったし、SNSでつぶやくボタンの実装も手間いらず。\n\n## 最後に\nということで、「[アクアマリンドリーム](http://aquamarine-dream.info)」をよろしくね。\n\nあ、参考までに[ここ](https://github.com/niltea/vue-aqmd)にコード置いてます。\n現在は非公開リポジトリでメンテナンスしてますので参考程度ですが…。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-11-01T17:11:59+09:00",
    "group": null,
    "id": "97ef0e8a638482068a1b",
    "likes_count": 8,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "vue.js",
        "versions": []
      }
    ],
    "title": "Vue.jsで同人イベントの告知ページを作った話",
    "updated_at": "2017-11-01T17:11:59+09:00",
    "url": "http://qiita.com/TakashiShibusawa/items/97ef0e8a638482068a1b",
    "user": {
      "description": "へちょいフロントエンドおじさんです。\r\nちょっと前まで占いコンテンツの制作会社にいました。\r\nいまはデザイン会社でおしごとしてます。",
      "facebook_id": "",
      "followees_count": 4,
      "followers_count": 4,
      "github_login_name": "niltea",
      "id": "TakashiShibusawa",
      "items_count": 9,
      "linkedin_id": "",
      "location": "とうきょうと",
      "name": "Takashi Shibusawa",
      "organization": "BALCOLONY.",
      "permanent_id": 97513,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/97513/profile-images/1473707225",
      "twitter_screen_name": "niltea",
      "website_url": "http://www.nilgiri-tea.net"
    }
  },
  {
    "rendered_body": "<p><a href=\"http://tackeyy.com/\" rel=\"nofollow noopener\" target=\"_blank\">個人ブログ</a>をRailsとWebpackerを使ってVue.jsで運用しています。<br>\n最近メインマシンをMackBookProからThinkPadT470sに移したのはいいですが、<br>\n環境構築だるいなーということでDockerで動かすようにしました。</p>\n\n<p>こちらのプルリクを見てもらうとだいたいわかると思います。<br>\n<a href=\"https://github.com/tackeyy/blog/pull/200/files\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/tackeyy/blog/pull/200/files</a></p>\n\n<h1>\n<span id=\"前提\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%8F%90\"><i class=\"fa fa-link\"></i></a>前提</h1>\n\n<ul>\n<li>既存のアプリをDockerで動かせるようにします</li>\n<li>Railsの起動はforemanを使っており、foreman startでRailsが起動するようになっています</li>\n</ul>\n\n<h1>\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h1>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>$ docker-compose version\ndocker-compose version 1.16.1, build 6d1ac21\ndocker-py version: 2.5.1\nCPython version: 2.7.13\nOpenSSL version: OpenSSL 1.0.1t  3 May 2016\n</pre></div></div>\n\n<h1>\n<span id=\"1-dockerファイル作成\" class=\"fragment\"></span><a href=\"#1-docker%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>1. Dockerファイル作成</h1>\n\n<div class=\"code-frame\" data-lang=\"diff\"><div class=\"highlight\"><pre><span></span><span class=\"gi\">+FROM ruby:2.4.1</span>\n<span class=\"gi\">+LABEL maintainer 'tackeyy'</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+# Set environment variables</span>\n<span class=\"gi\">+ENV LANG C.UTF-8</span>\n<span class=\"gi\">+ENV ROOT_PATH /blog</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+# Install essential libraries</span>\n<span class=\"gi\">+RUN apt-get update &amp;&amp; apt-get install -y build-essential libpq-dev</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+# Install node.js</span>\n<span class=\"gi\">+RUN curl -sL https://deb.nodesource.com/setup_8.x | bash - &amp;&amp; \\</span>\n<span class=\"gi\">+    apt-get install nodejs</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+# Install yarn</span>\n<span class=\"gi\">+RUN apt-get update &amp;&amp; apt-get install -y curl apt-transport-https wget &amp;&amp; \\</span>\n<span class=\"gi\">+    curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - &amp;&amp; \\</span>\n<span class=\"gi\">+    echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list &amp;&amp; \\</span>\n<span class=\"gi\">+    apt-get update &amp;&amp; apt-get install -y yarn</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+# Fix: 'Cannot find module 'node-sass'</span>\n<span class=\"gi\">+RUN yarn add node-sass</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+# Move to root</span>\n<span class=\"gi\">+RUN mkdir $ROOT_PATH</span>\n<span class=\"gi\">+WORKDIR $ROOT_PATH</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+# Bundle install</span>\n<span class=\"gi\">+ADD Gemfile $ROOT_PATH/Gemfile</span>\n<span class=\"gi\">+ADD Gemfile.lock $ROOT_PATH/Gemfile.lock</span>\n<span class=\"gi\">+RUN bundle install</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+# Install foreman</span>\n<span class=\"gi\">+RUN gem install foreman</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+ADD . $ROOT_PATH</span>\n</pre></div></div>\n\n<h1>\n<span id=\"2-docker-composeyml作成\" class=\"fragment\"></span><a href=\"#2-docker-composeyml%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. docker-compose.yml作成</h1>\n\n<div class=\"code-frame\" data-lang=\"diff\"><div class=\"highlight\"><pre><span></span><span class=\"gi\">+services:+version: '2'</span>\n<span class=\"gi\">+services:</span>\n<span class=\"gi\">+  db:</span>\n<span class=\"gi\">+    image: mysql:5.7</span>\n<span class=\"gi\">+    ports:</span>\n<span class=\"gi\">+      - \"4306:3306\"</span>\n<span class=\"gi\">+    environment:</span>\n<span class=\"gi\">+      MYSQL_USER: \"root\"</span>\n<span class=\"gi\">+      MYSQL_ALLOW_EMPTY_PASSWORD: \"true\"</span>\n<span class=\"gi\">+  web:</span>\n<span class=\"gi\">+    build: .</span>\n<span class=\"gi\">+    command: foreman start</span>\n<span class=\"gi\">+    volumes:</span>\n<span class=\"gi\">+      - .:/blog</span>\n<span class=\"gi\">+    ports:</span>\n<span class=\"gi\">+      - \"5000:5000\"</span>\n<span class=\"gi\">+      - \"8080:8080\"</span>\n<span class=\"gi\">+    depends_on:</span>\n<span class=\"gi\">+      - db</span>\n</pre></div></div>\n\n<h1>\n<span id=\"3-docker-composeymlに記載したサービスのビルド\" class=\"fragment\"></span><a href=\"#3-docker-composeyml%E3%81%AB%E8%A8%98%E8%BC%89%E3%81%97%E3%81%9F%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89\"><i class=\"fa fa-link\"></i></a>3. docker-compose.ymlに記載したサービスのビルド</h1>\n\n<p><code>$ docker-compose build</code></p>\n\n<h1>\n<span id=\"4-dbテーブル初期データ作成\" class=\"fragment\"></span><a href=\"#4-db%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E5%88%9D%E6%9C%9F%E3%83%87%E3%83%BC%E3%82%BF%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>4. DB/テーブル/初期データ作成</h1>\n\n<p><code>$ docker-compose run web rake db:create db:migrate db:seed_fu</code></p>\n\n<h1>\n<span id=\"5-コンテナとサービスの起動\" class=\"fragment\"></span><a href=\"#5-%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%A8%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E8%B5%B7%E5%8B%95\"><i class=\"fa fa-link\"></i></a>5. コンテナとサービスの起動</h1>\n\n<p><code>$ docker-compose up</code></p>\n\n<p>これで <code>localhost:5000</code> にアクセスすればOKです。</p>\n",
    "body": "[個人ブログ](http://tackeyy.com/)をRailsとWebpackerを使ってVue.jsで運用しています。\n最近メインマシンをMackBookProからThinkPadT470sに移したのはいいですが、\n環境構築だるいなーということでDockerで動かすようにしました。\n\nこちらのプルリクを見てもらうとだいたいわかると思います。\nhttps://github.com/tackeyy/blog/pull/200/files\n\n\n# 前提\n\n- 既存のアプリをDockerで動かせるようにします\n- Railsの起動はforemanを使っており、foreman startでRailsが起動するようになっています\n\n# 環境\n\n```\n$ docker-compose version\ndocker-compose version 1.16.1, build 6d1ac21\ndocker-py version: 2.5.1\nCPython version: 2.7.13\nOpenSSL version: OpenSSL 1.0.1t  3 May 2016\n```\n\n# 1. Dockerファイル作成\n\n```diff\n+FROM ruby:2.4.1\n+LABEL maintainer 'tackeyy'\n+\n+# Set environment variables\n+ENV LANG C.UTF-8\n+ENV ROOT_PATH /blog\n+\n+# Install essential libraries\n+RUN apt-get update && apt-get install -y build-essential libpq-dev\n+\n+# Install node.js\n+RUN curl -sL https://deb.nodesource.com/setup_8.x | bash - && \\\n+    apt-get install nodejs\n+\n+# Install yarn\n+RUN apt-get update && apt-get install -y curl apt-transport-https wget && \\\n+    curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && \\\n+    echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list && \\\n+    apt-get update && apt-get install -y yarn\n+\n+# Fix: 'Cannot find module 'node-sass'\n+RUN yarn add node-sass\n+\n+# Move to root\n+RUN mkdir $ROOT_PATH\n+WORKDIR $ROOT_PATH\n+\n+# Bundle install\n+ADD Gemfile $ROOT_PATH/Gemfile\n+ADD Gemfile.lock $ROOT_PATH/Gemfile.lock\n+RUN bundle install\n+\n+# Install foreman\n+RUN gem install foreman\n+\n+ADD . $ROOT_PATH\n```\n\n# 2. docker-compose.yml作成\n\n```diff\n+services:+version: '2'\n+services:\n+  db:\n+    image: mysql:5.7\n+    ports:\n+      - \"4306:3306\"\n+    environment:\n+      MYSQL_USER: \"root\"\n+      MYSQL_ALLOW_EMPTY_PASSWORD: \"true\"\n+  web:\n+    build: .\n+    command: foreman start\n+    volumes:\n+      - .:/blog\n+    ports:\n+      - \"5000:5000\"\n+      - \"8080:8080\"\n+    depends_on:\n+      - db\n ```\n\n# 3. docker-compose.ymlに記載したサービスのビルド\n\n` $ docker-compose build `\n\n# 4. DB/テーブル/初期データ作成\n\n` $ docker-compose run web rake db:create db:migrate db:seed_fu `\n\n# 5. コンテナとサービスの起動\n\n` $ docker-compose up `\n\nこれで ` localhost:5000 ` にアクセスすればOKです。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-10-31T17:42:26+09:00",
    "group": null,
    "id": "ef4cd565cadbb47a0166",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Rails",
        "versions": []
      },
      {
        "name": "docker",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "docker-compose",
        "versions": []
      },
      {
        "name": "webpacker",
        "versions": []
      }
    ],
    "title": "既存のRails & Vue.js (Webpacker) アプリをDockerで動かす",
    "updated_at": "2017-10-31T17:42:26+09:00",
    "url": "http://qiita.com/tackeyy/items/ef4cd565cadbb47a0166",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 14,
      "followers_count": 2,
      "github_login_name": "tackeyy",
      "id": "tackeyy",
      "items_count": 36,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 118590,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/118590/profile-images/1473713973",
      "twitter_screen_name": null,
      "website_url": "http://tackeyy.com/"
    }
  },
  {
    "rendered_body": "<p>なんとなく。</p>\n\n<h2>\n<span id=\"依存パッケージ\" class=\"fragment\"></span><a href=\"#%E4%BE%9D%E5%AD%98%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8\"><i class=\"fa fa-link\"></i></a>依存パッケージ</h2>\n\n<p>以下のものが必要なのでインストールします。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span></span>npm i vue vue-class-component\n\nnpm i -D <span class=\"se\">\\</span>\n  @types/vue <span class=\"se\">\\</span>\n  typescript <span class=\"se\">\\</span>\n  babel-core <span class=\"se\">\\</span>\n  babel-preset-env <span class=\"se\">\\</span>\n  babel-plugin-transform-vue-jsx <span class=\"se\">\\</span>\n  babel-plugin-syntax-jsx <span class=\"se\">\\</span>\n  babel-helper-vue-jsx-merge-props <span class=\"se\">\\</span>\n  webpack <span class=\"se\">\\</span>\n  awesome-typescript-loader\n</pre></div></div>\n\n<p>あと開発に便利なこんなのも入れる。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span></span>npm i -D webpack-dev-server html-webpack-plugin\n</pre></div></div>\n\n<h2>\n<span id=\"コンパイルの流れ\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%AE%E6%B5%81%E3%82%8C\"><i class=\"fa fa-link\"></i></a>コンパイルの流れ</h2>\n\n<p>Vueでは、JSXを<a href=\"https://github.com/vuejs/vue/blob/dev/src/core/vdom/vnode.js\" rel=\"nofollow noopener\" target=\"_blank\"><code>VNode</code></a>というものへ変換する必要があります。この変換は、</p>\n\n<ol>\n<li>\n<strong><code>.tsx</code>で書く</strong>  <code>&lt;div&gt;hoge&lt;/div&gt;</code>\n</li>\n<li>\n<strong><code>.jsx</code>に変換</strong>  <code>&lt;div&gt;hoge&lt;/div&gt;</code>\n</li>\n<li>\n<strong>そしてBabelで<code>.js</code>に変換</strong>  <code>h('div', null, ['hoge'])</code>\n</li>\n</ol>\n\n<p>という感じでやります。</p>\n\n<h2>\n<span id=\"環境構築\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89\"><i class=\"fa fa-link\"></i></a>環境構築</h2>\n\n<h3>\n<span id=\"typescript\" class=\"fragment\"></span><a href=\"#typescript\"><i class=\"fa fa-link\"></i></a>TypeScript</h3>\n\n<p>こんな設定にします。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">tsconfig.json</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">\"compilerOptions\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"jsx\"</span><span class=\"p\">:</span> <span class=\"s2\">\"preserve\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"experimentalDecorators\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"target\"</span><span class=\"p\">:</span> <span class=\"s2\">\"es5\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"module\"</span><span class=\"p\">:</span> <span class=\"s2\">\"commonjs\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"lib\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"es2015\"</span><span class=\"p\">,</span> <span class=\"s2\">\"dom\"</span><span class=\"p\">],</span>\n    <span class=\"nt\">\"strict\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>重要なのが上2つで、<code>jsx:preserve</code>を指定することで、JSX部分はそのまんまで<code>.jsx</code>に変換します。<code>experimentalDecorators:true</code>は、デコレーターを噛ますのに必要です。今回では<code>vue-class-component</code>の<code>@Component</code>ですね。</p>\n\n<p>（他はだいたい天ぷら🍤）</p>\n\n<h3>\n<span id=\"babel\" class=\"fragment\"></span><a href=\"#babel\"><i class=\"fa fa-link\"></i></a>Babel</h3>\n\n<p><a href=\"https://github.com/vuejs/vue/blob/dev/src/core/vdom/vnode.js\" rel=\"nofollow noopener\" target=\"_blank\"><code>VNode</code></a>へ変換するために、<code>babel-plugin-transform-vue-jsx</code>を使います。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">.babelrc</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n  <span class=\"nt\">\"presets\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"env\"</span><span class=\"p\">],</span>\n  <span class=\"nt\">\"plugins\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"transform-vue-jsx\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"webpack\" class=\"fragment\"></span><a href=\"#webpack\"><i class=\"fa fa-link\"></i></a>Webpack</h3>\n\n<p><code>awesome-typescript-loader</code>の<code>options</code>で<code>useBabel:true</code>すると、TypeScript変換後にバベるようになります。これで上記のコンパイルの流れで変換します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">webpack.config.js</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">entry</span><span class=\"o\">:</span> <span class=\"nx\">__dirname</span> <span class=\"o\">+</span> <span class=\"s1\">'/app.tsx'</span><span class=\"p\">,</span>\n  <span class=\"nx\">output</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"nx\">__dirname</span> <span class=\"o\">+</span> <span class=\"s1\">'/dev'</span><span class=\"p\">,</span>\n    <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">'app.js'</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">module</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">rules</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.tsx$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">exclude</span><span class=\"o\">:</span> <span class=\"sr\">/node_modules/</span><span class=\"p\">,</span>\n        <span class=\"nx\">use</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span>\n            <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s1\">'awesome-typescript-loader'</span><span class=\"p\">,</span>\n            <span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n              <span class=\"nx\">useBabel</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n            <span class=\"p\">}</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">]</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">plugins</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"k\">new</span> <span class=\"nx\">HtmlWebpackPlugin</span><span class=\"p\">()</span>\n  <span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"コードを書く\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E6%9B%B8%E3%81%8F\"><i class=\"fa fa-link\"></i></a>コードを書く</h2>\n\n<p>適当に用意しました。</p>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">app.tsx</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nx\">Vue</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">CreateElement</span><span class=\"p\">,</span> <span class=\"nx\">VNode</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">'vue'</span><span class=\"p\">;</span>\n<span class=\"kr\">import</span> <span class=\"nx\">Component</span> <span class=\"nx\">from</span> <span class=\"s1\">'vue-class-component'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">@Component</span><span class=\"p\">({</span>\n  <span class=\"nx\">props</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">type</span>: <span class=\"kt\">String</span><span class=\"p\">,</span>\n      <span class=\"nx\">required</span>: <span class=\"kt\">true</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n<span class=\"kr\">class</span> <span class=\"nx\">Hello</span> <span class=\"kr\">extends</span> <span class=\"nx\">Vue</span> <span class=\"p\">{</span>\n  <span class=\"nx\">name</span>: <span class=\"kt\">string</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// mounted() {}</span>\n\n  <span class=\"c1\">// handleClick = () =&gt; {}</span>\n\n  <span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"nx\">h</span>: <span class=\"kt\">CreateElement</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">VNode</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span>\n        <span class=\"nx\">Hello</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">}</span> <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">$slots</span><span class=\"p\">.</span><span class=\"k\">default</span><span class=\"p\">}</span>\n      <span class=\"o\">&lt;</span><span class=\"err\">/div&gt;</span>\n    <span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">@Component</span>\n<span class=\"kr\">class</span> <span class=\"nx\">App</span> <span class=\"kr\">extends</span> <span class=\"nx\">Vue</span> <span class=\"p\">{</span>\n  <span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"nx\">h</span>: <span class=\"kt\">CreateElement</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">VNode</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">Hello</span>\n          <span class=\"nx\">name</span><span class=\"o\">=</span><span class=\"s2\">\"nju33\"</span>\n        <span class=\"o\">&gt;!!!!!&lt;</span><span class=\"err\">/Hello&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"err\">/div&gt;</span>\n    <span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">div</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">'div'</span><span class=\"p\">);</span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">div</span><span class=\"p\">);</span>\n\n<span class=\"k\">new</span> <span class=\"nx\">Vue</span><span class=\"p\">({</span>\n  <span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"nx\">h</span>: <span class=\"kt\">CreateElement</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">VNode</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">App</span> <span class=\"o\">/&gt;</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}).</span><span class=\"nx\">$mount</span><span class=\"p\">(</span><span class=\"nx\">div</span><span class=\"p\">);</span>\n\n</pre></div>\n</div>\n\n<p><strong>必ず<code>@Component</code>と付けるように</strong>します。じゃないとエラーです。</p>\n\n<p><code>methods</code>や<code>data</code>なんかで包んでいた値は、そのままプロパティ値やメソッドとして定義して使っても大丈夫で、<code>components</code>とかもスコープ上にあれば直接使えちゃいます。（Reactみたいに）<br>\nまた、Reactで言う<code>this.props.children</code>は、<code>this.$slots.xxx</code>に入ってますね。</p>\n\n<p>ただ、上記だと<code>render</code>の戻り値が<code>any</code>でエラーが出るみたいなのでJSX.Elementをこんな感じで型定義して<code>VNode</code>にキャストできるようにしときます。</p>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">jsx.d.ts</span></div>\n<div class=\"highlight\"><pre><span></span><span class=\"kr\">import</span> <span class=\"nx\">Vue</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">VNode</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">'vue'</span><span class=\"p\">;</span>\n<span class=\"kr\">declare</span> <span class=\"nx\">global</span> <span class=\"p\">{</span>\n  <span class=\"nx\">namespace</span> <span class=\"nx\">JSX</span> <span class=\"p\">{</span>\n    <span class=\"kr\">interface</span> <span class=\"nx\">Element</span> <span class=\"kr\">extends</span> <span class=\"nx\">VNode</span> <span class=\"p\">{}</span>\n    <span class=\"kr\">interface</span> <span class=\"nx\">ElementClass</span> <span class=\"kr\">extends</span> <span class=\"nx\">Vue</span> <span class=\"p\">{}</span>\n    <span class=\"kr\">interface</span> <span class=\"nx\">IntrinsicElements</span> <span class=\"p\">{</span>\n      <span class=\"p\">[</span><span class=\"nx\">element</span>: <span class=\"kt\">string</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"nx\">any</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h2>\n<span id=\"結果\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E6%9E%9C\"><i class=\"fa fa-link\"></i></a>結果</h2>\n\n<p>上のコードを実行するとこんな感じで表示されます。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/55e532d00f931ccba382db90780f5345444226f0/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38343134342f32636336656233632d373636302d396538652d343137652d6161643262326335626338382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"288\" alt=\"Webpack_App_🔊.png\" src=\"https://camo.qiitausercontent.com/55e532d00f931ccba382db90780f5345444226f0/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38343134342f32636336656233632d373636302d396538652d343137652d6161643262326335626338382e706e67\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/84144/2cc6eb3c-7660-9e8e-417e-aad2b2c5bc88.png\"></a></p>\n\n<ul>\n<li>あ、これReactだ。</li>\n<li>\n<code>.vue</code>とどっちを使うかはアナタ次第って感じじゃ。はたまたミックスか🤔</li>\n</ul>\n",
    "body": "なんとなく。\n\n## 依存パッケージ\n\n以下のものが必要なのでインストールします。\n\n```bash\nnpm i vue vue-class-component\n\nnpm i -D \\\n  @types/vue \\\n  typescript \\\n  babel-core \\\n  babel-preset-env \\\n  babel-plugin-transform-vue-jsx \\\n  babel-plugin-syntax-jsx \\\n  babel-helper-vue-jsx-merge-props \\\n  webpack \\\n  awesome-typescript-loader\n```\n\nあと開発に便利なこんなのも入れる。\n\n```bash\nnpm i -D webpack-dev-server html-webpack-plugin\n```\n\n## コンパイルの流れ\n\nVueでは、JSXを[`VNode`](https://github.com/vuejs/vue/blob/dev/src/core/vdom/vnode.js)というものへ変換する必要があります。この変換は、\n\n1. **`.tsx`で書く**  `<div>hoge</div>`\n2. **`.jsx`に変換**  `<div>hoge</div>`\n3. **そしてBabelで`.js`に変換**  `h('div', null, ['hoge'])`\n\nという感じでやります。\n\n## 環境構築\n\n### TypeScript\n\nこんな設定にします。\n\n```json:tsconfig.json\n{\n  \"compilerOptions\": {\n    \"jsx\": \"preserve\",\n    \"experimentalDecorators\": true,\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"es2015\", \"dom\"],\n    \"strict\": true\n  }\n}\n```\n\n重要なのが上2つで、`jsx:preserve`を指定することで、JSX部分はそのまんまで`.jsx`に変換します。`experimentalDecorators:true`は、デコレーターを噛ますのに必要です。今回では`vue-class-component`の`@Component`ですね。\n\n（他はだいたい天ぷら🍤）\n\n### Babel\n\n[`VNode`](https://github.com/vuejs/vue/blob/dev/src/core/vdom/vnode.js)へ変換するために、`babel-plugin-transform-vue-jsx`を使います。\n\n```json:.babelrc\n{\n  \"presets\": [\"env\"],\n  \"plugins\": [\"transform-vue-jsx\"]\n}\n```\n\n### Webpack\n\n`awesome-typescript-loader`の`options`で`useBabel:true`すると、TypeScript変換後にバベるようになります。これで上記のコンパイルの流れで変換します。\n\n```js:webpack.config.js\nmodule.exports = {\n  entry: __dirname + '/app.tsx',\n  output: {\n    path: __dirname + '/dev',\n    filename: 'app.js',\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.tsx$/,\n        exclude: /node_modules/,\n        use: [\n          {\n            loader: 'awesome-typescript-loader',\n            options: {\n              useBabel: true\n            }\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin()\n  ],\n}\n```\n\n## コードを書く\n\n適当に用意しました。\n\n```ts:app.tsx\nimport Vue, {CreateElement, VNode} from 'vue';\nimport Component from 'vue-class-component';\n\n@Component({\n  props: {\n    name: {\n      type: String,\n      required: true\n    },\n  }\n})\nclass Hello extends Vue {\n  name: string;\n\n  // mounted() {}\n\n  // handleClick = () => {}\n\n  render(h: CreateElement): VNode {\n    return (\n      <div>\n        Hello, {this.name} {this.$slots.default}\n      </div>\n    );\n  }\n}\n\n@Component\nclass App extends Vue {\n  render(h: CreateElement): VNode {\n    return (\n      <div>\n        <Hello\n          name=\"nju33\"\n        >!!!!!</Hello>\n      </div>\n    );\n  }\n}\n\nconst div = document.createElement('div');\ndocument.body.appendChild(div);\n\nnew Vue({\n  render(h: CreateElement): VNode {\n    return <App />;\n  }\n}).$mount(div);\n\n```\n\n**必ず`@Component`と付けるように**します。じゃないとエラーです。\n\n`methods`や`data`なんかで包んでいた値は、そのままプロパティ値やメソッドとして定義して使っても大丈夫で、`components`とかもスコープ上にあれば直接使えちゃいます。（Reactみたいに）\nまた、Reactで言う`this.props.children`は、`this.$slots.xxx`に入ってますね。\n\n\nただ、上記だと`render`の戻り値が`any`でエラーが出るみたいなのでJSX.Elementをこんな感じで型定義して`VNode`にキャストできるようにしときます。\n\n```ts:jsx.d.ts\nimport Vue, {VNode} from 'vue';\ndeclare global {\n  namespace JSX {\n    interface Element extends VNode {}\n    interface ElementClass extends Vue {}\n    interface IntrinsicElements {\n      [element: string]: any;\n    }\n  }\n}\n\n```\n\n## 結果\n\n上のコードを実行するとこんな感じで表示されます。\n\n<img width=\"288\" alt=\"Webpack_App_🔊.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/84144/2cc6eb3c-7660-9e8e-417e-aad2b2c5bc88.png\">\n\n- あ、これReactだ。\n- `.vue`とどっちを使うかはアナタ次第って感じじゃ。はたまたミックスか🤔\n\n\n\n\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-10-31T10:47:42+09:00",
    "group": null,
    "id": "09f0b3c544252daebb73",
    "likes_count": 3,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "JavaScript",
        "versions": []
      },
      {
        "name": "TypeScript",
        "versions": []
      },
      {
        "name": "vue.js",
        "versions": []
      }
    ],
    "title": "TypeScript と Vue(ClassComponent) と JSX な環境",
    "updated_at": "2017-11-02T15:02:20+09:00",
    "url": "http://qiita.com/nju33/items/09f0b3c544252daebb73",
    "user": {
      "description": "JavaScript好きです。ちょっとだけRust勉強中です。",
      "facebook_id": "",
      "followees_count": 4,
      "followers_count": 10,
      "github_login_name": "nju33",
      "id": "nju33",
      "items_count": 59,
      "linkedin_id": "",
      "location": "",
      "name": "純",
      "organization": "",
      "permanent_id": 84144,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/84144/profile-images/1496803139",
      "twitter_screen_name": "nju33_ki",
      "website_url": "https://github.com/nju33"
    }
  },
  {
    "rendered_body": "<p>入力したものを送信する部分を作る</p>\n\n<h3>\n<span id=\"入力用のdataを用意する\" class=\"fragment\"></span><a href=\"#%E5%85%A5%E5%8A%9B%E7%94%A8%E3%81%AEdata%E3%82%92%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>入力用のdataを用意する</h3>\n\n<p>nameとmessageを追加する</p>\n\n<div class=\"code-frame\" data-lang=\"JavaScript\"><div class=\"highlight\"><pre><span></span><span class=\"nx\">data</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"nx\">list</span><span class=\"o\">:</span> <span class=\"p\">[],</span>     <span class=\"c1\">// 最新状態はここにコピーされる</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>     <span class=\"c1\">// 名前</span>\n    <span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>  <span class=\"c1\">// 送信メッセージ</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<h3>\n<span id=\"入力部分のhtml\" class=\"fragment\"></span><a href=\"#%E5%85%A5%E5%8A%9B%E9%83%A8%E5%88%86%E3%81%AEhtml\"><i class=\"fa fa-link\"></i></a>入力部分のhtml</h3>\n\n<p>dataに追加したnameとmessageをinputの <code>v-model</code> に入れて紐付ける</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span></span>\n<span class=\"c\">&lt;!-- 名前の入力欄 --&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">\"nameInput\"</span><span class=\"p\">&gt;</span>名前<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"txt\"</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"nameInput\"</span> <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"name\"</span><span class=\"p\">&gt;</span>\n\n<span class=\"c\">&lt;!-- メッセージの入力欄 --&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">\"nameInput\"</span><span class=\"p\">&gt;</span>メッセージ<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"txt\"</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"nameInput\"</span> <span class=\"na\">v-model</span><span class=\"o\">=</span><span class=\"s\">\"message\"</span><span class=\"p\">&gt;</span>\n</pre></div></div>\n\n<p>Vue Devtoolsで入力データがdataに反映されてることを確認しよう。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/041e8ec523a9c6a2a42bf531d4f51cf601f93d9b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f323937322f35366431613334612d663665662d383066372d393465632d3763656263653462333339392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"647\" alt=\"vue-fire.png\" src=\"https://camo.qiitausercontent.com/041e8ec523a9c6a2a42bf531d4f51cf601f93d9b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f323937322f35366431613334612d663665662d383066372d393465632d3763656263653462333339392e706e67\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/2972/56d1a34a-f6ef-80f7-94ec-7cebce4b3399.png\"></a></p>\n\n<h3>\n<span id=\"送信ボタン\" class=\"fragment\"></span><a href=\"#%E9%80%81%E4%BF%A1%E3%83%9C%E3%82%BF%E3%83%B3\"><i class=\"fa fa-link\"></i></a>送信ボタン</h3>\n\n<p>イベントハンドラーに <code>sendMessage</code> を入れる</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><span></span>&lt;!-- 送信ボタン --&gt;\n&lt;button type=\"button\" class=\"btn btn-default\" @click=\"sendMessage\"&gt;\n  送信\n&lt;/button&gt;\n</pre></div></div>\n\n<h3>\n<span id=\"sendmessageの実装\" class=\"fragment\"></span><a href=\"#sendmessage%E3%81%AE%E5%AE%9F%E8%A3%85\"><i class=\"fa fa-link\"></i></a>sendMessageの実装</h3>\n\n<p>firebaseに送信する部分を実装する。methodsに以下の関数を追加しよう。</p>\n\n<div class=\"code-frame\" data-lang=\"JavaScript\"><div class=\"highlight\"><pre><span></span><span class=\"nx\">sendMessage</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 空欄の場合は実行しない</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"k\">return</span>\n  <span class=\"c1\">// 送信</span>\n  <span class=\"nx\">firebase</span><span class=\"p\">.</span><span class=\"nx\">database</span><span class=\"p\">().</span><span class=\"nx\">ref</span><span class=\"p\">(</span><span class=\"s1\">'myBoard/'</span><span class=\"p\">).</span><span class=\"nx\">push</span><span class=\"p\">({</span>\n    <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span>\n    <span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n  <span class=\"p\">})</span>\n  <span class=\"c1\">// 送信後inputを空にする</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p>名前とメッセージを入力して、送信ボタンを押してみよう。リストに新しいデータが追加されるはず。ブラウザをリロードして、データがちゃんと残ってることを確認しよう。firebaseを使えば、簡単に永続化できるんだ！</p>\n",
    "body": "入力したものを送信する部分を作る\n\n### 入力用のdataを用意する\nnameとmessageを追加する\n\n```JavaScript\ndata () {\n  return {\n    list: [],     // 最新状態はここにコピーされる\n    name: '',     // 名前\n    message: '',  // 送信メッセージ\n  }\n}\n```\n\n### 入力部分のhtml\n\ndataに追加したnameとmessageをinputの `v-model` に入れて紐付ける\n\n```html\n\n<!-- 名前の入力欄 -->\n<label for=\"nameInput\">名前</label>\n<input type=\"txt\" id=\"nameInput\" v-model=\"name\">\n\n<!-- メッセージの入力欄 -->\n<label for=\"nameInput\">メッセージ</label>\n<input type=\"txt\" id=\"nameInput\" v-model=\"message\">\n```\n\nVue Devtoolsで入力データがdataに反映されてることを確認しよう。\n\n<img width=\"647\" alt=\"vue-fire.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/2972/56d1a34a-f6ef-80f7-94ec-7cebce4b3399.png\">\n\n\n### 送信ボタン\n\nイベントハンドラーに `sendMessage` を入れる\n\n```\n<!-- 送信ボタン -->\n<button type=\"button\" class=\"btn btn-default\" @click=\"sendMessage\">\n  送信\n</button>\n```\n\n### sendMessageの実装\nfirebaseに送信する部分を実装する。methodsに以下の関数を追加しよう。\n\n```JavaScript\nsendMessage () {\n  // 空欄の場合は実行しない\n  if (!this.name || !this.message) return\n  // 送信\n  firebase.database().ref('myBoard/').push({\n    name: this.name,\n    message: this.message\n  })\n  // 送信後inputを空にする\n  this.name = ''\n  this.message = ''\n}\n```\n\n名前とメッセージを入力して、送信ボタンを押してみよう。リストに新しいデータが追加されるはず。ブラウザをリロードして、データがちゃんと残ってることを確認しよう。firebaseを使えば、簡単に永続化できるんだ！\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2017-10-31T03:32:52+09:00",
    "group": null,
    "id": "2717cc28d4763deb433c",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "vue.js",
        "versions": []
      },
      {
        "name": "Firebase",
        "versions": []
      }
    ],
    "title": "Vue.jsでFirebaseを始めよう 6.入力＆送信編",
    "updated_at": "2017-10-31T03:32:52+09:00",
    "url": "http://qiita.com/renowan/items/2717cc28d4763deb433c",
    "user": {
      "description": "",
      "facebook_id": "renowan",
      "followees_count": 2,
      "followers_count": 8,
      "github_login_name": null,
      "id": "renowan",
      "items_count": 13,
      "linkedin_id": "renowan",
      "location": "Tokyo, Japan",
      "name": "Wan Reno",
      "organization": "",
      "permanent_id": 2972,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/2972/profile-images/1473682425",
      "twitter_screen_name": "renowan",
      "website_url": "http://www.renowan.com/blog/"
    }
  }
]
